
Image_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c74  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  08009e24  08009e24  0000ae24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0b0  0800a0b0  0000c150  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0b0  0800a0b0  0000b0b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0b8  0800a0b8  0000c150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0b8  0800a0b8  0000b0b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a0bc  0800a0bc  0000b0bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000150  20000000  0800a0c0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c150  2**0
                  CONTENTS
 10 .bss          00007dc8  20000150  20000150  0000c150  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20007f18  20007f18  0000c150  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c150  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015143  00000000  00000000  0000c180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003867  00000000  00000000  000212c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010f0  00000000  00000000  00024b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cc3  00000000  00000000  00025c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004f0c  00000000  00000000  000268e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016f24  00000000  00000000  0002b7ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d68d0  00000000  00000000  00042713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00118fe3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000049a4  00000000  00000000  00119028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0011d9cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000150 	.word	0x20000150
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009e0c 	.word	0x08009e0c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000154 	.word	0x20000154
 80001ec:	08009e0c 	.word	0x08009e0c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <buffersize>:
 * @param	fmt	pointer the array of characters data to be transmitted
 *
 * @retval	none
 */

int buffersize(char *buff) {
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000588:	2300      	movs	r3, #0
 800058a:	60fb      	str	r3, [r7, #12]
	while (*buff++ != '\0')
 800058c:	e002      	b.n	8000594 <buffersize+0x14>
		i++;
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	3301      	adds	r3, #1
 8000592:	60fb      	str	r3, [r7, #12]
	while (*buff++ != '\0')
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	1c5a      	adds	r2, r3, #1
 8000598:	607a      	str	r2, [r7, #4]
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d1f6      	bne.n	800058e <buffersize+0xe>
	return i;
 80005a0:	68fb      	ldr	r3, [r7, #12]
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
	...

080005b0 <myprintf>:
void myprintf(const char *fmt, ...) {
 80005b0:	b40f      	push	{r0, r1, r2, r3}
 80005b2:	b580      	push	{r7, lr}
 80005b4:	b082      	sub	sp, #8
 80005b6:	af00      	add	r7, sp, #0
	static char temp[100];
	va_list args;
	va_start(args, fmt);
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	603b      	str	r3, [r7, #0]
	vsnprintf(temp, sizeof(temp), fmt, args);
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	693a      	ldr	r2, [r7, #16]
 80005c2:	2164      	movs	r1, #100	@ 0x64
 80005c4:	480a      	ldr	r0, [pc, #40]	@ (80005f0 <myprintf+0x40>)
 80005c6:	f008 ff93 	bl	80094f0 <vsniprintf>
	va_end(args);
	int len = buffersize(temp);
 80005ca:	4809      	ldr	r0, [pc, #36]	@ (80005f0 <myprintf+0x40>)
 80005cc:	f7ff ffd8 	bl	8000580 <buffersize>
 80005d0:	6078      	str	r0, [r7, #4]
//	HAL_Delay(1);
#endif
#ifdef UART_DEBUG

	// Add the code here for printing data to serial monitor via software simulated UART
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) temp, len, 1000);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	b29a      	uxth	r2, r3
 80005d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005da:	4905      	ldr	r1, [pc, #20]	@ (80005f0 <myprintf+0x40>)
 80005dc:	4805      	ldr	r0, [pc, #20]	@ (80005f4 <myprintf+0x44>)
 80005de:	f003 fdfe 	bl	80041de <HAL_UART_Transmit>
//	while (DEBUG_TX_FLAG != 1) {
//	}
//	DEBUG_TX_FLAG = 0;
#endif
}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005ec:	b004      	add	sp, #16
 80005ee:	4770      	bx	lr
 80005f0:	2000016c 	.word	0x2000016c
 80005f4:	200002b8 	.word	0x200002b8

080005f8 <HAL_UART_RxCpltCallback>:
//			HAL_UART_Receive_DMA(&RGB_UART, Whole_Img_RGB, RGB_SIZE_LEN);
//		}
//	}
//
//}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	CAM_CMD2[0] = 'S';
 8000600:	4b88      	ldr	r3, [pc, #544]	@ (8000824 <HAL_UART_RxCpltCallback+0x22c>)
 8000602:	2253      	movs	r2, #83	@ 0x53
 8000604:	701a      	strb	r2, [r3, #0]
	CAM_CMD2[1] = 'E';
 8000606:	4b87      	ldr	r3, [pc, #540]	@ (8000824 <HAL_UART_RxCpltCallback+0x22c>)
 8000608:	2245      	movs	r2, #69	@ 0x45
 800060a:	705a      	strb	r2, [r3, #1]
	CAM_CMD2[2] = 'N';
 800060c:	4b85      	ldr	r3, [pc, #532]	@ (8000824 <HAL_UART_RxCpltCallback+0x22c>)
 800060e:	224e      	movs	r2, #78	@ 0x4e
 8000610:	709a      	strb	r2, [r3, #2]
	CAM_CMD2[3] = 'D';
 8000612:	4b84      	ldr	r3, [pc, #528]	@ (8000824 <HAL_UART_RxCpltCallback+0x22c>)
 8000614:	2244      	movs	r2, #68	@ 0x44
 8000616:	70da      	strb	r2, [r3, #3]
	if (huart == &RGB_UART) {
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a83      	ldr	r2, [pc, #524]	@ (8000828 <HAL_UART_RxCpltCallback+0x230>)
 800061c:	4293      	cmp	r3, r2
 800061e:	f040 80fd 	bne.w	800081c <HAL_UART_RxCpltCallback+0x224>
		if (size_rgb_img == 0) {
 8000622:	4b82      	ldr	r3, [pc, #520]	@ (800082c <HAL_UART_RxCpltCallback+0x234>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d13e      	bne.n	80006a8 <HAL_UART_RxCpltCallback+0xb0>
			RGB_size = ((Whole_Img_RGB[0] - 48) * 1000)
 800062a:	4b81      	ldr	r3, [pc, #516]	@ (8000830 <HAL_UART_RxCpltCallback+0x238>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	3b30      	subs	r3, #48	@ 0x30
					+ ((Whole_Img_RGB[1] - 48) * 100)
 8000630:	b29b      	uxth	r3, r3
 8000632:	461a      	mov	r2, r3
 8000634:	0152      	lsls	r2, r2, #5
 8000636:	1ad2      	subs	r2, r2, r3
 8000638:	0092      	lsls	r2, r2, #2
 800063a:	4413      	add	r3, r2
 800063c:	00db      	lsls	r3, r3, #3
 800063e:	b29a      	uxth	r2, r3
 8000640:	4b7b      	ldr	r3, [pc, #492]	@ (8000830 <HAL_UART_RxCpltCallback+0x238>)
 8000642:	785b      	ldrb	r3, [r3, #1]
 8000644:	3b30      	subs	r3, #48	@ 0x30
 8000646:	b29b      	uxth	r3, r3
 8000648:	4619      	mov	r1, r3
 800064a:	0089      	lsls	r1, r1, #2
 800064c:	440b      	add	r3, r1
 800064e:	4619      	mov	r1, r3
 8000650:	0088      	lsls	r0, r1, #2
 8000652:	4619      	mov	r1, r3
 8000654:	4603      	mov	r3, r0
 8000656:	440b      	add	r3, r1
 8000658:	009b      	lsls	r3, r3, #2
 800065a:	b29b      	uxth	r3, r3
 800065c:	4413      	add	r3, r2
 800065e:	b29a      	uxth	r2, r3
					+ ((Whole_Img_RGB[2] - 48) * 10)
 8000660:	4b73      	ldr	r3, [pc, #460]	@ (8000830 <HAL_UART_RxCpltCallback+0x238>)
 8000662:	789b      	ldrb	r3, [r3, #2]
 8000664:	3b30      	subs	r3, #48	@ 0x30
 8000666:	b29b      	uxth	r3, r3
 8000668:	4619      	mov	r1, r3
 800066a:	0089      	lsls	r1, r1, #2
 800066c:	440b      	add	r3, r1
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	b29b      	uxth	r3, r3
 8000672:	4413      	add	r3, r2
 8000674:	b29b      	uxth	r3, r3
					+ ((Whole_Img_RGB[3] - 48));
 8000676:	4a6e      	ldr	r2, [pc, #440]	@ (8000830 <HAL_UART_RxCpltCallback+0x238>)
 8000678:	78d2      	ldrb	r2, [r2, #3]
 800067a:	4413      	add	r3, r2
 800067c:	b29b      	uxth	r3, r3
 800067e:	3b30      	subs	r3, #48	@ 0x30
 8000680:	b29a      	uxth	r2, r3
			RGB_size = ((Whole_Img_RGB[0] - 48) * 1000)
 8000682:	4b6c      	ldr	r3, [pc, #432]	@ (8000834 <HAL_UART_RxCpltCallback+0x23c>)
 8000684:	801a      	strh	r2, [r3, #0]
			myprintf("Image size received: %d bytes\n", RGB_size);
 8000686:	4b6b      	ldr	r3, [pc, #428]	@ (8000834 <HAL_UART_RxCpltCallback+0x23c>)
 8000688:	881b      	ldrh	r3, [r3, #0]
 800068a:	4619      	mov	r1, r3
 800068c:	486a      	ldr	r0, [pc, #424]	@ (8000838 <HAL_UART_RxCpltCallback+0x240>)
 800068e:	f7ff ff8f 	bl	80005b0 <myprintf>
			size_rgb_img = 1;
 8000692:	4b66      	ldr	r3, [pc, #408]	@ (800082c <HAL_UART_RxCpltCallback+0x234>)
 8000694:	2201      	movs	r2, #1
 8000696:	701a      	strb	r2, [r3, #0]

			HAL_UART_Receive_DMA(&RGB_UART, Whole_Img_RGB, RGB_size);
 8000698:	4b66      	ldr	r3, [pc, #408]	@ (8000834 <HAL_UART_RxCpltCallback+0x23c>)
 800069a:	881b      	ldrh	r3, [r3, #0]
 800069c:	461a      	mov	r2, r3
 800069e:	4964      	ldr	r1, [pc, #400]	@ (8000830 <HAL_UART_RxCpltCallback+0x238>)
 80006a0:	4861      	ldr	r0, [pc, #388]	@ (8000828 <HAL_UART_RxCpltCallback+0x230>)
 80006a2:	f003 fe27 	bl	80042f4 <HAL_UART_Receive_DMA>
//
//							HAL_UART_Receive_DMA(&NIR_UART, Whole_Img_NIR, NIR_SIZE_LEN);
			}
		}
	}
}
 80006a6:	e0b9      	b.n	800081c <HAL_UART_RxCpltCallback+0x224>
		} else if (size_rgb_img == 1) {
 80006a8:	4b60      	ldr	r3, [pc, #384]	@ (800082c <HAL_UART_RxCpltCallback+0x234>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d135      	bne.n	800071c <HAL_UART_RxCpltCallback+0x124>
			if (Whole_Img_RGB[RGB_size - 2] == 0xFF
 80006b0:	4b60      	ldr	r3, [pc, #384]	@ (8000834 <HAL_UART_RxCpltCallback+0x23c>)
 80006b2:	881b      	ldrh	r3, [r3, #0]
 80006b4:	3b02      	subs	r3, #2
 80006b6:	4a5e      	ldr	r2, [pc, #376]	@ (8000830 <HAL_UART_RxCpltCallback+0x238>)
 80006b8:	5cd3      	ldrb	r3, [r2, r3]
 80006ba:	2bff      	cmp	r3, #255	@ 0xff
 80006bc:	d10a      	bne.n	80006d4 <HAL_UART_RxCpltCallback+0xdc>
					&& Whole_Img_RGB[RGB_size - 1] == 0xD9) {
 80006be:	4b5d      	ldr	r3, [pc, #372]	@ (8000834 <HAL_UART_RxCpltCallback+0x23c>)
 80006c0:	881b      	ldrh	r3, [r3, #0]
 80006c2:	3b01      	subs	r3, #1
 80006c4:	4a5a      	ldr	r2, [pc, #360]	@ (8000830 <HAL_UART_RxCpltCallback+0x238>)
 80006c6:	5cd3      	ldrb	r3, [r2, r3]
 80006c8:	2bd9      	cmp	r3, #217	@ 0xd9
 80006ca:	d103      	bne.n	80006d4 <HAL_UART_RxCpltCallback+0xdc>
				myprintf(
 80006cc:	485b      	ldr	r0, [pc, #364]	@ (800083c <HAL_UART_RxCpltCallback+0x244>)
 80006ce:	f7ff ff6f 	bl	80005b0 <myprintf>
 80006d2:	e002      	b.n	80006da <HAL_UART_RxCpltCallback+0xe2>
				myprintf(
 80006d4:	485a      	ldr	r0, [pc, #360]	@ (8000840 <HAL_UART_RxCpltCallback+0x248>)
 80006d6:	f7ff ff6b 	bl	80005b0 <myprintf>
			myprintf("Image Data in Hexadecimal:\n");
 80006da:	485a      	ldr	r0, [pc, #360]	@ (8000844 <HAL_UART_RxCpltCallback+0x24c>)
 80006dc:	f7ff ff68 	bl	80005b0 <myprintf>
			for (uint32_t i = 0; i < RGB_size; i++) {
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	e00a      	b.n	80006fc <HAL_UART_RxCpltCallback+0x104>
				myprintf("0x%02X ", Whole_Img_RGB[i]);
 80006e6:	4a52      	ldr	r2, [pc, #328]	@ (8000830 <HAL_UART_RxCpltCallback+0x238>)
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	4413      	add	r3, r2
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	4619      	mov	r1, r3
 80006f0:	4855      	ldr	r0, [pc, #340]	@ (8000848 <HAL_UART_RxCpltCallback+0x250>)
 80006f2:	f7ff ff5d 	bl	80005b0 <myprintf>
			for (uint32_t i = 0; i < RGB_size; i++) {
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	3301      	adds	r3, #1
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	4b4d      	ldr	r3, [pc, #308]	@ (8000834 <HAL_UART_RxCpltCallback+0x23c>)
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	461a      	mov	r2, r3
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	4293      	cmp	r3, r2
 8000706:	d3ee      	bcc.n	80006e6 <HAL_UART_RxCpltCallback+0xee>
			myprintf("\n");
 8000708:	4850      	ldr	r0, [pc, #320]	@ (800084c <HAL_UART_RxCpltCallback+0x254>)
 800070a:	f7ff ff51 	bl	80005b0 <myprintf>
			size_rgb_img = 0;
 800070e:	4b47      	ldr	r3, [pc, #284]	@ (800082c <HAL_UART_RxCpltCallback+0x234>)
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
			myprintf("Ready to receive next image size.\n");
 8000714:	484e      	ldr	r0, [pc, #312]	@ (8000850 <HAL_UART_RxCpltCallback+0x258>)
 8000716:	f7ff ff4b 	bl	80005b0 <myprintf>
}
 800071a:	e07f      	b.n	800081c <HAL_UART_RxCpltCallback+0x224>
		} else if (huart == &NIR_UART) {
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4a4d      	ldr	r2, [pc, #308]	@ (8000854 <HAL_UART_RxCpltCallback+0x25c>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d17b      	bne.n	800081c <HAL_UART_RxCpltCallback+0x224>
			if (size_nir_img == 0) {
 8000724:	4b4c      	ldr	r3, [pc, #304]	@ (8000858 <HAL_UART_RxCpltCallback+0x260>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d13e      	bne.n	80007aa <HAL_UART_RxCpltCallback+0x1b2>
				NIR_size = ((Whole_Img_NIR[0] - 48) * 1000)
 800072c:	4b4b      	ldr	r3, [pc, #300]	@ (800085c <HAL_UART_RxCpltCallback+0x264>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	3b30      	subs	r3, #48	@ 0x30
						+ ((Whole_Img_NIR[1] - 48) * 100)
 8000732:	b29b      	uxth	r3, r3
 8000734:	461a      	mov	r2, r3
 8000736:	0152      	lsls	r2, r2, #5
 8000738:	1ad2      	subs	r2, r2, r3
 800073a:	0092      	lsls	r2, r2, #2
 800073c:	4413      	add	r3, r2
 800073e:	00db      	lsls	r3, r3, #3
 8000740:	b29a      	uxth	r2, r3
 8000742:	4b46      	ldr	r3, [pc, #280]	@ (800085c <HAL_UART_RxCpltCallback+0x264>)
 8000744:	785b      	ldrb	r3, [r3, #1]
 8000746:	3b30      	subs	r3, #48	@ 0x30
 8000748:	b29b      	uxth	r3, r3
 800074a:	4619      	mov	r1, r3
 800074c:	0089      	lsls	r1, r1, #2
 800074e:	440b      	add	r3, r1
 8000750:	4619      	mov	r1, r3
 8000752:	0088      	lsls	r0, r1, #2
 8000754:	4619      	mov	r1, r3
 8000756:	4603      	mov	r3, r0
 8000758:	440b      	add	r3, r1
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	b29b      	uxth	r3, r3
 800075e:	4413      	add	r3, r2
 8000760:	b29a      	uxth	r2, r3
						+ ((Whole_Img_NIR[2] - 48) * 10)
 8000762:	4b3e      	ldr	r3, [pc, #248]	@ (800085c <HAL_UART_RxCpltCallback+0x264>)
 8000764:	789b      	ldrb	r3, [r3, #2]
 8000766:	3b30      	subs	r3, #48	@ 0x30
 8000768:	b29b      	uxth	r3, r3
 800076a:	4619      	mov	r1, r3
 800076c:	0089      	lsls	r1, r1, #2
 800076e:	440b      	add	r3, r1
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	b29b      	uxth	r3, r3
 8000774:	4413      	add	r3, r2
 8000776:	b29b      	uxth	r3, r3
						+ ((Whole_Img_NIR[3] - 48));
 8000778:	4a38      	ldr	r2, [pc, #224]	@ (800085c <HAL_UART_RxCpltCallback+0x264>)
 800077a:	78d2      	ldrb	r2, [r2, #3]
 800077c:	4413      	add	r3, r2
 800077e:	b29b      	uxth	r3, r3
 8000780:	3b30      	subs	r3, #48	@ 0x30
 8000782:	b29a      	uxth	r2, r3
				NIR_size = ((Whole_Img_NIR[0] - 48) * 1000)
 8000784:	4b36      	ldr	r3, [pc, #216]	@ (8000860 <HAL_UART_RxCpltCallback+0x268>)
 8000786:	801a      	strh	r2, [r3, #0]
				myprintf("Image size received: %d bytes\n", NIR_size);
 8000788:	4b35      	ldr	r3, [pc, #212]	@ (8000860 <HAL_UART_RxCpltCallback+0x268>)
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	4619      	mov	r1, r3
 800078e:	482a      	ldr	r0, [pc, #168]	@ (8000838 <HAL_UART_RxCpltCallback+0x240>)
 8000790:	f7ff ff0e 	bl	80005b0 <myprintf>
				size_nir_img = 1;
 8000794:	4b30      	ldr	r3, [pc, #192]	@ (8000858 <HAL_UART_RxCpltCallback+0x260>)
 8000796:	2201      	movs	r2, #1
 8000798:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_DMA(&NIR_UART, Whole_Img_NIR, NIR_size);
 800079a:	4b31      	ldr	r3, [pc, #196]	@ (8000860 <HAL_UART_RxCpltCallback+0x268>)
 800079c:	881b      	ldrh	r3, [r3, #0]
 800079e:	461a      	mov	r2, r3
 80007a0:	492e      	ldr	r1, [pc, #184]	@ (800085c <HAL_UART_RxCpltCallback+0x264>)
 80007a2:	482c      	ldr	r0, [pc, #176]	@ (8000854 <HAL_UART_RxCpltCallback+0x25c>)
 80007a4:	f003 fda6 	bl	80042f4 <HAL_UART_Receive_DMA>
}
 80007a8:	e038      	b.n	800081c <HAL_UART_RxCpltCallback+0x224>
			} else if (size_nir_img == 1) {
 80007aa:	4b2b      	ldr	r3, [pc, #172]	@ (8000858 <HAL_UART_RxCpltCallback+0x260>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d134      	bne.n	800081c <HAL_UART_RxCpltCallback+0x224>
				if (Whole_Img_NIR[NIR_size - 2] == 0xFF
 80007b2:	4b2b      	ldr	r3, [pc, #172]	@ (8000860 <HAL_UART_RxCpltCallback+0x268>)
 80007b4:	881b      	ldrh	r3, [r3, #0]
 80007b6:	3b02      	subs	r3, #2
 80007b8:	4a28      	ldr	r2, [pc, #160]	@ (800085c <HAL_UART_RxCpltCallback+0x264>)
 80007ba:	5cd3      	ldrb	r3, [r2, r3]
 80007bc:	2bff      	cmp	r3, #255	@ 0xff
 80007be:	d10a      	bne.n	80007d6 <HAL_UART_RxCpltCallback+0x1de>
						&& Whole_Img_NIR[NIR_size - 1] == 0xD9) {
 80007c0:	4b27      	ldr	r3, [pc, #156]	@ (8000860 <HAL_UART_RxCpltCallback+0x268>)
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	3b01      	subs	r3, #1
 80007c6:	4a25      	ldr	r2, [pc, #148]	@ (800085c <HAL_UART_RxCpltCallback+0x264>)
 80007c8:	5cd3      	ldrb	r3, [r2, r3]
 80007ca:	2bd9      	cmp	r3, #217	@ 0xd9
 80007cc:	d103      	bne.n	80007d6 <HAL_UART_RxCpltCallback+0x1de>
					myprintf(
 80007ce:	481b      	ldr	r0, [pc, #108]	@ (800083c <HAL_UART_RxCpltCallback+0x244>)
 80007d0:	f7ff feee 	bl	80005b0 <myprintf>
 80007d4:	e002      	b.n	80007dc <HAL_UART_RxCpltCallback+0x1e4>
					myprintf(
 80007d6:	481a      	ldr	r0, [pc, #104]	@ (8000840 <HAL_UART_RxCpltCallback+0x248>)
 80007d8:	f7ff feea 	bl	80005b0 <myprintf>
				myprintf("Image Data in Hexadecimal:\n");
 80007dc:	4819      	ldr	r0, [pc, #100]	@ (8000844 <HAL_UART_RxCpltCallback+0x24c>)
 80007de:	f7ff fee7 	bl	80005b0 <myprintf>
				for (uint32_t i = 0; i < NIR_size; i++) {
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	e00a      	b.n	80007fe <HAL_UART_RxCpltCallback+0x206>
					myprintf("0x%02X ", Whole_Img_NIR[i]);
 80007e8:	4a1c      	ldr	r2, [pc, #112]	@ (800085c <HAL_UART_RxCpltCallback+0x264>)
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	4413      	add	r3, r2
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	4619      	mov	r1, r3
 80007f2:	4815      	ldr	r0, [pc, #84]	@ (8000848 <HAL_UART_RxCpltCallback+0x250>)
 80007f4:	f7ff fedc 	bl	80005b0 <myprintf>
				for (uint32_t i = 0; i < NIR_size; i++) {
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	3301      	adds	r3, #1
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	4b18      	ldr	r3, [pc, #96]	@ (8000860 <HAL_UART_RxCpltCallback+0x268>)
 8000800:	881b      	ldrh	r3, [r3, #0]
 8000802:	461a      	mov	r2, r3
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	4293      	cmp	r3, r2
 8000808:	d3ee      	bcc.n	80007e8 <HAL_UART_RxCpltCallback+0x1f0>
				myprintf("\n");
 800080a:	4810      	ldr	r0, [pc, #64]	@ (800084c <HAL_UART_RxCpltCallback+0x254>)
 800080c:	f7ff fed0 	bl	80005b0 <myprintf>
				size_nir_img = 0;
 8000810:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <HAL_UART_RxCpltCallback+0x260>)
 8000812:	2200      	movs	r2, #0
 8000814:	701a      	strb	r2, [r3, #0]
				myprintf("Ready to receive next image size.\n");
 8000816:	480e      	ldr	r0, [pc, #56]	@ (8000850 <HAL_UART_RxCpltCallback+0x258>)
 8000818:	f7ff feca 	bl	80005b0 <myprintf>
}
 800081c:	bf00      	nop
 800081e:	3710      	adds	r7, #16
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000418 	.word	0x20000418
 8000828:	20000270 	.word	0x20000270
 800082c:	200061e0 	.word	0x200061e0
 8000830:	20000420 	.word	0x20000420
 8000834:	200061e2 	.word	0x200061e2
 8000838:	08009e24 	.word	0x08009e24
 800083c:	08009e44 	.word	0x08009e44
 8000840:	08009e84 	.word	0x08009e84
 8000844:	08009ecc 	.word	0x08009ecc
 8000848:	08009ee8 	.word	0x08009ee8
 800084c:	08009ef0 	.word	0x08009ef0
 8000850:	08009ef4 	.word	0x08009ef4
 8000854:	20000300 	.word	0x20000300
 8000858:	200061e1 	.word	0x200061e1
 800085c:	20003300 	.word	0x20003300
 8000860:	200061e4 	.word	0x200061e4

08000864 <BASIC_IMAGE_CAPTURE>:
//
//	 return size_img_RGB;
//
//}

	uint32_t BASIC_IMAGE_CAPTURE() {
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
//	uint32_t rgb_img_len = 1;
//	uint32_t nir_img_len = 1;
//	uint32_t RGB_IMG_ADDRESS = ADDRESS;
//	uint32_t NIR_IMG_ADDRESS = ADDRESS + (3 * 4096);
		if (a) {
 8000868:	4b2f      	ldr	r3, [pc, #188]	@ (8000928 <BASIC_IMAGE_CAPTURE+0xc4>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d058      	beq.n	8000922 <BASIC_IMAGE_CAPTURE+0xbe>
			a = 0;
 8000870:	4b2d      	ldr	r3, [pc, #180]	@ (8000928 <BASIC_IMAGE_CAPTURE+0xc4>)
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
			CAM_CMD[0] = 'C';
 8000876:	4b2d      	ldr	r3, [pc, #180]	@ (800092c <BASIC_IMAGE_CAPTURE+0xc8>)
 8000878:	2243      	movs	r2, #67	@ 0x43
 800087a:	701a      	strb	r2, [r3, #0]
			CAM_CMD[1] = 'A';
 800087c:	4b2b      	ldr	r3, [pc, #172]	@ (800092c <BASIC_IMAGE_CAPTURE+0xc8>)
 800087e:	2241      	movs	r2, #65	@ 0x41
 8000880:	705a      	strb	r2, [r3, #1]
			CAM_CMD[2] = 'M';
 8000882:	4b2a      	ldr	r3, [pc, #168]	@ (800092c <BASIC_IMAGE_CAPTURE+0xc8>)
 8000884:	224d      	movs	r2, #77	@ 0x4d
 8000886:	709a      	strb	r2, [r3, #2]
			CAM_CMD[3] = 'O';
 8000888:	4b28      	ldr	r3, [pc, #160]	@ (800092c <BASIC_IMAGE_CAPTURE+0xc8>)
 800088a:	224f      	movs	r2, #79	@ 0x4f
 800088c:	70da      	strb	r2, [r3, #3]
			CAM_CMD[4] = 'N';
 800088e:	4b27      	ldr	r3, [pc, #156]	@ (800092c <BASIC_IMAGE_CAPTURE+0xc8>)
 8000890:	224e      	movs	r2, #78	@ 0x4e
 8000892:	711a      	strb	r2, [r3, #4]
			OCP_EN();
 8000894:	f000 f85e 	bl	8000954 <OCP_EN>

			if (HAL_UART_Transmit(&RGB_UART, CAM_CMD, sizeof(CAM_CMD), 1000)
 8000898:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800089c:	2205      	movs	r2, #5
 800089e:	4923      	ldr	r1, [pc, #140]	@ (800092c <BASIC_IMAGE_CAPTURE+0xc8>)
 80008a0:	4823      	ldr	r0, [pc, #140]	@ (8000930 <BASIC_IMAGE_CAPTURE+0xcc>)
 80008a2:	f003 fc9c 	bl	80041de <HAL_UART_Transmit>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d11d      	bne.n	80008e8 <BASIC_IMAGE_CAPTURE+0x84>
					== HAL_OK) {
				myprintf("Command transmitted to RGB CAM\r\n");
 80008ac:	4821      	ldr	r0, [pc, #132]	@ (8000934 <BASIC_IMAGE_CAPTURE+0xd0>)
 80008ae:	f7ff fe7f 	bl	80005b0 <myprintf>
				if (HAL_UART_Transmit(&NIR_UART, CAM_CMD, sizeof(CAM_CMD), 1000)
 80008b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008b6:	2205      	movs	r2, #5
 80008b8:	491c      	ldr	r1, [pc, #112]	@ (800092c <BASIC_IMAGE_CAPTURE+0xc8>)
 80008ba:	481f      	ldr	r0, [pc, #124]	@ (8000938 <BASIC_IMAGE_CAPTURE+0xd4>)
 80008bc:	f003 fc8f 	bl	80041de <HAL_UART_Transmit>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d10d      	bne.n	80008e2 <BASIC_IMAGE_CAPTURE+0x7e>
						== HAL_OK) {
					myprintf("Command transmitted to NIR CAM\r\n");
 80008c6:	481d      	ldr	r0, [pc, #116]	@ (800093c <BASIC_IMAGE_CAPTURE+0xd8>)
 80008c8:	f7ff fe72 	bl	80005b0 <myprintf>
//			__HAL_UART_FLUSH_DRREGISTER(&NIR_UART);
					HAL_UART_Receive_DMA(&RGB_UART, Whole_Img_NIR,
 80008cc:	2204      	movs	r2, #4
 80008ce:	491c      	ldr	r1, [pc, #112]	@ (8000940 <BASIC_IMAGE_CAPTURE+0xdc>)
 80008d0:	4817      	ldr	r0, [pc, #92]	@ (8000930 <BASIC_IMAGE_CAPTURE+0xcc>)
 80008d2:	f003 fd0f 	bl	80042f4 <HAL_UART_Receive_DMA>
					NIR_SIZE_LEN);
//			__HAL_UART_FLUSH_DRREGISTER(&RGB_UART);
					HAL_UART_Receive_DMA(&RGB_UART, Whole_Img_RGB,
 80008d6:	2204      	movs	r2, #4
 80008d8:	491a      	ldr	r1, [pc, #104]	@ (8000944 <BASIC_IMAGE_CAPTURE+0xe0>)
 80008da:	4815      	ldr	r0, [pc, #84]	@ (8000930 <BASIC_IMAGE_CAPTURE+0xcc>)
 80008dc:	f003 fd0a 	bl	80042f4 <HAL_UART_Receive_DMA>
 80008e0:	e002      	b.n	80008e8 <BASIC_IMAGE_CAPTURE+0x84>
					RGB_SIZE_LEN);
				} else {
					myprintf("Failed to transmit command\r\n");
 80008e2:	4819      	ldr	r0, [pc, #100]	@ (8000948 <BASIC_IMAGE_CAPTURE+0xe4>)
 80008e4:	f7ff fe64 	bl	80005b0 <myprintf>
					//return 0;
				}
			}
			HAL_UART_Receive_DMA(&RGB_UART, Whole_Img_RGB, RGB_SIZE_LEN);
 80008e8:	2204      	movs	r2, #4
 80008ea:	4916      	ldr	r1, [pc, #88]	@ (8000944 <BASIC_IMAGE_CAPTURE+0xe0>)
 80008ec:	4810      	ldr	r0, [pc, #64]	@ (8000930 <BASIC_IMAGE_CAPTURE+0xcc>)
 80008ee:	f003 fd01 	bl	80042f4 <HAL_UART_Receive_DMA>
			HAL_UART_Receive_DMA(&RGB_UART, Whole_Img_NIR, NIR_SIZE_LEN);
 80008f2:	2204      	movs	r2, #4
 80008f4:	4912      	ldr	r1, [pc, #72]	@ (8000940 <BASIC_IMAGE_CAPTURE+0xdc>)
 80008f6:	480e      	ldr	r0, [pc, #56]	@ (8000930 <BASIC_IMAGE_CAPTURE+0xcc>)
 80008f8:	f003 fcfc 	bl	80042f4 <HAL_UART_Receive_DMA>
			while (RGB_Img_RDY == 1 && NIR_Img_RDY == 1) {
 80008fc:	e008      	b.n	8000910 <BASIC_IMAGE_CAPTURE+0xac>
//				Page_Write_4B(&FM, RGB_IMG_ADDRESS, Whole_Img_RGB, rgb_img_len);
//				Page_Write_4B(&FM, NIR_IMG_ADDRESS, Whole_Img_NIR, nir_img_len);
				RGB_Img_RDY = 0;
 80008fe:	4b13      	ldr	r3, [pc, #76]	@ (800094c <BASIC_IMAGE_CAPTURE+0xe8>)
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
				NIR_Img_RDY = 0;
 8000904:	4b12      	ldr	r3, [pc, #72]	@ (8000950 <BASIC_IMAGE_CAPTURE+0xec>)
 8000906:	2200      	movs	r2, #0
 8000908:	701a      	strb	r2, [r3, #0]
				HAL_Delay(100);
 800090a:	2064      	movs	r0, #100	@ 0x64
 800090c:	f000 fda6 	bl	800145c <HAL_Delay>
			while (RGB_Img_RDY == 1 && NIR_Img_RDY == 1) {
 8000910:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <BASIC_IMAGE_CAPTURE+0xe8>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b01      	cmp	r3, #1
 8000916:	d103      	bne.n	8000920 <BASIC_IMAGE_CAPTURE+0xbc>
 8000918:	4b0d      	ldr	r3, [pc, #52]	@ (8000950 <BASIC_IMAGE_CAPTURE+0xec>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d0ee      	beq.n	80008fe <BASIC_IMAGE_CAPTURE+0x9a>
			}
			return;
 8000920:	bf00      	nop
		}
	}
 8000922:	4618      	mov	r0, r3
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000000 	.word	0x20000000
 800092c:	20000410 	.word	0x20000410
 8000930:	20000270 	.word	0x20000270
 8000934:	08009fac 	.word	0x08009fac
 8000938:	20000300 	.word	0x20000300
 800093c:	08009fd0 	.word	0x08009fd0
 8000940:	20003300 	.word	0x20003300
 8000944:	20000420 	.word	0x20000420
 8000948:	08009ff4 	.word	0x08009ff4
 800094c:	2000040c 	.word	0x2000040c
 8000950:	2000040d 	.word	0x2000040d

08000954 <OCP_EN>:
		void CS_Disable_NIR() {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
			HAL_Delay(1);
		}

		void OCP_EN() {
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000958:	2201      	movs	r2, #1
 800095a:	2110      	movs	r1, #16
 800095c:	4803      	ldr	r0, [pc, #12]	@ (800096c <OCP_EN+0x18>)
 800095e:	f001 fc61 	bl	8002224 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8000962:	2064      	movs	r0, #100	@ 0x64
 8000964:	f000 fd7a 	bl	800145c <HAL_Delay>
		}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40020400 	.word	0x40020400

08000970 <HAL_UART_RxHalfCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart) {
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART8) {

	}

}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000988:	f000 fcf6 	bl	8001378 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800098c:	f000 f81a 	bl	80009c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000990:	f000 f996 	bl	8000cc0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000994:	f000 f95e 	bl	8000c54 <MX_DMA_Init>
  MX_UART8_Init();
 8000998:	f000 f8de 	bl	8000b58 <MX_UART8_Init>
  MX_UART4_Init();
 800099c:	f000 f8b2 	bl	8000b04 <MX_UART4_Init>
  MX_USART6_UART_Init();
 80009a0:	f000 f92e 	bl	8000c00 <MX_USART6_UART_Init>
  MX_SPI2_Init();
 80009a4:	f000 f878 	bl	8000a98 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80009a8:	f000 f900 	bl	8000bac <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80009ac:	f008 f880 	bl	8008ab0 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		OCP_EN();
 80009b0:	f7ff ffd0 	bl	8000954 <OCP_EN>
//		HAL_UART_Transmit(&huart2, tx_buffer ,sizeof(tx_buffer), 1000);
		//HAL_UART_Receive(&huart4, rx_buffer, sizeof(rx_buffer), 1000);


		BASIC_IMAGE_CAPTURE();
 80009b4:	f7ff ff56 	bl	8000864 <BASIC_IMAGE_CAPTURE>
        HAL_Delay(1000);
 80009b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009bc:	f000 fd4e 	bl	800145c <HAL_Delay>
		OCP_EN();
 80009c0:	bf00      	nop
 80009c2:	e7f5      	b.n	80009b0 <main+0x2c>

080009c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b094      	sub	sp, #80	@ 0x50
 80009c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ca:	f107 0320 	add.w	r3, r7, #32
 80009ce:	2230      	movs	r2, #48	@ 0x30
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f008 fd9a 	bl	800950c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d8:	f107 030c 	add.w	r3, r7, #12
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e8:	2300      	movs	r3, #0
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	4b28      	ldr	r3, [pc, #160]	@ (8000a90 <SystemClock_Config+0xcc>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f0:	4a27      	ldr	r2, [pc, #156]	@ (8000a90 <SystemClock_Config+0xcc>)
 80009f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f8:	4b25      	ldr	r3, [pc, #148]	@ (8000a90 <SystemClock_Config+0xcc>)
 80009fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a04:	2300      	movs	r3, #0
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	4b22      	ldr	r3, [pc, #136]	@ (8000a94 <SystemClock_Config+0xd0>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a10:	4a20      	ldr	r2, [pc, #128]	@ (8000a94 <SystemClock_Config+0xd0>)
 8000a12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a16:	6013      	str	r3, [r2, #0]
 8000a18:	4b1e      	ldr	r3, [pc, #120]	@ (8000a94 <SystemClock_Config+0xd0>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a24:	2301      	movs	r3, #1
 8000a26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a28:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a2c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a32:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a38:	2304      	movs	r3, #4
 8000a3a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000a3c:	2348      	movs	r3, #72	@ 0x48
 8000a3e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a40:	2302      	movs	r3, #2
 8000a42:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000a44:	2303      	movs	r3, #3
 8000a46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a48:	f107 0320 	add.w	r3, r7, #32
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f002 fe55 	bl	80036fc <HAL_RCC_OscConfig>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a58:	f000 f9d8 	bl	8000e0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5c:	230f      	movs	r3, #15
 8000a5e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a60:	2302      	movs	r3, #2
 8000a62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a72:	f107 030c 	add.w	r3, r7, #12
 8000a76:	2102      	movs	r1, #2
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f003 f8b7 	bl	8003bec <HAL_RCC_ClockConfig>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a84:	f000 f9c2 	bl	8000e0c <Error_Handler>
  }
}
 8000a88:	bf00      	nop
 8000a8a:	3750      	adds	r7, #80	@ 0x50
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40007000 	.word	0x40007000

08000a98 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a9c:	4b17      	ldr	r3, [pc, #92]	@ (8000afc <MX_SPI2_Init+0x64>)
 8000a9e:	4a18      	ldr	r2, [pc, #96]	@ (8000b00 <MX_SPI2_Init+0x68>)
 8000aa0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000aa2:	4b16      	ldr	r3, [pc, #88]	@ (8000afc <MX_SPI2_Init+0x64>)
 8000aa4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000aa8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000aaa:	4b14      	ldr	r3, [pc, #80]	@ (8000afc <MX_SPI2_Init+0x64>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ab0:	4b12      	ldr	r3, [pc, #72]	@ (8000afc <MX_SPI2_Init+0x64>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ab6:	4b11      	ldr	r3, [pc, #68]	@ (8000afc <MX_SPI2_Init+0x64>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	@ (8000afc <MX_SPI2_Init+0x64>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8000afc <MX_SPI2_Init+0x64>)
 8000ac4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ac8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000aca:	4b0c      	ldr	r3, [pc, #48]	@ (8000afc <MX_SPI2_Init+0x64>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8000afc <MX_SPI2_Init+0x64>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ad6:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <MX_SPI2_Init+0x64>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000adc:	4b07      	ldr	r3, [pc, #28]	@ (8000afc <MX_SPI2_Init+0x64>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000ae2:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <MX_SPI2_Init+0x64>)
 8000ae4:	220a      	movs	r2, #10
 8000ae6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ae8:	4804      	ldr	r0, [pc, #16]	@ (8000afc <MX_SPI2_Init+0x64>)
 8000aea:	f003 fa9f 	bl	800402c <HAL_SPI_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000af4:	f000 f98a 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	200001d0 	.word	0x200001d0
 8000b00:	40003800 	.word	0x40003800

08000b04 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000b08:	4b11      	ldr	r3, [pc, #68]	@ (8000b50 <MX_UART4_Init+0x4c>)
 8000b0a:	4a12      	ldr	r2, [pc, #72]	@ (8000b54 <MX_UART4_Init+0x50>)
 8000b0c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000b0e:	4b10      	ldr	r3, [pc, #64]	@ (8000b50 <MX_UART4_Init+0x4c>)
 8000b10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b14:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	@ (8000b50 <MX_UART4_Init+0x4c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b50 <MX_UART4_Init+0x4c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b22:	4b0b      	ldr	r3, [pc, #44]	@ (8000b50 <MX_UART4_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000b28:	4b09      	ldr	r3, [pc, #36]	@ (8000b50 <MX_UART4_Init+0x4c>)
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2e:	4b08      	ldr	r3, [pc, #32]	@ (8000b50 <MX_UART4_Init+0x4c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b34:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <MX_UART4_Init+0x4c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b3a:	4805      	ldr	r0, [pc, #20]	@ (8000b50 <MX_UART4_Init+0x4c>)
 8000b3c:	f003 faff 	bl	800413e <HAL_UART_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000b46:	f000 f961 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000228 	.word	0x20000228
 8000b54:	40004c00 	.word	0x40004c00

08000b58 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000b5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ba4 <MX_UART8_Init+0x4c>)
 8000b5e:	4a12      	ldr	r2, [pc, #72]	@ (8000ba8 <MX_UART8_Init+0x50>)
 8000b60:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000b62:	4b10      	ldr	r3, [pc, #64]	@ (8000ba4 <MX_UART8_Init+0x4c>)
 8000b64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b68:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba4 <MX_UART8_Init+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000b70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba4 <MX_UART8_Init+0x4c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000b76:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba4 <MX_UART8_Init+0x4c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000b7c:	4b09      	ldr	r3, [pc, #36]	@ (8000ba4 <MX_UART8_Init+0x4c>)
 8000b7e:	220c      	movs	r2, #12
 8000b80:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b82:	4b08      	ldr	r3, [pc, #32]	@ (8000ba4 <MX_UART8_Init+0x4c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b88:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <MX_UART8_Init+0x4c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000b8e:	4805      	ldr	r0, [pc, #20]	@ (8000ba4 <MX_UART8_Init+0x4c>)
 8000b90:	f003 fad5 	bl	800413e <HAL_UART_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8000b9a:	f000 f937 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000270 	.word	0x20000270
 8000ba8:	40007c00 	.word	0x40007c00

08000bac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bb0:	4b11      	ldr	r3, [pc, #68]	@ (8000bf8 <MX_USART2_UART_Init+0x4c>)
 8000bb2:	4a12      	ldr	r2, [pc, #72]	@ (8000bfc <MX_USART2_UART_Init+0x50>)
 8000bb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bb6:	4b10      	ldr	r3, [pc, #64]	@ (8000bf8 <MX_USART2_UART_Init+0x4c>)
 8000bb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <MX_USART2_UART_Init+0x4c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf8 <MX_USART2_UART_Init+0x4c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bca:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf8 <MX_USART2_UART_Init+0x4c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bd0:	4b09      	ldr	r3, [pc, #36]	@ (8000bf8 <MX_USART2_UART_Init+0x4c>)
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd6:	4b08      	ldr	r3, [pc, #32]	@ (8000bf8 <MX_USART2_UART_Init+0x4c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <MX_USART2_UART_Init+0x4c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000be2:	4805      	ldr	r0, [pc, #20]	@ (8000bf8 <MX_USART2_UART_Init+0x4c>)
 8000be4:	f003 faab 	bl	800413e <HAL_UART_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bee:	f000 f90d 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200002b8 	.word	0x200002b8
 8000bfc:	40004400 	.word	0x40004400

08000c00 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000c04:	4b11      	ldr	r3, [pc, #68]	@ (8000c4c <MX_USART6_UART_Init+0x4c>)
 8000c06:	4a12      	ldr	r2, [pc, #72]	@ (8000c50 <MX_USART6_UART_Init+0x50>)
 8000c08:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000c0a:	4b10      	ldr	r3, [pc, #64]	@ (8000c4c <MX_USART6_UART_Init+0x4c>)
 8000c0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c10:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	@ (8000c4c <MX_USART6_UART_Init+0x4c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	@ (8000c4c <MX_USART6_UART_Init+0x4c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c4c <MX_USART6_UART_Init+0x4c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000c24:	4b09      	ldr	r3, [pc, #36]	@ (8000c4c <MX_USART6_UART_Init+0x4c>)
 8000c26:	220c      	movs	r2, #12
 8000c28:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	@ (8000c4c <MX_USART6_UART_Init+0x4c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c30:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <MX_USART6_UART_Init+0x4c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000c36:	4805      	ldr	r0, [pc, #20]	@ (8000c4c <MX_USART6_UART_Init+0x4c>)
 8000c38:	f003 fa81 	bl	800413e <HAL_UART_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000c42:	f000 f8e3 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000300 	.word	0x20000300
 8000c50:	40011400 	.word	0x40011400

08000c54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	4b17      	ldr	r3, [pc, #92]	@ (8000cbc <MX_DMA_Init+0x68>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	4a16      	ldr	r2, [pc, #88]	@ (8000cbc <MX_DMA_Init+0x68>)
 8000c64:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6a:	4b14      	ldr	r3, [pc, #80]	@ (8000cbc <MX_DMA_Init+0x68>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	603b      	str	r3, [r7, #0]
 8000c7a:	4b10      	ldr	r3, [pc, #64]	@ (8000cbc <MX_DMA_Init+0x68>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	4a0f      	ldr	r2, [pc, #60]	@ (8000cbc <MX_DMA_Init+0x68>)
 8000c80:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c86:	4b0d      	ldr	r3, [pc, #52]	@ (8000cbc <MX_DMA_Init+0x68>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c8e:	603b      	str	r3, [r7, #0]
 8000c90:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2100      	movs	r1, #0
 8000c96:	2011      	movs	r0, #17
 8000c98:	f000 fcdf 	bl	800165a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000c9c:	2011      	movs	r0, #17
 8000c9e:	f000 fcf8 	bl	8001692 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	2039      	movs	r0, #57	@ 0x39
 8000ca8:	f000 fcd7 	bl	800165a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000cac:	2039      	movs	r0, #57	@ 0x39
 8000cae:	f000 fcf0 	bl	8001692 <HAL_NVIC_EnableIRQ>

}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40023800 	.word	0x40023800

08000cc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08c      	sub	sp, #48	@ 0x30
 8000cc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc6:	f107 031c 	add.w	r3, r7, #28
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
 8000cd4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61bb      	str	r3, [r7, #24]
 8000cda:	4b48      	ldr	r3, [pc, #288]	@ (8000dfc <MX_GPIO_Init+0x13c>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cde:	4a47      	ldr	r2, [pc, #284]	@ (8000dfc <MX_GPIO_Init+0x13c>)
 8000ce0:	f043 0310 	orr.w	r3, r3, #16
 8000ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce6:	4b45      	ldr	r3, [pc, #276]	@ (8000dfc <MX_GPIO_Init+0x13c>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	f003 0310 	and.w	r3, r3, #16
 8000cee:	61bb      	str	r3, [r7, #24]
 8000cf0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	4b41      	ldr	r3, [pc, #260]	@ (8000dfc <MX_GPIO_Init+0x13c>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	4a40      	ldr	r2, [pc, #256]	@ (8000dfc <MX_GPIO_Init+0x13c>)
 8000cfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d02:	4b3e      	ldr	r3, [pc, #248]	@ (8000dfc <MX_GPIO_Init+0x13c>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d0a:	617b      	str	r3, [r7, #20]
 8000d0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
 8000d12:	4b3a      	ldr	r3, [pc, #232]	@ (8000dfc <MX_GPIO_Init+0x13c>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	4a39      	ldr	r2, [pc, #228]	@ (8000dfc <MX_GPIO_Init+0x13c>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1e:	4b37      	ldr	r3, [pc, #220]	@ (8000dfc <MX_GPIO_Init+0x13c>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	4b33      	ldr	r3, [pc, #204]	@ (8000dfc <MX_GPIO_Init+0x13c>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	4a32      	ldr	r2, [pc, #200]	@ (8000dfc <MX_GPIO_Init+0x13c>)
 8000d34:	f043 0302 	orr.w	r3, r3, #2
 8000d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3a:	4b30      	ldr	r3, [pc, #192]	@ (8000dfc <MX_GPIO_Init+0x13c>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	4b2c      	ldr	r3, [pc, #176]	@ (8000dfc <MX_GPIO_Init+0x13c>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	4a2b      	ldr	r2, [pc, #172]	@ (8000dfc <MX_GPIO_Init+0x13c>)
 8000d50:	f043 0304 	orr.w	r3, r3, #4
 8000d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d56:	4b29      	ldr	r3, [pc, #164]	@ (8000dfc <MX_GPIO_Init+0x13c>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	f003 0304 	and.w	r3, r3, #4
 8000d5e:	60bb      	str	r3, [r7, #8]
 8000d60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	607b      	str	r3, [r7, #4]
 8000d66:	4b25      	ldr	r3, [pc, #148]	@ (8000dfc <MX_GPIO_Init+0x13c>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	4a24      	ldr	r2, [pc, #144]	@ (8000dfc <MX_GPIO_Init+0x13c>)
 8000d6c:	f043 0308 	orr.w	r3, r3, #8
 8000d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d72:	4b22      	ldr	r3, [pc, #136]	@ (8000dfc <MX_GPIO_Init+0x13c>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	f003 0308 	and.w	r3, r3, #8
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2110      	movs	r1, #16
 8000d82:	481f      	ldr	r0, [pc, #124]	@ (8000e00 <MX_GPIO_Init+0x140>)
 8000d84:	f001 fa4e 	bl	8002224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NIR_CS_GPIO_Port, NIR_CS_Pin, GPIO_PIN_RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d8e:	481d      	ldr	r0, [pc, #116]	@ (8000e04 <MX_GPIO_Init+0x144>)
 8000d90:	f001 fa48 	bl	8002224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OCP_EN_GPIO_Port, OCP_EN_Pin, GPIO_PIN_RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2110      	movs	r1, #16
 8000d98:	481b      	ldr	r0, [pc, #108]	@ (8000e08 <MX_GPIO_Init+0x148>)
 8000d9a:	f001 fa43 	bl	8002224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d9e:	2310      	movs	r3, #16
 8000da0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da2:	2301      	movs	r3, #1
 8000da4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2300      	movs	r3, #0
 8000dac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dae:	f107 031c 	add.w	r3, r7, #28
 8000db2:	4619      	mov	r1, r3
 8000db4:	4812      	ldr	r0, [pc, #72]	@ (8000e00 <MX_GPIO_Init+0x140>)
 8000db6:	f001 f889 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : NIR_CS_Pin */
  GPIO_InitStruct.Pin = NIR_CS_Pin;
 8000dba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NIR_CS_GPIO_Port, &GPIO_InitStruct);
 8000dcc:	f107 031c 	add.w	r3, r7, #28
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	480c      	ldr	r0, [pc, #48]	@ (8000e04 <MX_GPIO_Init+0x144>)
 8000dd4:	f001 f87a 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : OCP_EN_Pin */
  GPIO_InitStruct.Pin = OCP_EN_Pin;
 8000dd8:	2310      	movs	r3, #16
 8000dda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000de4:	2302      	movs	r3, #2
 8000de6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OCP_EN_GPIO_Port, &GPIO_InitStruct);
 8000de8:	f107 031c 	add.w	r3, r7, #28
 8000dec:	4619      	mov	r1, r3
 8000dee:	4806      	ldr	r0, [pc, #24]	@ (8000e08 <MX_GPIO_Init+0x148>)
 8000df0:	f001 f86c 	bl	8001ecc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000df4:	bf00      	nop
 8000df6:	3730      	adds	r7, #48	@ 0x30
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40021000 	.word	0x40021000
 8000e04:	40020800 	.word	0x40020800
 8000e08:	40020400 	.word	0x40020400

08000e0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e10:	b672      	cpsid	i
}
 8000e12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <Error_Handler+0x8>

08000e18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	4b10      	ldr	r3, [pc, #64]	@ (8000e64 <HAL_MspInit+0x4c>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e26:	4a0f      	ldr	r2, [pc, #60]	@ (8000e64 <HAL_MspInit+0x4c>)
 8000e28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e64 <HAL_MspInit+0x4c>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	603b      	str	r3, [r7, #0]
 8000e3e:	4b09      	ldr	r3, [pc, #36]	@ (8000e64 <HAL_MspInit+0x4c>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e42:	4a08      	ldr	r2, [pc, #32]	@ (8000e64 <HAL_MspInit+0x4c>)
 8000e44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e4a:	4b06      	ldr	r3, [pc, #24]	@ (8000e64 <HAL_MspInit+0x4c>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e52:	603b      	str	r3, [r7, #0]
 8000e54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	40023800 	.word	0x40023800

08000e68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	@ 0x28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a28      	ldr	r2, [pc, #160]	@ (8000f28 <HAL_SPI_MspInit+0xc0>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d14a      	bne.n	8000f20 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	4b27      	ldr	r3, [pc, #156]	@ (8000f2c <HAL_SPI_MspInit+0xc4>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e92:	4a26      	ldr	r2, [pc, #152]	@ (8000f2c <HAL_SPI_MspInit+0xc4>)
 8000e94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e9a:	4b24      	ldr	r3, [pc, #144]	@ (8000f2c <HAL_SPI_MspInit+0xc4>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	4b20      	ldr	r3, [pc, #128]	@ (8000f2c <HAL_SPI_MspInit+0xc4>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	4a1f      	ldr	r2, [pc, #124]	@ (8000f2c <HAL_SPI_MspInit+0xc4>)
 8000eb0:	f043 0302 	orr.w	r3, r3, #2
 8000eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f2c <HAL_SPI_MspInit+0xc4>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	4b19      	ldr	r3, [pc, #100]	@ (8000f2c <HAL_SPI_MspInit+0xc4>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eca:	4a18      	ldr	r2, [pc, #96]	@ (8000f2c <HAL_SPI_MspInit+0xc4>)
 8000ecc:	f043 0308 	orr.w	r3, r3, #8
 8000ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed2:	4b16      	ldr	r3, [pc, #88]	@ (8000f2c <HAL_SPI_MspInit+0xc4>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed6:	f003 0308 	and.w	r3, r3, #8
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    PD3     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000ede:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eec:	2303      	movs	r3, #3
 8000eee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ef0:	2305      	movs	r3, #5
 8000ef2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	4619      	mov	r1, r3
 8000efa:	480d      	ldr	r0, [pc, #52]	@ (8000f30 <HAL_SPI_MspInit+0xc8>)
 8000efc:	f000 ffe6 	bl	8001ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f00:	2308      	movs	r3, #8
 8000f02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	2302      	movs	r3, #2
 8000f06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f10:	2305      	movs	r3, #5
 8000f12:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4806      	ldr	r0, [pc, #24]	@ (8000f34 <HAL_SPI_MspInit+0xcc>)
 8000f1c:	f000 ffd6 	bl	8001ecc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000f20:	bf00      	nop
 8000f22:	3728      	adds	r7, #40	@ 0x28
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40003800 	.word	0x40003800
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40020400 	.word	0x40020400
 8000f34:	40020c00 	.word	0x40020c00

08000f38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b090      	sub	sp, #64	@ 0x40
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a97      	ldr	r2, [pc, #604]	@ (80011b4 <HAL_UART_MspInit+0x27c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d12c      	bne.n	8000fb4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f5e:	4b96      	ldr	r3, [pc, #600]	@ (80011b8 <HAL_UART_MspInit+0x280>)
 8000f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f62:	4a95      	ldr	r2, [pc, #596]	@ (80011b8 <HAL_UART_MspInit+0x280>)
 8000f64:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000f68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f6a:	4b93      	ldr	r3, [pc, #588]	@ (80011b8 <HAL_UART_MspInit+0x280>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000f72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f7a:	4b8f      	ldr	r3, [pc, #572]	@ (80011b8 <HAL_UART_MspInit+0x280>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	4a8e      	ldr	r2, [pc, #568]	@ (80011b8 <HAL_UART_MspInit+0x280>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f86:	4b8c      	ldr	r3, [pc, #560]	@ (80011b8 <HAL_UART_MspInit+0x280>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f92:	2303      	movs	r3, #3
 8000f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	2302      	movs	r3, #2
 8000f98:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000fa2:	2308      	movs	r3, #8
 8000fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000faa:	4619      	mov	r1, r3
 8000fac:	4883      	ldr	r0, [pc, #524]	@ (80011bc <HAL_UART_MspInit+0x284>)
 8000fae:	f000 ff8d 	bl	8001ecc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000fb2:	e0fa      	b.n	80011aa <HAL_UART_MspInit+0x272>
  else if(huart->Instance==UART8)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a81      	ldr	r2, [pc, #516]	@ (80011c0 <HAL_UART_MspInit+0x288>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d163      	bne.n	8001086 <HAL_UART_MspInit+0x14e>
    __HAL_RCC_UART8_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	623b      	str	r3, [r7, #32]
 8000fc2:	4b7d      	ldr	r3, [pc, #500]	@ (80011b8 <HAL_UART_MspInit+0x280>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc6:	4a7c      	ldr	r2, [pc, #496]	@ (80011b8 <HAL_UART_MspInit+0x280>)
 8000fc8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000fcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fce:	4b7a      	ldr	r3, [pc, #488]	@ (80011b8 <HAL_UART_MspInit+0x280>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8000fd6:	623b      	str	r3, [r7, #32]
 8000fd8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
 8000fde:	4b76      	ldr	r3, [pc, #472]	@ (80011b8 <HAL_UART_MspInit+0x280>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	4a75      	ldr	r2, [pc, #468]	@ (80011b8 <HAL_UART_MspInit+0x280>)
 8000fe4:	f043 0310 	orr.w	r3, r3, #16
 8000fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fea:	4b73      	ldr	r3, [pc, #460]	@ (80011b8 <HAL_UART_MspInit+0x280>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	f003 0310 	and.w	r3, r3, #16
 8000ff2:	61fb      	str	r3, [r7, #28]
 8000ff4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001002:	2303      	movs	r3, #3
 8001004:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001006:	2308      	movs	r3, #8
 8001008:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800100a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800100e:	4619      	mov	r1, r3
 8001010:	486c      	ldr	r0, [pc, #432]	@ (80011c4 <HAL_UART_MspInit+0x28c>)
 8001012:	f000 ff5b 	bl	8001ecc <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream6;
 8001016:	4b6c      	ldr	r3, [pc, #432]	@ (80011c8 <HAL_UART_MspInit+0x290>)
 8001018:	4a6c      	ldr	r2, [pc, #432]	@ (80011cc <HAL_UART_MspInit+0x294>)
 800101a:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 800101c:	4b6a      	ldr	r3, [pc, #424]	@ (80011c8 <HAL_UART_MspInit+0x290>)
 800101e:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8001022:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001024:	4b68      	ldr	r3, [pc, #416]	@ (80011c8 <HAL_UART_MspInit+0x290>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800102a:	4b67      	ldr	r3, [pc, #412]	@ (80011c8 <HAL_UART_MspInit+0x290>)
 800102c:	2200      	movs	r2, #0
 800102e:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001030:	4b65      	ldr	r3, [pc, #404]	@ (80011c8 <HAL_UART_MspInit+0x290>)
 8001032:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001036:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001038:	4b63      	ldr	r3, [pc, #396]	@ (80011c8 <HAL_UART_MspInit+0x290>)
 800103a:	2200      	movs	r2, #0
 800103c:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800103e:	4b62      	ldr	r3, [pc, #392]	@ (80011c8 <HAL_UART_MspInit+0x290>)
 8001040:	2200      	movs	r2, #0
 8001042:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 8001044:	4b60      	ldr	r3, [pc, #384]	@ (80011c8 <HAL_UART_MspInit+0x290>)
 8001046:	2200      	movs	r2, #0
 8001048:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800104a:	4b5f      	ldr	r3, [pc, #380]	@ (80011c8 <HAL_UART_MspInit+0x290>)
 800104c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001050:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001052:	4b5d      	ldr	r3, [pc, #372]	@ (80011c8 <HAL_UART_MspInit+0x290>)
 8001054:	2200      	movs	r2, #0
 8001056:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8001058:	485b      	ldr	r0, [pc, #364]	@ (80011c8 <HAL_UART_MspInit+0x290>)
 800105a:	f000 fb35 	bl	80016c8 <HAL_DMA_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <HAL_UART_MspInit+0x130>
      Error_Handler();
 8001064:	f7ff fed2 	bl	8000e0c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a57      	ldr	r2, [pc, #348]	@ (80011c8 <HAL_UART_MspInit+0x290>)
 800106c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800106e:	4a56      	ldr	r2, [pc, #344]	@ (80011c8 <HAL_UART_MspInit+0x290>)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 1, 0);
 8001074:	2200      	movs	r2, #0
 8001076:	2101      	movs	r1, #1
 8001078:	2053      	movs	r0, #83	@ 0x53
 800107a:	f000 faee 	bl	800165a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 800107e:	2053      	movs	r0, #83	@ 0x53
 8001080:	f000 fb07 	bl	8001692 <HAL_NVIC_EnableIRQ>
}
 8001084:	e091      	b.n	80011aa <HAL_UART_MspInit+0x272>
  else if(huart->Instance==USART2)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a51      	ldr	r2, [pc, #324]	@ (80011d0 <HAL_UART_MspInit+0x298>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d12c      	bne.n	80010ea <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001090:	2300      	movs	r3, #0
 8001092:	61bb      	str	r3, [r7, #24]
 8001094:	4b48      	ldr	r3, [pc, #288]	@ (80011b8 <HAL_UART_MspInit+0x280>)
 8001096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001098:	4a47      	ldr	r2, [pc, #284]	@ (80011b8 <HAL_UART_MspInit+0x280>)
 800109a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800109e:	6413      	str	r3, [r2, #64]	@ 0x40
 80010a0:	4b45      	ldr	r3, [pc, #276]	@ (80011b8 <HAL_UART_MspInit+0x280>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010a8:	61bb      	str	r3, [r7, #24]
 80010aa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	4b41      	ldr	r3, [pc, #260]	@ (80011b8 <HAL_UART_MspInit+0x280>)
 80010b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b4:	4a40      	ldr	r2, [pc, #256]	@ (80011b8 <HAL_UART_MspInit+0x280>)
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80010bc:	4b3e      	ldr	r3, [pc, #248]	@ (80011b8 <HAL_UART_MspInit+0x280>)
 80010be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	617b      	str	r3, [r7, #20]
 80010c6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010c8:	230c      	movs	r3, #12
 80010ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
 80010ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d4:	2303      	movs	r3, #3
 80010d6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010d8:	2307      	movs	r3, #7
 80010da:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010e0:	4619      	mov	r1, r3
 80010e2:	4836      	ldr	r0, [pc, #216]	@ (80011bc <HAL_UART_MspInit+0x284>)
 80010e4:	f000 fef2 	bl	8001ecc <HAL_GPIO_Init>
}
 80010e8:	e05f      	b.n	80011aa <HAL_UART_MspInit+0x272>
  else if(huart->Instance==USART6)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a39      	ldr	r2, [pc, #228]	@ (80011d4 <HAL_UART_MspInit+0x29c>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d15a      	bne.n	80011aa <HAL_UART_MspInit+0x272>
    __HAL_RCC_USART6_CLK_ENABLE();
 80010f4:	2300      	movs	r3, #0
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	4b2f      	ldr	r3, [pc, #188]	@ (80011b8 <HAL_UART_MspInit+0x280>)
 80010fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010fc:	4a2e      	ldr	r2, [pc, #184]	@ (80011b8 <HAL_UART_MspInit+0x280>)
 80010fe:	f043 0320 	orr.w	r3, r3, #32
 8001102:	6453      	str	r3, [r2, #68]	@ 0x44
 8001104:	4b2c      	ldr	r3, [pc, #176]	@ (80011b8 <HAL_UART_MspInit+0x280>)
 8001106:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001108:	f003 0320 	and.w	r3, r3, #32
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	4b28      	ldr	r3, [pc, #160]	@ (80011b8 <HAL_UART_MspInit+0x280>)
 8001116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001118:	4a27      	ldr	r2, [pc, #156]	@ (80011b8 <HAL_UART_MspInit+0x280>)
 800111a:	f043 0304 	orr.w	r3, r3, #4
 800111e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001120:	4b25      	ldr	r3, [pc, #148]	@ (80011b8 <HAL_UART_MspInit+0x280>)
 8001122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001124:	f003 0304 	and.w	r3, r3, #4
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800112c:	23c0      	movs	r3, #192	@ 0xc0
 800112e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001138:	2303      	movs	r3, #3
 800113a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800113c:	2308      	movs	r3, #8
 800113e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001140:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001144:	4619      	mov	r1, r3
 8001146:	4824      	ldr	r0, [pc, #144]	@ (80011d8 <HAL_UART_MspInit+0x2a0>)
 8001148:	f000 fec0 	bl	8001ecc <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800114c:	4b23      	ldr	r3, [pc, #140]	@ (80011dc <HAL_UART_MspInit+0x2a4>)
 800114e:	4a24      	ldr	r2, [pc, #144]	@ (80011e0 <HAL_UART_MspInit+0x2a8>)
 8001150:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001152:	4b22      	ldr	r3, [pc, #136]	@ (80011dc <HAL_UART_MspInit+0x2a4>)
 8001154:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8001158:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800115a:	4b20      	ldr	r3, [pc, #128]	@ (80011dc <HAL_UART_MspInit+0x2a4>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001160:	4b1e      	ldr	r3, [pc, #120]	@ (80011dc <HAL_UART_MspInit+0x2a4>)
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001166:	4b1d      	ldr	r3, [pc, #116]	@ (80011dc <HAL_UART_MspInit+0x2a4>)
 8001168:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800116c:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800116e:	4b1b      	ldr	r3, [pc, #108]	@ (80011dc <HAL_UART_MspInit+0x2a4>)
 8001170:	2200      	movs	r2, #0
 8001172:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001174:	4b19      	ldr	r3, [pc, #100]	@ (80011dc <HAL_UART_MspInit+0x2a4>)
 8001176:	2200      	movs	r2, #0
 8001178:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800117a:	4b18      	ldr	r3, [pc, #96]	@ (80011dc <HAL_UART_MspInit+0x2a4>)
 800117c:	2200      	movs	r2, #0
 800117e:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001180:	4b16      	ldr	r3, [pc, #88]	@ (80011dc <HAL_UART_MspInit+0x2a4>)
 8001182:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001186:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001188:	4b14      	ldr	r3, [pc, #80]	@ (80011dc <HAL_UART_MspInit+0x2a4>)
 800118a:	2200      	movs	r2, #0
 800118c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800118e:	4813      	ldr	r0, [pc, #76]	@ (80011dc <HAL_UART_MspInit+0x2a4>)
 8001190:	f000 fa9a 	bl	80016c8 <HAL_DMA_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_UART_MspInit+0x266>
      Error_Handler();
 800119a:	f7ff fe37 	bl	8000e0c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a0e      	ldr	r2, [pc, #56]	@ (80011dc <HAL_UART_MspInit+0x2a4>)
 80011a2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80011a4:	4a0d      	ldr	r2, [pc, #52]	@ (80011dc <HAL_UART_MspInit+0x2a4>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80011aa:	bf00      	nop
 80011ac:	3740      	adds	r7, #64	@ 0x40
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40004c00 	.word	0x40004c00
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40020000 	.word	0x40020000
 80011c0:	40007c00 	.word	0x40007c00
 80011c4:	40021000 	.word	0x40021000
 80011c8:	20000348 	.word	0x20000348
 80011cc:	400260a0 	.word	0x400260a0
 80011d0:	40004400 	.word	0x40004400
 80011d4:	40011400 	.word	0x40011400
 80011d8:	40020800 	.word	0x40020800
 80011dc:	200003a8 	.word	0x200003a8
 80011e0:	40026428 	.word	0x40026428

080011e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011e8:	bf00      	nop
 80011ea:	e7fd      	b.n	80011e8 <NMI_Handler+0x4>

080011ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f0:	bf00      	nop
 80011f2:	e7fd      	b.n	80011f0 <HardFault_Handler+0x4>

080011f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f8:	bf00      	nop
 80011fa:	e7fd      	b.n	80011f8 <MemManage_Handler+0x4>

080011fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001200:	bf00      	nop
 8001202:	e7fd      	b.n	8001200 <BusFault_Handler+0x4>

08001204 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001208:	bf00      	nop
 800120a:	e7fd      	b.n	8001208 <UsageFault_Handler+0x4>

0800120c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800123a:	f000 f8ef 	bl	800141c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8001248:	4802      	ldr	r0, [pc, #8]	@ (8001254 <DMA1_Stream6_IRQHandler+0x10>)
 800124a:	f000 fbd5 	bl	80019f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000348 	.word	0x20000348

08001258 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800125c:	4802      	ldr	r0, [pc, #8]	@ (8001268 <DMA2_Stream1_IRQHandler+0x10>)
 800125e:	f000 fbcb 	bl	80019f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	200003a8 	.word	0x200003a8

0800126c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001270:	4802      	ldr	r0, [pc, #8]	@ (800127c <OTG_FS_IRQHandler+0x10>)
 8001272:	f001 f934 	bl	80024de <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200076cc 	.word	0x200076cc

08001280 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8001284:	4802      	ldr	r0, [pc, #8]	@ (8001290 <UART8_IRQHandler+0x10>)
 8001286:	f003 f85b 	bl	8004340 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000270 	.word	0x20000270

08001294 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800129c:	4a14      	ldr	r2, [pc, #80]	@ (80012f0 <_sbrk+0x5c>)
 800129e:	4b15      	ldr	r3, [pc, #84]	@ (80012f4 <_sbrk+0x60>)
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012a8:	4b13      	ldr	r3, [pc, #76]	@ (80012f8 <_sbrk+0x64>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d102      	bne.n	80012b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012b0:	4b11      	ldr	r3, [pc, #68]	@ (80012f8 <_sbrk+0x64>)
 80012b2:	4a12      	ldr	r2, [pc, #72]	@ (80012fc <_sbrk+0x68>)
 80012b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012b6:	4b10      	ldr	r3, [pc, #64]	@ (80012f8 <_sbrk+0x64>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4413      	add	r3, r2
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d207      	bcs.n	80012d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012c4:	f008 f92a 	bl	800951c <__errno>
 80012c8:	4603      	mov	r3, r0
 80012ca:	220c      	movs	r2, #12
 80012cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295
 80012d2:	e009      	b.n	80012e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012d4:	4b08      	ldr	r3, [pc, #32]	@ (80012f8 <_sbrk+0x64>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012da:	4b07      	ldr	r3, [pc, #28]	@ (80012f8 <_sbrk+0x64>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4413      	add	r3, r2
 80012e2:	4a05      	ldr	r2, [pc, #20]	@ (80012f8 <_sbrk+0x64>)
 80012e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012e6:	68fb      	ldr	r3, [r7, #12]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20030000 	.word	0x20030000
 80012f4:	00000400 	.word	0x00000400
 80012f8:	20000408 	.word	0x20000408
 80012fc:	20007f18 	.word	0x20007f18

08001300 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001304:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <SystemInit+0x20>)
 8001306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800130a:	4a05      	ldr	r2, [pc, #20]	@ (8001320 <SystemInit+0x20>)
 800130c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001310:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001324:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800135c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001328:	f7ff ffea 	bl	8001300 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800132c:	480c      	ldr	r0, [pc, #48]	@ (8001360 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800132e:	490d      	ldr	r1, [pc, #52]	@ (8001364 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001330:	4a0d      	ldr	r2, [pc, #52]	@ (8001368 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001334:	e002      	b.n	800133c <LoopCopyDataInit>

08001336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800133a:	3304      	adds	r3, #4

0800133c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800133c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800133e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001340:	d3f9      	bcc.n	8001336 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001342:	4a0a      	ldr	r2, [pc, #40]	@ (800136c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001344:	4c0a      	ldr	r4, [pc, #40]	@ (8001370 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001348:	e001      	b.n	800134e <LoopFillZerobss>

0800134a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800134a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800134c:	3204      	adds	r2, #4

0800134e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800134e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001350:	d3fb      	bcc.n	800134a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001352:	f008 f8e9 	bl	8009528 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001356:	f7ff fb15 	bl	8000984 <main>
  bx  lr    
 800135a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800135c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001364:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8001368:	0800a0c0 	.word	0x0800a0c0
  ldr r2, =_sbss
 800136c:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8001370:	20007f18 	.word	0x20007f18

08001374 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001374:	e7fe      	b.n	8001374 <ADC_IRQHandler>
	...

08001378 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800137c:	4b0e      	ldr	r3, [pc, #56]	@ (80013b8 <HAL_Init+0x40>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a0d      	ldr	r2, [pc, #52]	@ (80013b8 <HAL_Init+0x40>)
 8001382:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001386:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001388:	4b0b      	ldr	r3, [pc, #44]	@ (80013b8 <HAL_Init+0x40>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a0a      	ldr	r2, [pc, #40]	@ (80013b8 <HAL_Init+0x40>)
 800138e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001392:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001394:	4b08      	ldr	r3, [pc, #32]	@ (80013b8 <HAL_Init+0x40>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a07      	ldr	r2, [pc, #28]	@ (80013b8 <HAL_Init+0x40>)
 800139a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800139e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a0:	2003      	movs	r0, #3
 80013a2:	f000 f94f 	bl	8001644 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013a6:	200f      	movs	r0, #15
 80013a8:	f000 f808 	bl	80013bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013ac:	f7ff fd34 	bl	8000e18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40023c00 	.word	0x40023c00

080013bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013c4:	4b12      	ldr	r3, [pc, #72]	@ (8001410 <HAL_InitTick+0x54>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	4b12      	ldr	r3, [pc, #72]	@ (8001414 <HAL_InitTick+0x58>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	4619      	mov	r1, r3
 80013ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 f967 	bl	80016ae <HAL_SYSTICK_Config>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e00e      	b.n	8001408 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b0f      	cmp	r3, #15
 80013ee:	d80a      	bhi.n	8001406 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f0:	2200      	movs	r2, #0
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	f04f 30ff 	mov.w	r0, #4294967295
 80013f8:	f000 f92f 	bl	800165a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013fc:	4a06      	ldr	r2, [pc, #24]	@ (8001418 <HAL_InitTick+0x5c>)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001402:	2300      	movs	r3, #0
 8001404:	e000      	b.n	8001408 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
}
 8001408:	4618      	mov	r0, r3
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000004 	.word	0x20000004
 8001414:	2000000c 	.word	0x2000000c
 8001418:	20000008 	.word	0x20000008

0800141c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001420:	4b06      	ldr	r3, [pc, #24]	@ (800143c <HAL_IncTick+0x20>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	461a      	mov	r2, r3
 8001426:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <HAL_IncTick+0x24>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4413      	add	r3, r2
 800142c:	4a04      	ldr	r2, [pc, #16]	@ (8001440 <HAL_IncTick+0x24>)
 800142e:	6013      	str	r3, [r2, #0]
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	2000000c 	.word	0x2000000c
 8001440:	200061e8 	.word	0x200061e8

08001444 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return uwTick;
 8001448:	4b03      	ldr	r3, [pc, #12]	@ (8001458 <HAL_GetTick+0x14>)
 800144a:	681b      	ldr	r3, [r3, #0]
}
 800144c:	4618      	mov	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	200061e8 	.word	0x200061e8

0800145c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001464:	f7ff ffee 	bl	8001444 <HAL_GetTick>
 8001468:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001474:	d005      	beq.n	8001482 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001476:	4b0a      	ldr	r3, [pc, #40]	@ (80014a0 <HAL_Delay+0x44>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	461a      	mov	r2, r3
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	4413      	add	r3, r2
 8001480:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001482:	bf00      	nop
 8001484:	f7ff ffde 	bl	8001444 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	429a      	cmp	r2, r3
 8001492:	d8f7      	bhi.n	8001484 <HAL_Delay+0x28>
  {
  }
}
 8001494:	bf00      	nop
 8001496:	bf00      	nop
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	2000000c 	.word	0x2000000c

080014a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b4:	4b0c      	ldr	r3, [pc, #48]	@ (80014e8 <__NVIC_SetPriorityGrouping+0x44>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014c0:	4013      	ands	r3, r2
 80014c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014d6:	4a04      	ldr	r2, [pc, #16]	@ (80014e8 <__NVIC_SetPriorityGrouping+0x44>)
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	60d3      	str	r3, [r2, #12]
}
 80014dc:	bf00      	nop
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f0:	4b04      	ldr	r3, [pc, #16]	@ (8001504 <__NVIC_GetPriorityGrouping+0x18>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	0a1b      	lsrs	r3, r3, #8
 80014f6:	f003 0307 	and.w	r3, r3, #7
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	2b00      	cmp	r3, #0
 8001518:	db0b      	blt.n	8001532 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	f003 021f 	and.w	r2, r3, #31
 8001520:	4907      	ldr	r1, [pc, #28]	@ (8001540 <__NVIC_EnableIRQ+0x38>)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	095b      	lsrs	r3, r3, #5
 8001528:	2001      	movs	r0, #1
 800152a:	fa00 f202 	lsl.w	r2, r0, r2
 800152e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000e100 	.word	0xe000e100

08001544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001554:	2b00      	cmp	r3, #0
 8001556:	db0a      	blt.n	800156e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	b2da      	uxtb	r2, r3
 800155c:	490c      	ldr	r1, [pc, #48]	@ (8001590 <__NVIC_SetPriority+0x4c>)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	0112      	lsls	r2, r2, #4
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	440b      	add	r3, r1
 8001568:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800156c:	e00a      	b.n	8001584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	b2da      	uxtb	r2, r3
 8001572:	4908      	ldr	r1, [pc, #32]	@ (8001594 <__NVIC_SetPriority+0x50>)
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	3b04      	subs	r3, #4
 800157c:	0112      	lsls	r2, r2, #4
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	440b      	add	r3, r1
 8001582:	761a      	strb	r2, [r3, #24]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000e100 	.word	0xe000e100
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001598:	b480      	push	{r7}
 800159a:	b089      	sub	sp, #36	@ 0x24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f1c3 0307 	rsb	r3, r3, #7
 80015b2:	2b04      	cmp	r3, #4
 80015b4:	bf28      	it	cs
 80015b6:	2304      	movcs	r3, #4
 80015b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3304      	adds	r3, #4
 80015be:	2b06      	cmp	r3, #6
 80015c0:	d902      	bls.n	80015c8 <NVIC_EncodePriority+0x30>
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3b03      	subs	r3, #3
 80015c6:	e000      	b.n	80015ca <NVIC_EncodePriority+0x32>
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	f04f 32ff 	mov.w	r2, #4294967295
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43da      	mvns	r2, r3
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	401a      	ands	r2, r3
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e0:	f04f 31ff 	mov.w	r1, #4294967295
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ea:	43d9      	mvns	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f0:	4313      	orrs	r3, r2
         );
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3724      	adds	r7, #36	@ 0x24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
	...

08001600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3b01      	subs	r3, #1
 800160c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001610:	d301      	bcc.n	8001616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001612:	2301      	movs	r3, #1
 8001614:	e00f      	b.n	8001636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001616:	4a0a      	ldr	r2, [pc, #40]	@ (8001640 <SysTick_Config+0x40>)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3b01      	subs	r3, #1
 800161c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800161e:	210f      	movs	r1, #15
 8001620:	f04f 30ff 	mov.w	r0, #4294967295
 8001624:	f7ff ff8e 	bl	8001544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001628:	4b05      	ldr	r3, [pc, #20]	@ (8001640 <SysTick_Config+0x40>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800162e:	4b04      	ldr	r3, [pc, #16]	@ (8001640 <SysTick_Config+0x40>)
 8001630:	2207      	movs	r2, #7
 8001632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	e000e010 	.word	0xe000e010

08001644 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff ff29 	bl	80014a4 <__NVIC_SetPriorityGrouping>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800165a:	b580      	push	{r7, lr}
 800165c:	b086      	sub	sp, #24
 800165e:	af00      	add	r7, sp, #0
 8001660:	4603      	mov	r3, r0
 8001662:	60b9      	str	r1, [r7, #8]
 8001664:	607a      	str	r2, [r7, #4]
 8001666:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800166c:	f7ff ff3e 	bl	80014ec <__NVIC_GetPriorityGrouping>
 8001670:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	68b9      	ldr	r1, [r7, #8]
 8001676:	6978      	ldr	r0, [r7, #20]
 8001678:	f7ff ff8e 	bl	8001598 <NVIC_EncodePriority>
 800167c:	4602      	mov	r2, r0
 800167e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001682:	4611      	mov	r1, r2
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff5d 	bl	8001544 <__NVIC_SetPriority>
}
 800168a:	bf00      	nop
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	4603      	mov	r3, r0
 800169a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800169c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff31 	bl	8001508 <__NVIC_EnableIRQ>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff ffa2 	bl	8001600 <SysTick_Config>
 80016bc:	4603      	mov	r3, r0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80016d4:	f7ff feb6 	bl	8001444 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d101      	bne.n	80016e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e099      	b.n	8001818 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2202      	movs	r2, #2
 80016e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f022 0201 	bic.w	r2, r2, #1
 8001702:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001704:	e00f      	b.n	8001726 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001706:	f7ff fe9d 	bl	8001444 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b05      	cmp	r3, #5
 8001712:	d908      	bls.n	8001726 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2220      	movs	r2, #32
 8001718:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2203      	movs	r2, #3
 800171e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e078      	b.n	8001818 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1e8      	bne.n	8001706 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800173c:	697a      	ldr	r2, [r7, #20]
 800173e:	4b38      	ldr	r3, [pc, #224]	@ (8001820 <HAL_DMA_Init+0x158>)
 8001740:	4013      	ands	r3, r2
 8001742:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685a      	ldr	r2, [r3, #4]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001752:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800175e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800176a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	4313      	orrs	r3, r2
 8001776:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800177c:	2b04      	cmp	r3, #4
 800177e:	d107      	bne.n	8001790 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001788:	4313      	orrs	r3, r2
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	4313      	orrs	r3, r2
 800178e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	697a      	ldr	r2, [r7, #20]
 8001796:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	f023 0307 	bic.w	r3, r3, #7
 80017a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	d117      	bne.n	80017ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d00e      	beq.n	80017ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f000 fb01 	bl	8001dd4 <DMA_CheckFifoParam>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d008      	beq.n	80017ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2240      	movs	r2, #64	@ 0x40
 80017dc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2201      	movs	r2, #1
 80017e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80017e6:	2301      	movs	r3, #1
 80017e8:	e016      	b.n	8001818 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 fab8 	bl	8001d68 <DMA_CalcBaseAndBitshift>
 80017f8:	4603      	mov	r3, r0
 80017fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001800:	223f      	movs	r2, #63	@ 0x3f
 8001802:	409a      	lsls	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2201      	movs	r2, #1
 8001812:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	f010803f 	.word	0xf010803f

08001824 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
 8001830:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001832:	2300      	movs	r3, #0
 8001834:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800183a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001842:	2b01      	cmp	r3, #1
 8001844:	d101      	bne.n	800184a <HAL_DMA_Start_IT+0x26>
 8001846:	2302      	movs	r3, #2
 8001848:	e040      	b.n	80018cc <HAL_DMA_Start_IT+0xa8>
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2201      	movs	r2, #1
 800184e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b01      	cmp	r3, #1
 800185c:	d12f      	bne.n	80018be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2202      	movs	r2, #2
 8001862:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2200      	movs	r2, #0
 800186a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	68b9      	ldr	r1, [r7, #8]
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	f000 fa4a 	bl	8001d0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800187c:	223f      	movs	r2, #63	@ 0x3f
 800187e:	409a      	lsls	r2, r3
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f042 0216 	orr.w	r2, r2, #22
 8001892:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001898:	2b00      	cmp	r3, #0
 800189a:	d007      	beq.n	80018ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f042 0208 	orr.w	r2, r2, #8
 80018aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f042 0201 	orr.w	r2, r2, #1
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	e005      	b.n	80018ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80018c6:	2302      	movs	r3, #2
 80018c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80018ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80018e2:	f7ff fdaf 	bl	8001444 <HAL_GetTick>
 80018e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d008      	beq.n	8001906 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2280      	movs	r2, #128	@ 0x80
 80018f8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e052      	b.n	80019ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 0216 	bic.w	r2, r2, #22
 8001914:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	695a      	ldr	r2, [r3, #20]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001924:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192a:	2b00      	cmp	r3, #0
 800192c:	d103      	bne.n	8001936 <HAL_DMA_Abort+0x62>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001932:	2b00      	cmp	r3, #0
 8001934:	d007      	beq.n	8001946 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f022 0208 	bic.w	r2, r2, #8
 8001944:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 0201 	bic.w	r2, r2, #1
 8001954:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001956:	e013      	b.n	8001980 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001958:	f7ff fd74 	bl	8001444 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b05      	cmp	r3, #5
 8001964:	d90c      	bls.n	8001980 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2220      	movs	r2, #32
 800196a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2203      	movs	r2, #3
 8001970:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e015      	b.n	80019ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1e4      	bne.n	8001958 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001992:	223f      	movs	r2, #63	@ 0x3f
 8001994:	409a      	lsls	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2201      	movs	r2, #1
 800199e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d004      	beq.n	80019d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2280      	movs	r2, #128	@ 0x80
 80019cc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e00c      	b.n	80019ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2205      	movs	r2, #5
 80019d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f022 0201 	bic.w	r2, r2, #1
 80019e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a04:	4b8e      	ldr	r3, [pc, #568]	@ (8001c40 <HAL_DMA_IRQHandler+0x248>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a8e      	ldr	r2, [pc, #568]	@ (8001c44 <HAL_DMA_IRQHandler+0x24c>)
 8001a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0e:	0a9b      	lsrs	r3, r3, #10
 8001a10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a22:	2208      	movs	r2, #8
 8001a24:	409a      	lsls	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d01a      	beq.n	8001a64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d013      	beq.n	8001a64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 0204 	bic.w	r2, r2, #4
 8001a4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a50:	2208      	movs	r2, #8
 8001a52:	409a      	lsls	r2, r3
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a5c:	f043 0201 	orr.w	r2, r3, #1
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a68:	2201      	movs	r2, #1
 8001a6a:	409a      	lsls	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d012      	beq.n	8001a9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d00b      	beq.n	8001a9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a86:	2201      	movs	r2, #1
 8001a88:	409a      	lsls	r2, r3
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a92:	f043 0202 	orr.w	r2, r3, #2
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a9e:	2204      	movs	r2, #4
 8001aa0:	409a      	lsls	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d012      	beq.n	8001ad0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d00b      	beq.n	8001ad0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001abc:	2204      	movs	r2, #4
 8001abe:	409a      	lsls	r2, r3
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ac8:	f043 0204 	orr.w	r2, r3, #4
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ad4:	2210      	movs	r2, #16
 8001ad6:	409a      	lsls	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4013      	ands	r3, r2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d043      	beq.n	8001b68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d03c      	beq.n	8001b68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001af2:	2210      	movs	r2, #16
 8001af4:	409a      	lsls	r2, r3
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d018      	beq.n	8001b3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d108      	bne.n	8001b28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d024      	beq.n	8001b68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	4798      	blx	r3
 8001b26:	e01f      	b.n	8001b68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d01b      	beq.n	8001b68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	4798      	blx	r3
 8001b38:	e016      	b.n	8001b68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d107      	bne.n	8001b58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f022 0208 	bic.w	r2, r2, #8
 8001b56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b6c:	2220      	movs	r2, #32
 8001b6e:	409a      	lsls	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4013      	ands	r3, r2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f000 808f 	beq.w	8001c98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0310 	and.w	r3, r3, #16
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f000 8087 	beq.w	8001c98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b8e:	2220      	movs	r2, #32
 8001b90:	409a      	lsls	r2, r3
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b05      	cmp	r3, #5
 8001ba0:	d136      	bne.n	8001c10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 0216 	bic.w	r2, r2, #22
 8001bb0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	695a      	ldr	r2, [r3, #20]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001bc0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d103      	bne.n	8001bd2 <HAL_DMA_IRQHandler+0x1da>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d007      	beq.n	8001be2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 0208 	bic.w	r2, r2, #8
 8001be0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001be6:	223f      	movs	r2, #63	@ 0x3f
 8001be8:	409a      	lsls	r2, r3
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d07e      	beq.n	8001d04 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	4798      	blx	r3
        }
        return;
 8001c0e:	e079      	b.n	8001d04 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d01d      	beq.n	8001c5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d10d      	bne.n	8001c48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d031      	beq.n	8001c98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	4798      	blx	r3
 8001c3c:	e02c      	b.n	8001c98 <HAL_DMA_IRQHandler+0x2a0>
 8001c3e:	bf00      	nop
 8001c40:	20000004 	.word	0x20000004
 8001c44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d023      	beq.n	8001c98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	4798      	blx	r3
 8001c58:	e01e      	b.n	8001c98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d10f      	bne.n	8001c88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 0210 	bic.w	r2, r2, #16
 8001c76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d032      	beq.n	8001d06 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d022      	beq.n	8001cf2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2205      	movs	r2, #5
 8001cb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 0201 	bic.w	r2, r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	60bb      	str	r3, [r7, #8]
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d307      	bcc.n	8001ce0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f2      	bne.n	8001cc4 <HAL_DMA_IRQHandler+0x2cc>
 8001cde:	e000      	b.n	8001ce2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ce0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d005      	beq.n	8001d06 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	4798      	blx	r3
 8001d02:	e000      	b.n	8001d06 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d04:	bf00      	nop
    }
  }
}
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
 8001d18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001d28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	2b40      	cmp	r3, #64	@ 0x40
 8001d38:	d108      	bne.n	8001d4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d4a:	e007      	b.n	8001d5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68ba      	ldr	r2, [r7, #8]
 8001d52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	60da      	str	r2, [r3, #12]
}
 8001d5c:	bf00      	nop
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	3b10      	subs	r3, #16
 8001d78:	4a14      	ldr	r2, [pc, #80]	@ (8001dcc <DMA_CalcBaseAndBitshift+0x64>)
 8001d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7e:	091b      	lsrs	r3, r3, #4
 8001d80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d82:	4a13      	ldr	r2, [pc, #76]	@ (8001dd0 <DMA_CalcBaseAndBitshift+0x68>)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4413      	add	r3, r2
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2b03      	cmp	r3, #3
 8001d94:	d909      	bls.n	8001daa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001d9e:	f023 0303 	bic.w	r3, r3, #3
 8001da2:	1d1a      	adds	r2, r3, #4
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	659a      	str	r2, [r3, #88]	@ 0x58
 8001da8:	e007      	b.n	8001dba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001db2:	f023 0303 	bic.w	r3, r3, #3
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3714      	adds	r7, #20
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	aaaaaaab 	.word	0xaaaaaaab
 8001dd0:	0800a074 	.word	0x0800a074

08001dd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d11f      	bne.n	8001e2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	2b03      	cmp	r3, #3
 8001df2:	d856      	bhi.n	8001ea2 <DMA_CheckFifoParam+0xce>
 8001df4:	a201      	add	r2, pc, #4	@ (adr r2, 8001dfc <DMA_CheckFifoParam+0x28>)
 8001df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dfa:	bf00      	nop
 8001dfc:	08001e0d 	.word	0x08001e0d
 8001e00:	08001e1f 	.word	0x08001e1f
 8001e04:	08001e0d 	.word	0x08001e0d
 8001e08:	08001ea3 	.word	0x08001ea3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d046      	beq.n	8001ea6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e1c:	e043      	b.n	8001ea6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e22:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001e26:	d140      	bne.n	8001eaa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e2c:	e03d      	b.n	8001eaa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e36:	d121      	bne.n	8001e7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	2b03      	cmp	r3, #3
 8001e3c:	d837      	bhi.n	8001eae <DMA_CheckFifoParam+0xda>
 8001e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8001e44 <DMA_CheckFifoParam+0x70>)
 8001e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e44:	08001e55 	.word	0x08001e55
 8001e48:	08001e5b 	.word	0x08001e5b
 8001e4c:	08001e55 	.word	0x08001e55
 8001e50:	08001e6d 	.word	0x08001e6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	73fb      	strb	r3, [r7, #15]
      break;
 8001e58:	e030      	b.n	8001ebc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e5e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d025      	beq.n	8001eb2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e6a:	e022      	b.n	8001eb2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e70:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001e74:	d11f      	bne.n	8001eb6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e7a:	e01c      	b.n	8001eb6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d903      	bls.n	8001e8a <DMA_CheckFifoParam+0xb6>
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	2b03      	cmp	r3, #3
 8001e86:	d003      	beq.n	8001e90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e88:	e018      	b.n	8001ebc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	73fb      	strb	r3, [r7, #15]
      break;
 8001e8e:	e015      	b.n	8001ebc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00e      	beq.n	8001eba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8001ea0:	e00b      	b.n	8001eba <DMA_CheckFifoParam+0xe6>
      break;
 8001ea2:	bf00      	nop
 8001ea4:	e00a      	b.n	8001ebc <DMA_CheckFifoParam+0xe8>
      break;
 8001ea6:	bf00      	nop
 8001ea8:	e008      	b.n	8001ebc <DMA_CheckFifoParam+0xe8>
      break;
 8001eaa:	bf00      	nop
 8001eac:	e006      	b.n	8001ebc <DMA_CheckFifoParam+0xe8>
      break;
 8001eae:	bf00      	nop
 8001eb0:	e004      	b.n	8001ebc <DMA_CheckFifoParam+0xe8>
      break;
 8001eb2:	bf00      	nop
 8001eb4:	e002      	b.n	8001ebc <DMA_CheckFifoParam+0xe8>
      break;   
 8001eb6:	bf00      	nop
 8001eb8:	e000      	b.n	8001ebc <DMA_CheckFifoParam+0xe8>
      break;
 8001eba:	bf00      	nop
    }
  } 
  
  return status; 
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop

08001ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b089      	sub	sp, #36	@ 0x24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
 8001ee6:	e177      	b.n	80021d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ee8:	2201      	movs	r2, #1
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	f040 8166 	bne.w	80021d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d005      	beq.n	8001f1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d130      	bne.n	8001f80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	2203      	movs	r2, #3
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4013      	ands	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f54:	2201      	movs	r2, #1
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	091b      	lsrs	r3, r3, #4
 8001f6a:	f003 0201 	and.w	r2, r3, #1
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 0303 	and.w	r3, r3, #3
 8001f88:	2b03      	cmp	r3, #3
 8001f8a:	d017      	beq.n	8001fbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	2203      	movs	r2, #3
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 0303 	and.w	r3, r3, #3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d123      	bne.n	8002010 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	08da      	lsrs	r2, r3, #3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3208      	adds	r2, #8
 8001fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	220f      	movs	r2, #15
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	691a      	ldr	r2, [r3, #16]
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	08da      	lsrs	r2, r3, #3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3208      	adds	r2, #8
 800200a:	69b9      	ldr	r1, [r7, #24]
 800200c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	2203      	movs	r2, #3
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 0203 	and.w	r2, r3, #3
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 80c0 	beq.w	80021d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	4b66      	ldr	r3, [pc, #408]	@ (80021f0 <HAL_GPIO_Init+0x324>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800205a:	4a65      	ldr	r2, [pc, #404]	@ (80021f0 <HAL_GPIO_Init+0x324>)
 800205c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002060:	6453      	str	r3, [r2, #68]	@ 0x44
 8002062:	4b63      	ldr	r3, [pc, #396]	@ (80021f0 <HAL_GPIO_Init+0x324>)
 8002064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002066:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800206e:	4a61      	ldr	r2, [pc, #388]	@ (80021f4 <HAL_GPIO_Init+0x328>)
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	089b      	lsrs	r3, r3, #2
 8002074:	3302      	adds	r3, #2
 8002076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800207a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	220f      	movs	r2, #15
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43db      	mvns	r3, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4013      	ands	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a58      	ldr	r2, [pc, #352]	@ (80021f8 <HAL_GPIO_Init+0x32c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d037      	beq.n	800210a <HAL_GPIO_Init+0x23e>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a57      	ldr	r2, [pc, #348]	@ (80021fc <HAL_GPIO_Init+0x330>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d031      	beq.n	8002106 <HAL_GPIO_Init+0x23a>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a56      	ldr	r2, [pc, #344]	@ (8002200 <HAL_GPIO_Init+0x334>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d02b      	beq.n	8002102 <HAL_GPIO_Init+0x236>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a55      	ldr	r2, [pc, #340]	@ (8002204 <HAL_GPIO_Init+0x338>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d025      	beq.n	80020fe <HAL_GPIO_Init+0x232>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a54      	ldr	r2, [pc, #336]	@ (8002208 <HAL_GPIO_Init+0x33c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d01f      	beq.n	80020fa <HAL_GPIO_Init+0x22e>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a53      	ldr	r2, [pc, #332]	@ (800220c <HAL_GPIO_Init+0x340>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d019      	beq.n	80020f6 <HAL_GPIO_Init+0x22a>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a52      	ldr	r2, [pc, #328]	@ (8002210 <HAL_GPIO_Init+0x344>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d013      	beq.n	80020f2 <HAL_GPIO_Init+0x226>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a51      	ldr	r2, [pc, #324]	@ (8002214 <HAL_GPIO_Init+0x348>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d00d      	beq.n	80020ee <HAL_GPIO_Init+0x222>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a50      	ldr	r2, [pc, #320]	@ (8002218 <HAL_GPIO_Init+0x34c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d007      	beq.n	80020ea <HAL_GPIO_Init+0x21e>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a4f      	ldr	r2, [pc, #316]	@ (800221c <HAL_GPIO_Init+0x350>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d101      	bne.n	80020e6 <HAL_GPIO_Init+0x21a>
 80020e2:	2309      	movs	r3, #9
 80020e4:	e012      	b.n	800210c <HAL_GPIO_Init+0x240>
 80020e6:	230a      	movs	r3, #10
 80020e8:	e010      	b.n	800210c <HAL_GPIO_Init+0x240>
 80020ea:	2308      	movs	r3, #8
 80020ec:	e00e      	b.n	800210c <HAL_GPIO_Init+0x240>
 80020ee:	2307      	movs	r3, #7
 80020f0:	e00c      	b.n	800210c <HAL_GPIO_Init+0x240>
 80020f2:	2306      	movs	r3, #6
 80020f4:	e00a      	b.n	800210c <HAL_GPIO_Init+0x240>
 80020f6:	2305      	movs	r3, #5
 80020f8:	e008      	b.n	800210c <HAL_GPIO_Init+0x240>
 80020fa:	2304      	movs	r3, #4
 80020fc:	e006      	b.n	800210c <HAL_GPIO_Init+0x240>
 80020fe:	2303      	movs	r3, #3
 8002100:	e004      	b.n	800210c <HAL_GPIO_Init+0x240>
 8002102:	2302      	movs	r3, #2
 8002104:	e002      	b.n	800210c <HAL_GPIO_Init+0x240>
 8002106:	2301      	movs	r3, #1
 8002108:	e000      	b.n	800210c <HAL_GPIO_Init+0x240>
 800210a:	2300      	movs	r3, #0
 800210c:	69fa      	ldr	r2, [r7, #28]
 800210e:	f002 0203 	and.w	r2, r2, #3
 8002112:	0092      	lsls	r2, r2, #2
 8002114:	4093      	lsls	r3, r2
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4313      	orrs	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800211c:	4935      	ldr	r1, [pc, #212]	@ (80021f4 <HAL_GPIO_Init+0x328>)
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	089b      	lsrs	r3, r3, #2
 8002122:	3302      	adds	r3, #2
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800212a:	4b3d      	ldr	r3, [pc, #244]	@ (8002220 <HAL_GPIO_Init+0x354>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	43db      	mvns	r3, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4013      	ands	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800214e:	4a34      	ldr	r2, [pc, #208]	@ (8002220 <HAL_GPIO_Init+0x354>)
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002154:	4b32      	ldr	r3, [pc, #200]	@ (8002220 <HAL_GPIO_Init+0x354>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	4313      	orrs	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002178:	4a29      	ldr	r2, [pc, #164]	@ (8002220 <HAL_GPIO_Init+0x354>)
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800217e:	4b28      	ldr	r3, [pc, #160]	@ (8002220 <HAL_GPIO_Init+0x354>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	43db      	mvns	r3, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4013      	ands	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	4313      	orrs	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002220 <HAL_GPIO_Init+0x354>)
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002220 <HAL_GPIO_Init+0x354>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	43db      	mvns	r3, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4013      	ands	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d003      	beq.n	80021cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021cc:	4a14      	ldr	r2, [pc, #80]	@ (8002220 <HAL_GPIO_Init+0x354>)
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	3301      	adds	r3, #1
 80021d6:	61fb      	str	r3, [r7, #28]
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	2b0f      	cmp	r3, #15
 80021dc:	f67f ae84 	bls.w	8001ee8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021e0:	bf00      	nop
 80021e2:	bf00      	nop
 80021e4:	3724      	adds	r7, #36	@ 0x24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	40023800 	.word	0x40023800
 80021f4:	40013800 	.word	0x40013800
 80021f8:	40020000 	.word	0x40020000
 80021fc:	40020400 	.word	0x40020400
 8002200:	40020800 	.word	0x40020800
 8002204:	40020c00 	.word	0x40020c00
 8002208:	40021000 	.word	0x40021000
 800220c:	40021400 	.word	0x40021400
 8002210:	40021800 	.word	0x40021800
 8002214:	40021c00 	.word	0x40021c00
 8002218:	40022000 	.word	0x40022000
 800221c:	40022400 	.word	0x40022400
 8002220:	40013c00 	.word	0x40013c00

08002224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	807b      	strh	r3, [r7, #2]
 8002230:	4613      	mov	r3, r2
 8002232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002234:	787b      	ldrb	r3, [r7, #1]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800223a:	887a      	ldrh	r2, [r7, #2]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002240:	e003      	b.n	800224a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002242:	887b      	ldrh	r3, [r7, #2]
 8002244:	041a      	lsls	r2, r3, #16
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	619a      	str	r2, [r3, #24]
}
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b086      	sub	sp, #24
 800225a:	af02      	add	r7, sp, #8
 800225c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e101      	b.n	800246c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d106      	bne.n	8002288 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f006 fdf4 	bl	8008e70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2203      	movs	r2, #3
 800228c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002296:	d102      	bne.n	800229e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f003 fa41 	bl	800572a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6818      	ldr	r0, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	7c1a      	ldrb	r2, [r3, #16]
 80022b0:	f88d 2000 	strb.w	r2, [sp]
 80022b4:	3304      	adds	r3, #4
 80022b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022b8:	f003 f920 	bl	80054fc <USB_CoreInit>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d005      	beq.n	80022ce <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2202      	movs	r2, #2
 80022c6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e0ce      	b.n	800246c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2100      	movs	r1, #0
 80022d4:	4618      	mov	r0, r3
 80022d6:	f003 fa39 	bl	800574c <USB_SetCurrentMode>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d005      	beq.n	80022ec <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2202      	movs	r2, #2
 80022e4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e0bf      	b.n	800246c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ec:	2300      	movs	r3, #0
 80022ee:	73fb      	strb	r3, [r7, #15]
 80022f0:	e04a      	b.n	8002388 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022f2:	7bfa      	ldrb	r2, [r7, #15]
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4413      	add	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	3315      	adds	r3, #21
 8002302:	2201      	movs	r2, #1
 8002304:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002306:	7bfa      	ldrb	r2, [r7, #15]
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	4613      	mov	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	4413      	add	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	440b      	add	r3, r1
 8002314:	3314      	adds	r3, #20
 8002316:	7bfa      	ldrb	r2, [r7, #15]
 8002318:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800231a:	7bfa      	ldrb	r2, [r7, #15]
 800231c:	7bfb      	ldrb	r3, [r7, #15]
 800231e:	b298      	uxth	r0, r3
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4413      	add	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	440b      	add	r3, r1
 800232c:	332e      	adds	r3, #46	@ 0x2e
 800232e:	4602      	mov	r2, r0
 8002330:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002332:	7bfa      	ldrb	r2, [r7, #15]
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	4613      	mov	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	4413      	add	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	440b      	add	r3, r1
 8002340:	3318      	adds	r3, #24
 8002342:	2200      	movs	r2, #0
 8002344:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002346:	7bfa      	ldrb	r2, [r7, #15]
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	4413      	add	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	440b      	add	r3, r1
 8002354:	331c      	adds	r3, #28
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800235a:	7bfa      	ldrb	r2, [r7, #15]
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	4413      	add	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	440b      	add	r3, r1
 8002368:	3320      	adds	r3, #32
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800236e:	7bfa      	ldrb	r2, [r7, #15]
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	4413      	add	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	440b      	add	r3, r1
 800237c:	3324      	adds	r3, #36	@ 0x24
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002382:	7bfb      	ldrb	r3, [r7, #15]
 8002384:	3301      	adds	r3, #1
 8002386:	73fb      	strb	r3, [r7, #15]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	791b      	ldrb	r3, [r3, #4]
 800238c:	7bfa      	ldrb	r2, [r7, #15]
 800238e:	429a      	cmp	r2, r3
 8002390:	d3af      	bcc.n	80022f2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002392:	2300      	movs	r3, #0
 8002394:	73fb      	strb	r3, [r7, #15]
 8002396:	e044      	b.n	8002422 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002398:	7bfa      	ldrb	r2, [r7, #15]
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	4613      	mov	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	4413      	add	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80023aa:	2200      	movs	r2, #0
 80023ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023ae:	7bfa      	ldrb	r2, [r7, #15]
 80023b0:	6879      	ldr	r1, [r7, #4]
 80023b2:	4613      	mov	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	4413      	add	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	440b      	add	r3, r1
 80023bc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80023c0:	7bfa      	ldrb	r2, [r7, #15]
 80023c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023c4:	7bfa      	ldrb	r2, [r7, #15]
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	4613      	mov	r3, r2
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	4413      	add	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80023d6:	2200      	movs	r2, #0
 80023d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023da:	7bfa      	ldrb	r2, [r7, #15]
 80023dc:	6879      	ldr	r1, [r7, #4]
 80023de:	4613      	mov	r3, r2
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	4413      	add	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	440b      	add	r3, r1
 80023e8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023f0:	7bfa      	ldrb	r2, [r7, #15]
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	4613      	mov	r3, r2
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	4413      	add	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002406:	7bfa      	ldrb	r2, [r7, #15]
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	4613      	mov	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	4413      	add	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	440b      	add	r3, r1
 8002414:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800241c:	7bfb      	ldrb	r3, [r7, #15]
 800241e:	3301      	adds	r3, #1
 8002420:	73fb      	strb	r3, [r7, #15]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	791b      	ldrb	r3, [r3, #4]
 8002426:	7bfa      	ldrb	r2, [r7, #15]
 8002428:	429a      	cmp	r2, r3
 800242a:	d3b5      	bcc.n	8002398 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6818      	ldr	r0, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	7c1a      	ldrb	r2, [r3, #16]
 8002434:	f88d 2000 	strb.w	r2, [sp]
 8002438:	3304      	adds	r3, #4
 800243a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800243c:	f003 f9d2 	bl	80057e4 <USB_DevInit>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d005      	beq.n	8002452 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2202      	movs	r2, #2
 800244a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e00c      	b.n	800246c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f004 fa1c 	bl	80068a2 <USB_DevDisconnect>

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002488:	2b01      	cmp	r3, #1
 800248a:	d101      	bne.n	8002490 <HAL_PCD_Start+0x1c>
 800248c:	2302      	movs	r3, #2
 800248e:	e022      	b.n	80024d6 <HAL_PCD_Start+0x62>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d009      	beq.n	80024b8 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d105      	bne.n	80024b8 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024b0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f003 f923 	bl	8005708 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f004 f9ca 	bl	8006860 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024de:	b590      	push	{r4, r7, lr}
 80024e0:	b08d      	sub	sp, #52	@ 0x34
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024ec:	6a3b      	ldr	r3, [r7, #32]
 80024ee:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f004 fa88 	bl	8006a0a <USB_GetMode>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f040 848c 	bne.w	8002e1a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f004 f9ec 	bl	80068e4 <USB_ReadInterrupts>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 8482 	beq.w	8002e18 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	0a1b      	lsrs	r3, r3, #8
 800251e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f004 f9d9 	bl	80068e4 <USB_ReadInterrupts>
 8002532:	4603      	mov	r3, r0
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b02      	cmp	r3, #2
 800253a:	d107      	bne.n	800254c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	695a      	ldr	r2, [r3, #20]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f002 0202 	and.w	r2, r2, #2
 800254a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f004 f9c7 	bl	80068e4 <USB_ReadInterrupts>
 8002556:	4603      	mov	r3, r0
 8002558:	f003 0310 	and.w	r3, r3, #16
 800255c:	2b10      	cmp	r3, #16
 800255e:	d161      	bne.n	8002624 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	699a      	ldr	r2, [r3, #24]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 0210 	bic.w	r2, r2, #16
 800256e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002570:	6a3b      	ldr	r3, [r7, #32]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	f003 020f 	and.w	r2, r3, #15
 800257c:	4613      	mov	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	4413      	add	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	4413      	add	r3, r2
 800258c:	3304      	adds	r3, #4
 800258e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	0c5b      	lsrs	r3, r3, #17
 8002594:	f003 030f 	and.w	r3, r3, #15
 8002598:	2b02      	cmp	r3, #2
 800259a:	d124      	bne.n	80025e6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80025a2:	4013      	ands	r3, r2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d035      	beq.n	8002614 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	091b      	lsrs	r3, r3, #4
 80025b0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	461a      	mov	r2, r3
 80025ba:	6a38      	ldr	r0, [r7, #32]
 80025bc:	f003 fffe 	bl	80065bc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	68da      	ldr	r2, [r3, #12]
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	091b      	lsrs	r3, r3, #4
 80025c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025cc:	441a      	add	r2, r3
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	695a      	ldr	r2, [r3, #20]
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	091b      	lsrs	r3, r3, #4
 80025da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025de:	441a      	add	r2, r3
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	615a      	str	r2, [r3, #20]
 80025e4:	e016      	b.n	8002614 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	0c5b      	lsrs	r3, r3, #17
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	2b06      	cmp	r3, #6
 80025f0:	d110      	bne.n	8002614 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80025f8:	2208      	movs	r2, #8
 80025fa:	4619      	mov	r1, r3
 80025fc:	6a38      	ldr	r0, [r7, #32]
 80025fe:	f003 ffdd 	bl	80065bc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	695a      	ldr	r2, [r3, #20]
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	091b      	lsrs	r3, r3, #4
 800260a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800260e:	441a      	add	r2, r3
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	699a      	ldr	r2, [r3, #24]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0210 	orr.w	r2, r2, #16
 8002622:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f004 f95b 	bl	80068e4 <USB_ReadInterrupts>
 800262e:	4603      	mov	r3, r0
 8002630:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002634:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002638:	f040 80a7 	bne.w	800278a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800263c:	2300      	movs	r3, #0
 800263e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f004 f960 	bl	800690a <USB_ReadDevAllOutEpInterrupt>
 800264a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800264c:	e099      	b.n	8002782 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800264e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b00      	cmp	r3, #0
 8002656:	f000 808e 	beq.w	8002776 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	4611      	mov	r1, r2
 8002664:	4618      	mov	r0, r3
 8002666:	f004 f984 	bl	8006972 <USB_ReadDevOutEPInterrupt>
 800266a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00c      	beq.n	8002690 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002678:	015a      	lsls	r2, r3, #5
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	4413      	add	r3, r2
 800267e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002682:	461a      	mov	r2, r3
 8002684:	2301      	movs	r3, #1
 8002686:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002688:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 fea4 	bl	80033d8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00c      	beq.n	80026b4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800269a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269c:	015a      	lsls	r2, r3, #5
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	4413      	add	r3, r2
 80026a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026a6:	461a      	mov	r2, r3
 80026a8:	2308      	movs	r3, #8
 80026aa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80026ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 ff7a 	bl	80035a8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	f003 0310 	and.w	r3, r3, #16
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d008      	beq.n	80026d0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80026be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c0:	015a      	lsls	r2, r3, #5
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	4413      	add	r3, r2
 80026c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026ca:	461a      	mov	r2, r3
 80026cc:	2310      	movs	r3, #16
 80026ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d030      	beq.n	800273c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026e2:	2b80      	cmp	r3, #128	@ 0x80
 80026e4:	d109      	bne.n	80026fa <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	69fa      	ldr	r2, [r7, #28]
 80026f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80026f4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026f8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80026fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026fc:	4613      	mov	r3, r2
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	4413      	add	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	4413      	add	r3, r2
 800270c:	3304      	adds	r3, #4
 800270e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	78db      	ldrb	r3, [r3, #3]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d108      	bne.n	800272a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	2200      	movs	r2, #0
 800271c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800271e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002720:	b2db      	uxtb	r3, r3
 8002722:	4619      	mov	r1, r3
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f006 fca9 	bl	800907c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800272a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272c:	015a      	lsls	r2, r3, #5
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	4413      	add	r3, r2
 8002732:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002736:	461a      	mov	r2, r3
 8002738:	2302      	movs	r3, #2
 800273a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	f003 0320 	and.w	r3, r3, #32
 8002742:	2b00      	cmp	r3, #0
 8002744:	d008      	beq.n	8002758 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002748:	015a      	lsls	r2, r3, #5
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	4413      	add	r3, r2
 800274e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002752:	461a      	mov	r2, r3
 8002754:	2320      	movs	r3, #32
 8002756:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d009      	beq.n	8002776 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002764:	015a      	lsls	r2, r3, #5
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	4413      	add	r3, r2
 800276a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800276e:	461a      	mov	r2, r3
 8002770:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002774:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002778:	3301      	adds	r3, #1
 800277a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800277c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800277e:	085b      	lsrs	r3, r3, #1
 8002780:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002784:	2b00      	cmp	r3, #0
 8002786:	f47f af62 	bne.w	800264e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f004 f8a8 	bl	80068e4 <USB_ReadInterrupts>
 8002794:	4603      	mov	r3, r0
 8002796:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800279a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800279e:	f040 80db 	bne.w	8002958 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f004 f8c9 	bl	800693e <USB_ReadDevAllInEpInterrupt>
 80027ac:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80027b2:	e0cd      	b.n	8002950 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80027b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 80c2 	beq.w	8002944 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	4611      	mov	r1, r2
 80027ca:	4618      	mov	r0, r3
 80027cc:	f004 f8ef 	bl	80069ae <USB_ReadDevInEPInterrupt>
 80027d0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d057      	beq.n	800288c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80027dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	2201      	movs	r2, #1
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	43db      	mvns	r3, r3
 80027f6:	69f9      	ldr	r1, [r7, #28]
 80027f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80027fc:	4013      	ands	r3, r2
 80027fe:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002802:	015a      	lsls	r2, r3, #5
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	4413      	add	r3, r2
 8002808:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800280c:	461a      	mov	r2, r3
 800280e:	2301      	movs	r3, #1
 8002810:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	799b      	ldrb	r3, [r3, #6]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d132      	bne.n	8002880 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800281e:	4613      	mov	r3, r2
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	4413      	add	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	440b      	add	r3, r1
 8002828:	3320      	adds	r3, #32
 800282a:	6819      	ldr	r1, [r3, #0]
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002830:	4613      	mov	r3, r2
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	4413      	add	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4403      	add	r3, r0
 800283a:	331c      	adds	r3, #28
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4419      	add	r1, r3
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002844:	4613      	mov	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	4413      	add	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4403      	add	r3, r0
 800284e:	3320      	adds	r3, #32
 8002850:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002854:	2b00      	cmp	r3, #0
 8002856:	d113      	bne.n	8002880 <HAL_PCD_IRQHandler+0x3a2>
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800285c:	4613      	mov	r3, r2
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	4413      	add	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	3324      	adds	r3, #36	@ 0x24
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d108      	bne.n	8002880 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6818      	ldr	r0, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002878:	461a      	mov	r2, r3
 800287a:	2101      	movs	r1, #1
 800287c:	f004 f8f6 	bl	8006a6c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002882:	b2db      	uxtb	r3, r3
 8002884:	4619      	mov	r1, r3
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f006 fb73 	bl	8008f72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	f003 0308 	and.w	r3, r3, #8
 8002892:	2b00      	cmp	r3, #0
 8002894:	d008      	beq.n	80028a8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002898:	015a      	lsls	r2, r3, #5
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	4413      	add	r3, r2
 800289e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028a2:	461a      	mov	r2, r3
 80028a4:	2308      	movs	r3, #8
 80028a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	f003 0310 	and.w	r3, r3, #16
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d008      	beq.n	80028c4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80028b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b4:	015a      	lsls	r2, r3, #5
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	4413      	add	r3, r2
 80028ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028be:	461a      	mov	r2, r3
 80028c0:	2310      	movs	r3, #16
 80028c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d008      	beq.n	80028e0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80028ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d0:	015a      	lsls	r2, r3, #5
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	4413      	add	r3, r2
 80028d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028da:	461a      	mov	r2, r3
 80028dc:	2340      	movs	r3, #64	@ 0x40
 80028de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d023      	beq.n	8002932 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80028ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028ec:	6a38      	ldr	r0, [r7, #32]
 80028ee:	f003 f8dd 	bl	8005aac <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80028f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028f4:	4613      	mov	r3, r2
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	4413      	add	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	3310      	adds	r3, #16
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	4413      	add	r3, r2
 8002902:	3304      	adds	r3, #4
 8002904:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	78db      	ldrb	r3, [r3, #3]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d108      	bne.n	8002920 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	2200      	movs	r2, #0
 8002912:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002916:	b2db      	uxtb	r3, r3
 8002918:	4619      	mov	r1, r3
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f006 fbc0 	bl	80090a0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	4413      	add	r3, r2
 8002928:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800292c:	461a      	mov	r2, r3
 800292e:	2302      	movs	r3, #2
 8002930:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800293c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 fcbd 	bl	80032be <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002946:	3301      	adds	r3, #1
 8002948:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800294a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800294c:	085b      	lsrs	r3, r3, #1
 800294e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002952:	2b00      	cmp	r3, #0
 8002954:	f47f af2e 	bne.w	80027b4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f003 ffc1 	bl	80068e4 <USB_ReadInterrupts>
 8002962:	4603      	mov	r3, r0
 8002964:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002968:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800296c:	d122      	bne.n	80029b4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	69fa      	ldr	r2, [r7, #28]
 8002978:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800297c:	f023 0301 	bic.w	r3, r3, #1
 8002980:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002988:	2b01      	cmp	r3, #1
 800298a:	d108      	bne.n	800299e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002994:	2100      	movs	r1, #0
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 fea4 	bl	80036e4 <HAL_PCDEx_LPM_Callback>
 800299c:	e002      	b.n	80029a4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f006 fb5e 	bl	8009060 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	695a      	ldr	r2, [r3, #20]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80029b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f003 ff93 	bl	80068e4 <USB_ReadInterrupts>
 80029be:	4603      	mov	r3, r0
 80029c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029c8:	d112      	bne.n	80029f0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d102      	bne.n	80029e0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f006 fb1a 	bl	8009014 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	695a      	ldr	r2, [r3, #20]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80029ee:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f003 ff75 	bl	80068e4 <USB_ReadInterrupts>
 80029fa:	4603      	mov	r3, r0
 80029fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a04:	f040 80b7 	bne.w	8002b76 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	69fa      	ldr	r2, [r7, #28]
 8002a12:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a16:	f023 0301 	bic.w	r3, r3, #1
 8002a1a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2110      	movs	r1, #16
 8002a22:	4618      	mov	r0, r3
 8002a24:	f003 f842 	bl	8005aac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a28:	2300      	movs	r3, #0
 8002a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a2c:	e046      	b.n	8002abc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a30:	015a      	lsls	r2, r3, #5
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	4413      	add	r3, r2
 8002a36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002a40:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a44:	015a      	lsls	r2, r3, #5
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	4413      	add	r3, r2
 8002a4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a52:	0151      	lsls	r1, r2, #5
 8002a54:	69fa      	ldr	r2, [r7, #28]
 8002a56:	440a      	add	r2, r1
 8002a58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002a5c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002a60:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a64:	015a      	lsls	r2, r3, #5
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	4413      	add	r3, r2
 8002a6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a6e:	461a      	mov	r2, r3
 8002a70:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002a74:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a78:	015a      	lsls	r2, r3, #5
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a86:	0151      	lsls	r1, r2, #5
 8002a88:	69fa      	ldr	r2, [r7, #28]
 8002a8a:	440a      	add	r2, r1
 8002a8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002a90:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002a94:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a98:	015a      	lsls	r2, r3, #5
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002aa6:	0151      	lsls	r1, r2, #5
 8002aa8:	69fa      	ldr	r2, [r7, #28]
 8002aaa:	440a      	add	r2, r1
 8002aac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002ab0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002ab4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ab8:	3301      	adds	r3, #1
 8002aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	791b      	ldrb	r3, [r3, #4]
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d3b2      	bcc.n	8002a2e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	69fa      	ldr	r2, [r7, #28]
 8002ad2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ad6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002ada:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	7bdb      	ldrb	r3, [r3, #15]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d016      	beq.n	8002b12 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002aee:	69fa      	ldr	r2, [r7, #28]
 8002af0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002af4:	f043 030b 	orr.w	r3, r3, #11
 8002af8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b04:	69fa      	ldr	r2, [r7, #28]
 8002b06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b0a:	f043 030b 	orr.w	r3, r3, #11
 8002b0e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b10:	e015      	b.n	8002b3e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	69fa      	ldr	r2, [r7, #28]
 8002b1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b20:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002b24:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002b28:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	69fa      	ldr	r2, [r7, #28]
 8002b34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b38:	f043 030b 	orr.w	r3, r3, #11
 8002b3c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	69fa      	ldr	r2, [r7, #28]
 8002b48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b4c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002b50:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6818      	ldr	r0, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b60:	461a      	mov	r2, r3
 8002b62:	f003 ff83 	bl	8006a6c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	695a      	ldr	r2, [r3, #20]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002b74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f003 feb2 	bl	80068e4 <USB_ReadInterrupts>
 8002b80:	4603      	mov	r3, r0
 8002b82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b8a:	d123      	bne.n	8002bd4 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f003 ff48 	bl	8006a26 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f002 ffff 	bl	8005b9e <USB_GetDevSpeed>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681c      	ldr	r4, [r3, #0]
 8002bac:	f001 fa0a 	bl	8003fc4 <HAL_RCC_GetHCLKFreq>
 8002bb0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	4620      	mov	r0, r4
 8002bba:	f002 fd03 	bl	80055c4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f006 f9ff 	bl	8008fc2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	695a      	ldr	r2, [r3, #20]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002bd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f003 fe83 	bl	80068e4 <USB_ReadInterrupts>
 8002bde:	4603      	mov	r3, r0
 8002be0:	f003 0308 	and.w	r3, r3, #8
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d10a      	bne.n	8002bfe <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f006 f9dc 	bl	8008fa6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	695a      	ldr	r2, [r3, #20]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f002 0208 	and.w	r2, r2, #8
 8002bfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f003 fe6e 	bl	80068e4 <USB_ReadInterrupts>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c0e:	2b80      	cmp	r3, #128	@ 0x80
 8002c10:	d123      	bne.n	8002c5a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c1a:	6a3b      	ldr	r3, [r7, #32]
 8002c1c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c1e:	2301      	movs	r3, #1
 8002c20:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c22:	e014      	b.n	8002c4e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c28:	4613      	mov	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d105      	bne.n	8002c48 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	4619      	mov	r1, r3
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 fb0a 	bl	800325c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	791b      	ldrb	r3, [r3, #4]
 8002c52:	461a      	mov	r2, r3
 8002c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d3e4      	bcc.n	8002c24 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f003 fe40 	bl	80068e4 <USB_ReadInterrupts>
 8002c64:	4603      	mov	r3, r0
 8002c66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c6e:	d13c      	bne.n	8002cea <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c70:	2301      	movs	r3, #1
 8002c72:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c74:	e02b      	b.n	8002cce <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c78:	015a      	lsls	r2, r3, #5
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	4413      	add	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	440b      	add	r3, r1
 8002c94:	3318      	adds	r3, #24
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d115      	bne.n	8002cc8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002c9c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	da12      	bge.n	8002cc8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	4413      	add	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	440b      	add	r3, r1
 8002cb0:	3317      	adds	r3, #23
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 faca 	bl	800325c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cca:	3301      	adds	r3, #1
 8002ccc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	791b      	ldrb	r3, [r3, #4]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d3cd      	bcc.n	8002c76 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	695a      	ldr	r2, [r3, #20]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002ce8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f003 fdf8 	bl	80068e4 <USB_ReadInterrupts>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cfa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002cfe:	d156      	bne.n	8002dae <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d00:	2301      	movs	r3, #1
 8002d02:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d04:	e045      	b.n	8002d92 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d08:	015a      	lsls	r2, r3, #5
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	4413      	add	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	440b      	add	r3, r1
 8002d24:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d12e      	bne.n	8002d8c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d2e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	da2b      	bge.n	8002d8c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002d40:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d121      	bne.n	8002d8c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	4413      	add	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10a      	bne.n	8002d8c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	69fa      	ldr	r2, [r7, #28]
 8002d80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d84:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d88:	6053      	str	r3, [r2, #4]
            break;
 8002d8a:	e008      	b.n	8002d9e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8e:	3301      	adds	r3, #1
 8002d90:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	791b      	ldrb	r3, [r3, #4]
 8002d96:	461a      	mov	r2, r3
 8002d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d3b3      	bcc.n	8002d06 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	695a      	ldr	r2, [r3, #20]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002dac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f003 fd96 	bl	80068e4 <USB_ReadInterrupts>
 8002db8:	4603      	mov	r3, r0
 8002dba:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dc2:	d10a      	bne.n	8002dda <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f006 f97d 	bl	80090c4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	695a      	ldr	r2, [r3, #20]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002dd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f003 fd80 	bl	80068e4 <USB_ReadInterrupts>
 8002de4:	4603      	mov	r3, r0
 8002de6:	f003 0304 	and.w	r3, r3, #4
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d115      	bne.n	8002e1a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d002      	beq.n	8002e06 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f006 f96d 	bl	80090e0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6859      	ldr	r1, [r3, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	605a      	str	r2, [r3, #4]
 8002e16:	e000      	b.n	8002e1a <HAL_PCD_IRQHandler+0x93c>
      return;
 8002e18:	bf00      	nop
    }
  }
}
 8002e1a:	3734      	adds	r7, #52	@ 0x34
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd90      	pop	{r4, r7, pc}

08002e20 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	460b      	mov	r3, r1
 8002e2a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d101      	bne.n	8002e3a <HAL_PCD_SetAddress+0x1a>
 8002e36:	2302      	movs	r3, #2
 8002e38:	e012      	b.n	8002e60 <HAL_PCD_SetAddress+0x40>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	78fa      	ldrb	r2, [r7, #3]
 8002e46:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	78fa      	ldrb	r2, [r7, #3]
 8002e4e:	4611      	mov	r1, r2
 8002e50:	4618      	mov	r0, r3
 8002e52:	f003 fcdf 	bl	8006814 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	4608      	mov	r0, r1
 8002e72:	4611      	mov	r1, r2
 8002e74:	461a      	mov	r2, r3
 8002e76:	4603      	mov	r3, r0
 8002e78:	70fb      	strb	r3, [r7, #3]
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	803b      	strh	r3, [r7, #0]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002e82:	2300      	movs	r3, #0
 8002e84:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	da0f      	bge.n	8002eae <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e8e:	78fb      	ldrb	r3, [r7, #3]
 8002e90:	f003 020f 	and.w	r2, r3, #15
 8002e94:	4613      	mov	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	4413      	add	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	3310      	adds	r3, #16
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	3304      	adds	r3, #4
 8002ea4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	705a      	strb	r2, [r3, #1]
 8002eac:	e00f      	b.n	8002ece <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eae:	78fb      	ldrb	r3, [r7, #3]
 8002eb0:	f003 020f 	and.w	r2, r3, #15
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	4413      	add	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	3304      	adds	r3, #4
 8002ec6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ece:	78fb      	ldrb	r3, [r7, #3]
 8002ed0:	f003 030f 	and.w	r3, r3, #15
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002eda:	883b      	ldrh	r3, [r7, #0]
 8002edc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	78ba      	ldrb	r2, [r7, #2]
 8002ee8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	785b      	ldrb	r3, [r3, #1]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d004      	beq.n	8002efc <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002efc:	78bb      	ldrb	r3, [r7, #2]
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d102      	bne.n	8002f08 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d101      	bne.n	8002f16 <HAL_PCD_EP_Open+0xae>
 8002f12:	2302      	movs	r3, #2
 8002f14:	e00e      	b.n	8002f34 <HAL_PCD_EP_Open+0xcc>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68f9      	ldr	r1, [r7, #12]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f002 fe5f 	bl	8005be8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002f32:	7afb      	ldrb	r3, [r7, #11]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	460b      	mov	r3, r1
 8002f46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	da0f      	bge.n	8002f70 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f50:	78fb      	ldrb	r3, [r7, #3]
 8002f52:	f003 020f 	and.w	r2, r3, #15
 8002f56:	4613      	mov	r3, r2
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	4413      	add	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	3310      	adds	r3, #16
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	4413      	add	r3, r2
 8002f64:	3304      	adds	r3, #4
 8002f66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	705a      	strb	r2, [r3, #1]
 8002f6e:	e00f      	b.n	8002f90 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f70:	78fb      	ldrb	r3, [r7, #3]
 8002f72:	f003 020f 	and.w	r2, r3, #15
 8002f76:	4613      	mov	r3, r2
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	4413      	add	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	4413      	add	r3, r2
 8002f86:	3304      	adds	r3, #4
 8002f88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f90:	78fb      	ldrb	r3, [r7, #3]
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d101      	bne.n	8002faa <HAL_PCD_EP_Close+0x6e>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	e00e      	b.n	8002fc8 <HAL_PCD_EP_Close+0x8c>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68f9      	ldr	r1, [r7, #12]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f002 fe9d 	bl	8005cf8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	607a      	str	r2, [r7, #4]
 8002fda:	603b      	str	r3, [r7, #0]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fe0:	7afb      	ldrb	r3, [r7, #11]
 8002fe2:	f003 020f 	and.w	r2, r3, #15
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	4413      	add	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	3304      	adds	r3, #4
 8002ff8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	2200      	movs	r2, #0
 800300a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	2200      	movs	r2, #0
 8003010:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003012:	7afb      	ldrb	r3, [r7, #11]
 8003014:	f003 030f 	and.w	r3, r3, #15
 8003018:	b2da      	uxtb	r2, r3
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	799b      	ldrb	r3, [r3, #6]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d102      	bne.n	800302c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6818      	ldr	r0, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	799b      	ldrb	r3, [r3, #6]
 8003034:	461a      	mov	r2, r3
 8003036:	6979      	ldr	r1, [r7, #20]
 8003038:	f002 ff3a 	bl	8005eb0 <USB_EPStartXfer>

  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3718      	adds	r7, #24
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
 800304e:	460b      	mov	r3, r1
 8003050:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003052:	78fb      	ldrb	r3, [r7, #3]
 8003054:	f003 020f 	and.w	r2, r3, #15
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	4613      	mov	r3, r2
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	4413      	add	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	440b      	add	r3, r1
 8003064:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003068:	681b      	ldr	r3, [r3, #0]
}
 800306a:	4618      	mov	r0, r3
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b086      	sub	sp, #24
 800307a:	af00      	add	r7, sp, #0
 800307c:	60f8      	str	r0, [r7, #12]
 800307e:	607a      	str	r2, [r7, #4]
 8003080:	603b      	str	r3, [r7, #0]
 8003082:	460b      	mov	r3, r1
 8003084:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003086:	7afb      	ldrb	r3, [r7, #11]
 8003088:	f003 020f 	and.w	r2, r3, #15
 800308c:	4613      	mov	r3, r2
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	4413      	add	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	3310      	adds	r3, #16
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	4413      	add	r3, r2
 800309a:	3304      	adds	r3, #4
 800309c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2200      	movs	r2, #0
 80030ae:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	2201      	movs	r2, #1
 80030b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030b6:	7afb      	ldrb	r3, [r7, #11]
 80030b8:	f003 030f 	and.w	r3, r3, #15
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	799b      	ldrb	r3, [r3, #6]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d102      	bne.n	80030d0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6818      	ldr	r0, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	799b      	ldrb	r3, [r3, #6]
 80030d8:	461a      	mov	r2, r3
 80030da:	6979      	ldr	r1, [r7, #20]
 80030dc:	f002 fee8 	bl	8005eb0 <USB_EPStartXfer>

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b084      	sub	sp, #16
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
 80030f2:	460b      	mov	r3, r1
 80030f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80030f6:	78fb      	ldrb	r3, [r7, #3]
 80030f8:	f003 030f 	and.w	r3, r3, #15
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	7912      	ldrb	r2, [r2, #4]
 8003100:	4293      	cmp	r3, r2
 8003102:	d901      	bls.n	8003108 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e04f      	b.n	80031a8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003108:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800310c:	2b00      	cmp	r3, #0
 800310e:	da0f      	bge.n	8003130 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003110:	78fb      	ldrb	r3, [r7, #3]
 8003112:	f003 020f 	and.w	r2, r3, #15
 8003116:	4613      	mov	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	4413      	add	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	3310      	adds	r3, #16
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	4413      	add	r3, r2
 8003124:	3304      	adds	r3, #4
 8003126:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2201      	movs	r2, #1
 800312c:	705a      	strb	r2, [r3, #1]
 800312e:	e00d      	b.n	800314c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003130:	78fa      	ldrb	r2, [r7, #3]
 8003132:	4613      	mov	r3, r2
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	4413      	add	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	4413      	add	r3, r2
 8003142:	3304      	adds	r3, #4
 8003144:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2201      	movs	r2, #1
 8003150:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003152:	78fb      	ldrb	r3, [r7, #3]
 8003154:	f003 030f 	and.w	r3, r3, #15
 8003158:	b2da      	uxtb	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003164:	2b01      	cmp	r3, #1
 8003166:	d101      	bne.n	800316c <HAL_PCD_EP_SetStall+0x82>
 8003168:	2302      	movs	r3, #2
 800316a:	e01d      	b.n	80031a8 <HAL_PCD_EP_SetStall+0xbe>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68f9      	ldr	r1, [r7, #12]
 800317a:	4618      	mov	r0, r3
 800317c:	f003 fa76 	bl	800666c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003180:	78fb      	ldrb	r3, [r7, #3]
 8003182:	f003 030f 	and.w	r3, r3, #15
 8003186:	2b00      	cmp	r3, #0
 8003188:	d109      	bne.n	800319e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6818      	ldr	r0, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	7999      	ldrb	r1, [r3, #6]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003198:	461a      	mov	r2, r3
 800319a:	f003 fc67 	bl	8006a6c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	460b      	mov	r3, r1
 80031ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80031bc:	78fb      	ldrb	r3, [r7, #3]
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	7912      	ldrb	r2, [r2, #4]
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d901      	bls.n	80031ce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e042      	b.n	8003254 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	da0f      	bge.n	80031f6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031d6:	78fb      	ldrb	r3, [r7, #3]
 80031d8:	f003 020f 	and.w	r2, r3, #15
 80031dc:	4613      	mov	r3, r2
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	4413      	add	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	3310      	adds	r3, #16
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	4413      	add	r3, r2
 80031ea:	3304      	adds	r3, #4
 80031ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2201      	movs	r2, #1
 80031f2:	705a      	strb	r2, [r3, #1]
 80031f4:	e00f      	b.n	8003216 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031f6:	78fb      	ldrb	r3, [r7, #3]
 80031f8:	f003 020f 	and.w	r2, r3, #15
 80031fc:	4613      	mov	r3, r2
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	4413      	add	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	4413      	add	r3, r2
 800320c:	3304      	adds	r3, #4
 800320e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800321c:	78fb      	ldrb	r3, [r7, #3]
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	b2da      	uxtb	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HAL_PCD_EP_ClrStall+0x86>
 8003232:	2302      	movs	r3, #2
 8003234:	e00e      	b.n	8003254 <HAL_PCD_EP_ClrStall+0xa4>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68f9      	ldr	r1, [r7, #12]
 8003244:	4618      	mov	r0, r3
 8003246:	f003 fa7f 	bl	8006748 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	460b      	mov	r3, r1
 8003266:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003268:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800326c:	2b00      	cmp	r3, #0
 800326e:	da0c      	bge.n	800328a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003270:	78fb      	ldrb	r3, [r7, #3]
 8003272:	f003 020f 	and.w	r2, r3, #15
 8003276:	4613      	mov	r3, r2
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	4413      	add	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	3310      	adds	r3, #16
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	4413      	add	r3, r2
 8003284:	3304      	adds	r3, #4
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	e00c      	b.n	80032a4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800328a:	78fb      	ldrb	r3, [r7, #3]
 800328c:	f003 020f 	and.w	r2, r3, #15
 8003290:	4613      	mov	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	4413      	add	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	4413      	add	r3, r2
 80032a0:	3304      	adds	r3, #4
 80032a2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68f9      	ldr	r1, [r7, #12]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f003 f89e 	bl	80063ec <USB_EPStopXfer>
 80032b0:	4603      	mov	r3, r0
 80032b2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80032b4:	7afb      	ldrb	r3, [r7, #11]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b08a      	sub	sp, #40	@ 0x28
 80032c2:	af02      	add	r7, sp, #8
 80032c4:	6078      	str	r0, [r7, #4]
 80032c6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	4613      	mov	r3, r2
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	4413      	add	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	3310      	adds	r3, #16
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	4413      	add	r3, r2
 80032e2:	3304      	adds	r3, #4
 80032e4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	695a      	ldr	r2, [r3, #20]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d901      	bls.n	80032f6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e06b      	b.n	80033ce <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	691a      	ldr	r2, [r3, #16]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	69fa      	ldr	r2, [r7, #28]
 8003308:	429a      	cmp	r2, r3
 800330a:	d902      	bls.n	8003312 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	3303      	adds	r3, #3
 8003316:	089b      	lsrs	r3, r3, #2
 8003318:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800331a:	e02a      	b.n	8003372 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	691a      	ldr	r2, [r3, #16]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	69fa      	ldr	r2, [r7, #28]
 800332e:	429a      	cmp	r2, r3
 8003330:	d902      	bls.n	8003338 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	3303      	adds	r3, #3
 800333c:	089b      	lsrs	r3, r3, #2
 800333e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	68d9      	ldr	r1, [r3, #12]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	b2da      	uxtb	r2, r3
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	4603      	mov	r3, r0
 8003354:	6978      	ldr	r0, [r7, #20]
 8003356:	f003 f8f3 	bl	8006540 <USB_WritePacket>

    ep->xfer_buff  += len;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	68da      	ldr	r2, [r3, #12]
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	441a      	add	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	695a      	ldr	r2, [r3, #20]
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	441a      	add	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	015a      	lsls	r2, r3, #5
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	4413      	add	r3, r2
 800337a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	429a      	cmp	r2, r3
 8003386:	d809      	bhi.n	800339c <PCD_WriteEmptyTxFifo+0xde>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	695a      	ldr	r2, [r3, #20]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003390:	429a      	cmp	r2, r3
 8003392:	d203      	bcs.n	800339c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1bf      	bne.n	800331c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	691a      	ldr	r2, [r3, #16]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d811      	bhi.n	80033cc <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	2201      	movs	r2, #1
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	43db      	mvns	r3, r3
 80033c2:	6939      	ldr	r1, [r7, #16]
 80033c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80033c8:	4013      	ands	r3, r2
 80033ca:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3720      	adds	r7, #32
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
	...

080033d8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b088      	sub	sp, #32
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	333c      	adds	r3, #60	@ 0x3c
 80033f0:	3304      	adds	r3, #4
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	015a      	lsls	r2, r3, #5
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	4413      	add	r3, r2
 80033fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	799b      	ldrb	r3, [r3, #6]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d17b      	bne.n	8003506 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	f003 0308 	and.w	r3, r3, #8
 8003414:	2b00      	cmp	r3, #0
 8003416:	d015      	beq.n	8003444 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	4a61      	ldr	r2, [pc, #388]	@ (80035a0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800341c:	4293      	cmp	r3, r2
 800341e:	f240 80b9 	bls.w	8003594 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 80b3 	beq.w	8003594 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	015a      	lsls	r2, r3, #5
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	4413      	add	r3, r2
 8003436:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800343a:	461a      	mov	r2, r3
 800343c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003440:	6093      	str	r3, [r2, #8]
 8003442:	e0a7      	b.n	8003594 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	f003 0320 	and.w	r3, r3, #32
 800344a:	2b00      	cmp	r3, #0
 800344c:	d009      	beq.n	8003462 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	015a      	lsls	r2, r3, #5
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	4413      	add	r3, r2
 8003456:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800345a:	461a      	mov	r2, r3
 800345c:	2320      	movs	r3, #32
 800345e:	6093      	str	r3, [r2, #8]
 8003460:	e098      	b.n	8003594 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003468:	2b00      	cmp	r3, #0
 800346a:	f040 8093 	bne.w	8003594 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	4a4b      	ldr	r2, [pc, #300]	@ (80035a0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d90f      	bls.n	8003496 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00a      	beq.n	8003496 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	015a      	lsls	r2, r3, #5
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	4413      	add	r3, r2
 8003488:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800348c:	461a      	mov	r2, r3
 800348e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003492:	6093      	str	r3, [r2, #8]
 8003494:	e07e      	b.n	8003594 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	4613      	mov	r3, r2
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	4413      	add	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	4413      	add	r3, r2
 80034a8:	3304      	adds	r3, #4
 80034aa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6a1a      	ldr	r2, [r3, #32]
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	0159      	lsls	r1, r3, #5
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	440b      	add	r3, r1
 80034b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034c2:	1ad2      	subs	r2, r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d114      	bne.n	80034f8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d109      	bne.n	80034ea <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6818      	ldr	r0, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80034e0:	461a      	mov	r2, r3
 80034e2:	2101      	movs	r1, #1
 80034e4:	f003 fac2 	bl	8006a6c <USB_EP0_OutStart>
 80034e8:	e006      	b.n	80034f8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	68da      	ldr	r2, [r3, #12]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	441a      	add	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	4619      	mov	r1, r3
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f005 fd1c 	bl	8008f3c <HAL_PCD_DataOutStageCallback>
 8003504:	e046      	b.n	8003594 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	4a26      	ldr	r2, [pc, #152]	@ (80035a4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d124      	bne.n	8003558 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00a      	beq.n	800352e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	015a      	lsls	r2, r3, #5
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	4413      	add	r3, r2
 8003520:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003524:	461a      	mov	r2, r3
 8003526:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800352a:	6093      	str	r3, [r2, #8]
 800352c:	e032      	b.n	8003594 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	f003 0320 	and.w	r3, r3, #32
 8003534:	2b00      	cmp	r3, #0
 8003536:	d008      	beq.n	800354a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	015a      	lsls	r2, r3, #5
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	4413      	add	r3, r2
 8003540:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003544:	461a      	mov	r2, r3
 8003546:	2320      	movs	r3, #32
 8003548:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	b2db      	uxtb	r3, r3
 800354e:	4619      	mov	r1, r3
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f005 fcf3 	bl	8008f3c <HAL_PCD_DataOutStageCallback>
 8003556:	e01d      	b.n	8003594 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d114      	bne.n	8003588 <PCD_EP_OutXfrComplete_int+0x1b0>
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	4613      	mov	r3, r2
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	4413      	add	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	440b      	add	r3, r1
 800356c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d108      	bne.n	8003588 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6818      	ldr	r0, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003580:	461a      	mov	r2, r3
 8003582:	2100      	movs	r1, #0
 8003584:	f003 fa72 	bl	8006a6c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	b2db      	uxtb	r3, r3
 800358c:	4619      	mov	r1, r3
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f005 fcd4 	bl	8008f3c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3720      	adds	r7, #32
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	4f54300a 	.word	0x4f54300a
 80035a4:	4f54310a 	.word	0x4f54310a

080035a8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	333c      	adds	r3, #60	@ 0x3c
 80035c0:	3304      	adds	r3, #4
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	015a      	lsls	r2, r3, #5
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	4413      	add	r3, r2
 80035ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	4a15      	ldr	r2, [pc, #84]	@ (8003630 <PCD_EP_OutSetupPacket_int+0x88>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d90e      	bls.n	80035fc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d009      	beq.n	80035fc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	015a      	lsls	r2, r3, #5
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035f4:	461a      	mov	r2, r3
 80035f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035fa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f005 fc8b 	bl	8008f18 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	4a0a      	ldr	r2, [pc, #40]	@ (8003630 <PCD_EP_OutSetupPacket_int+0x88>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d90c      	bls.n	8003624 <PCD_EP_OutSetupPacket_int+0x7c>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	799b      	ldrb	r3, [r3, #6]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d108      	bne.n	8003624 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6818      	ldr	r0, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800361c:	461a      	mov	r2, r3
 800361e:	2101      	movs	r1, #1
 8003620:	f003 fa24 	bl	8006a6c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	4f54300a 	.word	0x4f54300a

08003634 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	460b      	mov	r3, r1
 800363e:	70fb      	strb	r3, [r7, #3]
 8003640:	4613      	mov	r3, r2
 8003642:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800364c:	78fb      	ldrb	r3, [r7, #3]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d107      	bne.n	8003662 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003652:	883b      	ldrh	r3, [r7, #0]
 8003654:	0419      	lsls	r1, r3, #16
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	430a      	orrs	r2, r1
 800365e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003660:	e028      	b.n	80036b4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003668:	0c1b      	lsrs	r3, r3, #16
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	4413      	add	r3, r2
 800366e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003670:	2300      	movs	r3, #0
 8003672:	73fb      	strb	r3, [r7, #15]
 8003674:	e00d      	b.n	8003692 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	7bfb      	ldrb	r3, [r7, #15]
 800367c:	3340      	adds	r3, #64	@ 0x40
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4413      	add	r3, r2
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	0c1b      	lsrs	r3, r3, #16
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	4413      	add	r3, r2
 800368a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800368c:	7bfb      	ldrb	r3, [r7, #15]
 800368e:	3301      	adds	r3, #1
 8003690:	73fb      	strb	r3, [r7, #15]
 8003692:	7bfa      	ldrb	r2, [r7, #15]
 8003694:	78fb      	ldrb	r3, [r7, #3]
 8003696:	3b01      	subs	r3, #1
 8003698:	429a      	cmp	r2, r3
 800369a:	d3ec      	bcc.n	8003676 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800369c:	883b      	ldrh	r3, [r7, #0]
 800369e:	0418      	lsls	r0, r3, #16
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6819      	ldr	r1, [r3, #0]
 80036a4:	78fb      	ldrb	r3, [r7, #3]
 80036a6:	3b01      	subs	r3, #1
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	4302      	orrs	r2, r0
 80036ac:	3340      	adds	r3, #64	@ 0x40
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80036c2:	b480      	push	{r7}
 80036c4:	b083      	sub	sp, #12
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
 80036ca:	460b      	mov	r3, r1
 80036cc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	887a      	ldrh	r2, [r7, #2]
 80036d4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	460b      	mov	r3, r1
 80036ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e267      	b.n	8003bde <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d075      	beq.n	8003806 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800371a:	4b88      	ldr	r3, [pc, #544]	@ (800393c <HAL_RCC_OscConfig+0x240>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 030c 	and.w	r3, r3, #12
 8003722:	2b04      	cmp	r3, #4
 8003724:	d00c      	beq.n	8003740 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003726:	4b85      	ldr	r3, [pc, #532]	@ (800393c <HAL_RCC_OscConfig+0x240>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800372e:	2b08      	cmp	r3, #8
 8003730:	d112      	bne.n	8003758 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003732:	4b82      	ldr	r3, [pc, #520]	@ (800393c <HAL_RCC_OscConfig+0x240>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800373a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800373e:	d10b      	bne.n	8003758 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003740:	4b7e      	ldr	r3, [pc, #504]	@ (800393c <HAL_RCC_OscConfig+0x240>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d05b      	beq.n	8003804 <HAL_RCC_OscConfig+0x108>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d157      	bne.n	8003804 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e242      	b.n	8003bde <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003760:	d106      	bne.n	8003770 <HAL_RCC_OscConfig+0x74>
 8003762:	4b76      	ldr	r3, [pc, #472]	@ (800393c <HAL_RCC_OscConfig+0x240>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a75      	ldr	r2, [pc, #468]	@ (800393c <HAL_RCC_OscConfig+0x240>)
 8003768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800376c:	6013      	str	r3, [r2, #0]
 800376e:	e01d      	b.n	80037ac <HAL_RCC_OscConfig+0xb0>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003778:	d10c      	bne.n	8003794 <HAL_RCC_OscConfig+0x98>
 800377a:	4b70      	ldr	r3, [pc, #448]	@ (800393c <HAL_RCC_OscConfig+0x240>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a6f      	ldr	r2, [pc, #444]	@ (800393c <HAL_RCC_OscConfig+0x240>)
 8003780:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003784:	6013      	str	r3, [r2, #0]
 8003786:	4b6d      	ldr	r3, [pc, #436]	@ (800393c <HAL_RCC_OscConfig+0x240>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a6c      	ldr	r2, [pc, #432]	@ (800393c <HAL_RCC_OscConfig+0x240>)
 800378c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003790:	6013      	str	r3, [r2, #0]
 8003792:	e00b      	b.n	80037ac <HAL_RCC_OscConfig+0xb0>
 8003794:	4b69      	ldr	r3, [pc, #420]	@ (800393c <HAL_RCC_OscConfig+0x240>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a68      	ldr	r2, [pc, #416]	@ (800393c <HAL_RCC_OscConfig+0x240>)
 800379a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800379e:	6013      	str	r3, [r2, #0]
 80037a0:	4b66      	ldr	r3, [pc, #408]	@ (800393c <HAL_RCC_OscConfig+0x240>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a65      	ldr	r2, [pc, #404]	@ (800393c <HAL_RCC_OscConfig+0x240>)
 80037a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d013      	beq.n	80037dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b4:	f7fd fe46 	bl	8001444 <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037bc:	f7fd fe42 	bl	8001444 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b64      	cmp	r3, #100	@ 0x64
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e207      	b.n	8003bde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ce:	4b5b      	ldr	r3, [pc, #364]	@ (800393c <HAL_RCC_OscConfig+0x240>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0f0      	beq.n	80037bc <HAL_RCC_OscConfig+0xc0>
 80037da:	e014      	b.n	8003806 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037dc:	f7fd fe32 	bl	8001444 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037e4:	f7fd fe2e 	bl	8001444 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b64      	cmp	r3, #100	@ 0x64
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e1f3      	b.n	8003bde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037f6:	4b51      	ldr	r3, [pc, #324]	@ (800393c <HAL_RCC_OscConfig+0x240>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f0      	bne.n	80037e4 <HAL_RCC_OscConfig+0xe8>
 8003802:	e000      	b.n	8003806 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003804:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d063      	beq.n	80038da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003812:	4b4a      	ldr	r3, [pc, #296]	@ (800393c <HAL_RCC_OscConfig+0x240>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 030c 	and.w	r3, r3, #12
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00b      	beq.n	8003836 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800381e:	4b47      	ldr	r3, [pc, #284]	@ (800393c <HAL_RCC_OscConfig+0x240>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003826:	2b08      	cmp	r3, #8
 8003828:	d11c      	bne.n	8003864 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800382a:	4b44      	ldr	r3, [pc, #272]	@ (800393c <HAL_RCC_OscConfig+0x240>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d116      	bne.n	8003864 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003836:	4b41      	ldr	r3, [pc, #260]	@ (800393c <HAL_RCC_OscConfig+0x240>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d005      	beq.n	800384e <HAL_RCC_OscConfig+0x152>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d001      	beq.n	800384e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e1c7      	b.n	8003bde <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800384e:	4b3b      	ldr	r3, [pc, #236]	@ (800393c <HAL_RCC_OscConfig+0x240>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	4937      	ldr	r1, [pc, #220]	@ (800393c <HAL_RCC_OscConfig+0x240>)
 800385e:	4313      	orrs	r3, r2
 8003860:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003862:	e03a      	b.n	80038da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d020      	beq.n	80038ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800386c:	4b34      	ldr	r3, [pc, #208]	@ (8003940 <HAL_RCC_OscConfig+0x244>)
 800386e:	2201      	movs	r2, #1
 8003870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003872:	f7fd fde7 	bl	8001444 <HAL_GetTick>
 8003876:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003878:	e008      	b.n	800388c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800387a:	f7fd fde3 	bl	8001444 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d901      	bls.n	800388c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e1a8      	b.n	8003bde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800388c:	4b2b      	ldr	r3, [pc, #172]	@ (800393c <HAL_RCC_OscConfig+0x240>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0f0      	beq.n	800387a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003898:	4b28      	ldr	r3, [pc, #160]	@ (800393c <HAL_RCC_OscConfig+0x240>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	4925      	ldr	r1, [pc, #148]	@ (800393c <HAL_RCC_OscConfig+0x240>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	600b      	str	r3, [r1, #0]
 80038ac:	e015      	b.n	80038da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ae:	4b24      	ldr	r3, [pc, #144]	@ (8003940 <HAL_RCC_OscConfig+0x244>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b4:	f7fd fdc6 	bl	8001444 <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038bc:	f7fd fdc2 	bl	8001444 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e187      	b.n	8003bde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ce:	4b1b      	ldr	r3, [pc, #108]	@ (800393c <HAL_RCC_OscConfig+0x240>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f0      	bne.n	80038bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0308 	and.w	r3, r3, #8
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d036      	beq.n	8003954 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d016      	beq.n	800391c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038ee:	4b15      	ldr	r3, [pc, #84]	@ (8003944 <HAL_RCC_OscConfig+0x248>)
 80038f0:	2201      	movs	r2, #1
 80038f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f4:	f7fd fda6 	bl	8001444 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038fc:	f7fd fda2 	bl	8001444 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e167      	b.n	8003bde <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800390e:	4b0b      	ldr	r3, [pc, #44]	@ (800393c <HAL_RCC_OscConfig+0x240>)
 8003910:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d0f0      	beq.n	80038fc <HAL_RCC_OscConfig+0x200>
 800391a:	e01b      	b.n	8003954 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800391c:	4b09      	ldr	r3, [pc, #36]	@ (8003944 <HAL_RCC_OscConfig+0x248>)
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003922:	f7fd fd8f 	bl	8001444 <HAL_GetTick>
 8003926:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003928:	e00e      	b.n	8003948 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800392a:	f7fd fd8b 	bl	8001444 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d907      	bls.n	8003948 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e150      	b.n	8003bde <HAL_RCC_OscConfig+0x4e2>
 800393c:	40023800 	.word	0x40023800
 8003940:	42470000 	.word	0x42470000
 8003944:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003948:	4b88      	ldr	r3, [pc, #544]	@ (8003b6c <HAL_RCC_OscConfig+0x470>)
 800394a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1ea      	bne.n	800392a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0304 	and.w	r3, r3, #4
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 8097 	beq.w	8003a90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003962:	2300      	movs	r3, #0
 8003964:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003966:	4b81      	ldr	r3, [pc, #516]	@ (8003b6c <HAL_RCC_OscConfig+0x470>)
 8003968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10f      	bne.n	8003992 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003972:	2300      	movs	r3, #0
 8003974:	60bb      	str	r3, [r7, #8]
 8003976:	4b7d      	ldr	r3, [pc, #500]	@ (8003b6c <HAL_RCC_OscConfig+0x470>)
 8003978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397a:	4a7c      	ldr	r2, [pc, #496]	@ (8003b6c <HAL_RCC_OscConfig+0x470>)
 800397c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003980:	6413      	str	r3, [r2, #64]	@ 0x40
 8003982:	4b7a      	ldr	r3, [pc, #488]	@ (8003b6c <HAL_RCC_OscConfig+0x470>)
 8003984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800398a:	60bb      	str	r3, [r7, #8]
 800398c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800398e:	2301      	movs	r3, #1
 8003990:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003992:	4b77      	ldr	r3, [pc, #476]	@ (8003b70 <HAL_RCC_OscConfig+0x474>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800399a:	2b00      	cmp	r3, #0
 800399c:	d118      	bne.n	80039d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800399e:	4b74      	ldr	r3, [pc, #464]	@ (8003b70 <HAL_RCC_OscConfig+0x474>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a73      	ldr	r2, [pc, #460]	@ (8003b70 <HAL_RCC_OscConfig+0x474>)
 80039a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039aa:	f7fd fd4b 	bl	8001444 <HAL_GetTick>
 80039ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b0:	e008      	b.n	80039c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039b2:	f7fd fd47 	bl	8001444 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e10c      	b.n	8003bde <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c4:	4b6a      	ldr	r3, [pc, #424]	@ (8003b70 <HAL_RCC_OscConfig+0x474>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d0f0      	beq.n	80039b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d106      	bne.n	80039e6 <HAL_RCC_OscConfig+0x2ea>
 80039d8:	4b64      	ldr	r3, [pc, #400]	@ (8003b6c <HAL_RCC_OscConfig+0x470>)
 80039da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039dc:	4a63      	ldr	r2, [pc, #396]	@ (8003b6c <HAL_RCC_OscConfig+0x470>)
 80039de:	f043 0301 	orr.w	r3, r3, #1
 80039e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80039e4:	e01c      	b.n	8003a20 <HAL_RCC_OscConfig+0x324>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	2b05      	cmp	r3, #5
 80039ec:	d10c      	bne.n	8003a08 <HAL_RCC_OscConfig+0x30c>
 80039ee:	4b5f      	ldr	r3, [pc, #380]	@ (8003b6c <HAL_RCC_OscConfig+0x470>)
 80039f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039f2:	4a5e      	ldr	r2, [pc, #376]	@ (8003b6c <HAL_RCC_OscConfig+0x470>)
 80039f4:	f043 0304 	orr.w	r3, r3, #4
 80039f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80039fa:	4b5c      	ldr	r3, [pc, #368]	@ (8003b6c <HAL_RCC_OscConfig+0x470>)
 80039fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039fe:	4a5b      	ldr	r2, [pc, #364]	@ (8003b6c <HAL_RCC_OscConfig+0x470>)
 8003a00:	f043 0301 	orr.w	r3, r3, #1
 8003a04:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a06:	e00b      	b.n	8003a20 <HAL_RCC_OscConfig+0x324>
 8003a08:	4b58      	ldr	r3, [pc, #352]	@ (8003b6c <HAL_RCC_OscConfig+0x470>)
 8003a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a0c:	4a57      	ldr	r2, [pc, #348]	@ (8003b6c <HAL_RCC_OscConfig+0x470>)
 8003a0e:	f023 0301 	bic.w	r3, r3, #1
 8003a12:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a14:	4b55      	ldr	r3, [pc, #340]	@ (8003b6c <HAL_RCC_OscConfig+0x470>)
 8003a16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a18:	4a54      	ldr	r2, [pc, #336]	@ (8003b6c <HAL_RCC_OscConfig+0x470>)
 8003a1a:	f023 0304 	bic.w	r3, r3, #4
 8003a1e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d015      	beq.n	8003a54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a28:	f7fd fd0c 	bl	8001444 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a2e:	e00a      	b.n	8003a46 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a30:	f7fd fd08 	bl	8001444 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e0cb      	b.n	8003bde <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a46:	4b49      	ldr	r3, [pc, #292]	@ (8003b6c <HAL_RCC_OscConfig+0x470>)
 8003a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0ee      	beq.n	8003a30 <HAL_RCC_OscConfig+0x334>
 8003a52:	e014      	b.n	8003a7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a54:	f7fd fcf6 	bl	8001444 <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a5a:	e00a      	b.n	8003a72 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a5c:	f7fd fcf2 	bl	8001444 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e0b5      	b.n	8003bde <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a72:	4b3e      	ldr	r3, [pc, #248]	@ (8003b6c <HAL_RCC_OscConfig+0x470>)
 8003a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1ee      	bne.n	8003a5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a7e:	7dfb      	ldrb	r3, [r7, #23]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d105      	bne.n	8003a90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a84:	4b39      	ldr	r3, [pc, #228]	@ (8003b6c <HAL_RCC_OscConfig+0x470>)
 8003a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a88:	4a38      	ldr	r2, [pc, #224]	@ (8003b6c <HAL_RCC_OscConfig+0x470>)
 8003a8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a8e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 80a1 	beq.w	8003bdc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a9a:	4b34      	ldr	r3, [pc, #208]	@ (8003b6c <HAL_RCC_OscConfig+0x470>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 030c 	and.w	r3, r3, #12
 8003aa2:	2b08      	cmp	r3, #8
 8003aa4:	d05c      	beq.n	8003b60 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d141      	bne.n	8003b32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aae:	4b31      	ldr	r3, [pc, #196]	@ (8003b74 <HAL_RCC_OscConfig+0x478>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab4:	f7fd fcc6 	bl	8001444 <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003abc:	f7fd fcc2 	bl	8001444 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e087      	b.n	8003bde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ace:	4b27      	ldr	r3, [pc, #156]	@ (8003b6c <HAL_RCC_OscConfig+0x470>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1f0      	bne.n	8003abc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	69da      	ldr	r2, [r3, #28]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae8:	019b      	lsls	r3, r3, #6
 8003aea:	431a      	orrs	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af0:	085b      	lsrs	r3, r3, #1
 8003af2:	3b01      	subs	r3, #1
 8003af4:	041b      	lsls	r3, r3, #16
 8003af6:	431a      	orrs	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003afc:	061b      	lsls	r3, r3, #24
 8003afe:	491b      	ldr	r1, [pc, #108]	@ (8003b6c <HAL_RCC_OscConfig+0x470>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b04:	4b1b      	ldr	r3, [pc, #108]	@ (8003b74 <HAL_RCC_OscConfig+0x478>)
 8003b06:	2201      	movs	r2, #1
 8003b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0a:	f7fd fc9b 	bl	8001444 <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b12:	f7fd fc97 	bl	8001444 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e05c      	b.n	8003bde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b24:	4b11      	ldr	r3, [pc, #68]	@ (8003b6c <HAL_RCC_OscConfig+0x470>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0f0      	beq.n	8003b12 <HAL_RCC_OscConfig+0x416>
 8003b30:	e054      	b.n	8003bdc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b32:	4b10      	ldr	r3, [pc, #64]	@ (8003b74 <HAL_RCC_OscConfig+0x478>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b38:	f7fd fc84 	bl	8001444 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b40:	f7fd fc80 	bl	8001444 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e045      	b.n	8003bde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b52:	4b06      	ldr	r3, [pc, #24]	@ (8003b6c <HAL_RCC_OscConfig+0x470>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1f0      	bne.n	8003b40 <HAL_RCC_OscConfig+0x444>
 8003b5e:	e03d      	b.n	8003bdc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d107      	bne.n	8003b78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e038      	b.n	8003bde <HAL_RCC_OscConfig+0x4e2>
 8003b6c:	40023800 	.word	0x40023800
 8003b70:	40007000 	.word	0x40007000
 8003b74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b78:	4b1b      	ldr	r3, [pc, #108]	@ (8003be8 <HAL_RCC_OscConfig+0x4ec>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d028      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d121      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d11a      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ba8:	4013      	ands	r3, r2
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003bae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d111      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bbe:	085b      	lsrs	r3, r3, #1
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d107      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d001      	beq.n	8003bdc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e000      	b.n	8003bde <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3718      	adds	r7, #24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	40023800 	.word	0x40023800

08003bec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e0cc      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c00:	4b68      	ldr	r3, [pc, #416]	@ (8003da4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 030f 	and.w	r3, r3, #15
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d90c      	bls.n	8003c28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c0e:	4b65      	ldr	r3, [pc, #404]	@ (8003da4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	b2d2      	uxtb	r2, r2
 8003c14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c16:	4b63      	ldr	r3, [pc, #396]	@ (8003da4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d001      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e0b8      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d020      	beq.n	8003c76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d005      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c40:	4b59      	ldr	r3, [pc, #356]	@ (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	4a58      	ldr	r2, [pc, #352]	@ (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c46:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003c4a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0308 	and.w	r3, r3, #8
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d005      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c58:	4b53      	ldr	r3, [pc, #332]	@ (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	4a52      	ldr	r2, [pc, #328]	@ (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003c62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c64:	4b50      	ldr	r3, [pc, #320]	@ (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	494d      	ldr	r1, [pc, #308]	@ (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d044      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d107      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c8a:	4b47      	ldr	r3, [pc, #284]	@ (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d119      	bne.n	8003cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e07f      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d003      	beq.n	8003caa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ca6:	2b03      	cmp	r3, #3
 8003ca8:	d107      	bne.n	8003cba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003caa:	4b3f      	ldr	r3, [pc, #252]	@ (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d109      	bne.n	8003cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e06f      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cba:	4b3b      	ldr	r3, [pc, #236]	@ (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e067      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cca:	4b37      	ldr	r3, [pc, #220]	@ (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f023 0203 	bic.w	r2, r3, #3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	4934      	ldr	r1, [pc, #208]	@ (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cdc:	f7fd fbb2 	bl	8001444 <HAL_GetTick>
 8003ce0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce2:	e00a      	b.n	8003cfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ce4:	f7fd fbae 	bl	8001444 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e04f      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cfa:	4b2b      	ldr	r3, [pc, #172]	@ (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 020c 	and.w	r2, r3, #12
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d1eb      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d0c:	4b25      	ldr	r3, [pc, #148]	@ (8003da4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 030f 	and.w	r3, r3, #15
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d20c      	bcs.n	8003d34 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d1a:	4b22      	ldr	r3, [pc, #136]	@ (8003da4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d22:	4b20      	ldr	r3, [pc, #128]	@ (8003da4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d001      	beq.n	8003d34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e032      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d008      	beq.n	8003d52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d40:	4b19      	ldr	r3, [pc, #100]	@ (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	4916      	ldr	r1, [pc, #88]	@ (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0308 	and.w	r3, r3, #8
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d009      	beq.n	8003d72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d5e:	4b12      	ldr	r3, [pc, #72]	@ (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	490e      	ldr	r1, [pc, #56]	@ (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d72:	f000 f821 	bl	8003db8 <HAL_RCC_GetSysClockFreq>
 8003d76:	4602      	mov	r2, r0
 8003d78:	4b0b      	ldr	r3, [pc, #44]	@ (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	091b      	lsrs	r3, r3, #4
 8003d7e:	f003 030f 	and.w	r3, r3, #15
 8003d82:	490a      	ldr	r1, [pc, #40]	@ (8003dac <HAL_RCC_ClockConfig+0x1c0>)
 8003d84:	5ccb      	ldrb	r3, [r1, r3]
 8003d86:	fa22 f303 	lsr.w	r3, r2, r3
 8003d8a:	4a09      	ldr	r2, [pc, #36]	@ (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003d8e:	4b09      	ldr	r3, [pc, #36]	@ (8003db4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fd fb12 	bl	80013bc <HAL_InitTick>

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	40023c00 	.word	0x40023c00
 8003da8:	40023800 	.word	0x40023800
 8003dac:	0800a05c 	.word	0x0800a05c
 8003db0:	20000004 	.word	0x20000004
 8003db4:	20000008 	.word	0x20000008

08003db8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003db8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dbc:	b094      	sub	sp, #80	@ 0x50
 8003dbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dd0:	4b79      	ldr	r3, [pc, #484]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 030c 	and.w	r3, r3, #12
 8003dd8:	2b08      	cmp	r3, #8
 8003dda:	d00d      	beq.n	8003df8 <HAL_RCC_GetSysClockFreq+0x40>
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	f200 80e1 	bhi.w	8003fa4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <HAL_RCC_GetSysClockFreq+0x34>
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d003      	beq.n	8003df2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003dea:	e0db      	b.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dec:	4b73      	ldr	r3, [pc, #460]	@ (8003fbc <HAL_RCC_GetSysClockFreq+0x204>)
 8003dee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003df0:	e0db      	b.n	8003faa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003df2:	4b73      	ldr	r3, [pc, #460]	@ (8003fc0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003df4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003df6:	e0d8      	b.n	8003faa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003df8:	4b6f      	ldr	r3, [pc, #444]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e00:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e02:	4b6d      	ldr	r3, [pc, #436]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d063      	beq.n	8003ed6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e0e:	4b6a      	ldr	r3, [pc, #424]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	099b      	lsrs	r3, r3, #6
 8003e14:	2200      	movs	r2, #0
 8003e16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e18:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e20:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e22:	2300      	movs	r3, #0
 8003e24:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e26:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003e2a:	4622      	mov	r2, r4
 8003e2c:	462b      	mov	r3, r5
 8003e2e:	f04f 0000 	mov.w	r0, #0
 8003e32:	f04f 0100 	mov.w	r1, #0
 8003e36:	0159      	lsls	r1, r3, #5
 8003e38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e3c:	0150      	lsls	r0, r2, #5
 8003e3e:	4602      	mov	r2, r0
 8003e40:	460b      	mov	r3, r1
 8003e42:	4621      	mov	r1, r4
 8003e44:	1a51      	subs	r1, r2, r1
 8003e46:	6139      	str	r1, [r7, #16]
 8003e48:	4629      	mov	r1, r5
 8003e4a:	eb63 0301 	sbc.w	r3, r3, r1
 8003e4e:	617b      	str	r3, [r7, #20]
 8003e50:	f04f 0200 	mov.w	r2, #0
 8003e54:	f04f 0300 	mov.w	r3, #0
 8003e58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e5c:	4659      	mov	r1, fp
 8003e5e:	018b      	lsls	r3, r1, #6
 8003e60:	4651      	mov	r1, sl
 8003e62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e66:	4651      	mov	r1, sl
 8003e68:	018a      	lsls	r2, r1, #6
 8003e6a:	4651      	mov	r1, sl
 8003e6c:	ebb2 0801 	subs.w	r8, r2, r1
 8003e70:	4659      	mov	r1, fp
 8003e72:	eb63 0901 	sbc.w	r9, r3, r1
 8003e76:	f04f 0200 	mov.w	r2, #0
 8003e7a:	f04f 0300 	mov.w	r3, #0
 8003e7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e8a:	4690      	mov	r8, r2
 8003e8c:	4699      	mov	r9, r3
 8003e8e:	4623      	mov	r3, r4
 8003e90:	eb18 0303 	adds.w	r3, r8, r3
 8003e94:	60bb      	str	r3, [r7, #8]
 8003e96:	462b      	mov	r3, r5
 8003e98:	eb49 0303 	adc.w	r3, r9, r3
 8003e9c:	60fb      	str	r3, [r7, #12]
 8003e9e:	f04f 0200 	mov.w	r2, #0
 8003ea2:	f04f 0300 	mov.w	r3, #0
 8003ea6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003eaa:	4629      	mov	r1, r5
 8003eac:	024b      	lsls	r3, r1, #9
 8003eae:	4621      	mov	r1, r4
 8003eb0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003eb4:	4621      	mov	r1, r4
 8003eb6:	024a      	lsls	r2, r1, #9
 8003eb8:	4610      	mov	r0, r2
 8003eba:	4619      	mov	r1, r3
 8003ebc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ec2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ec4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003ec8:	f7fc f9e2 	bl	8000290 <__aeabi_uldivmod>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	460b      	mov	r3, r1
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ed4:	e058      	b.n	8003f88 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ed6:	4b38      	ldr	r3, [pc, #224]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	099b      	lsrs	r3, r3, #6
 8003edc:	2200      	movs	r2, #0
 8003ede:	4618      	mov	r0, r3
 8003ee0:	4611      	mov	r1, r2
 8003ee2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ee6:	623b      	str	r3, [r7, #32]
 8003ee8:	2300      	movs	r3, #0
 8003eea:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ef0:	4642      	mov	r2, r8
 8003ef2:	464b      	mov	r3, r9
 8003ef4:	f04f 0000 	mov.w	r0, #0
 8003ef8:	f04f 0100 	mov.w	r1, #0
 8003efc:	0159      	lsls	r1, r3, #5
 8003efe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f02:	0150      	lsls	r0, r2, #5
 8003f04:	4602      	mov	r2, r0
 8003f06:	460b      	mov	r3, r1
 8003f08:	4641      	mov	r1, r8
 8003f0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f0e:	4649      	mov	r1, r9
 8003f10:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f14:	f04f 0200 	mov.w	r2, #0
 8003f18:	f04f 0300 	mov.w	r3, #0
 8003f1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f28:	ebb2 040a 	subs.w	r4, r2, sl
 8003f2c:	eb63 050b 	sbc.w	r5, r3, fp
 8003f30:	f04f 0200 	mov.w	r2, #0
 8003f34:	f04f 0300 	mov.w	r3, #0
 8003f38:	00eb      	lsls	r3, r5, #3
 8003f3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f3e:	00e2      	lsls	r2, r4, #3
 8003f40:	4614      	mov	r4, r2
 8003f42:	461d      	mov	r5, r3
 8003f44:	4643      	mov	r3, r8
 8003f46:	18e3      	adds	r3, r4, r3
 8003f48:	603b      	str	r3, [r7, #0]
 8003f4a:	464b      	mov	r3, r9
 8003f4c:	eb45 0303 	adc.w	r3, r5, r3
 8003f50:	607b      	str	r3, [r7, #4]
 8003f52:	f04f 0200 	mov.w	r2, #0
 8003f56:	f04f 0300 	mov.w	r3, #0
 8003f5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f5e:	4629      	mov	r1, r5
 8003f60:	028b      	lsls	r3, r1, #10
 8003f62:	4621      	mov	r1, r4
 8003f64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f68:	4621      	mov	r1, r4
 8003f6a:	028a      	lsls	r2, r1, #10
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	4619      	mov	r1, r3
 8003f70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f72:	2200      	movs	r2, #0
 8003f74:	61bb      	str	r3, [r7, #24]
 8003f76:	61fa      	str	r2, [r7, #28]
 8003f78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f7c:	f7fc f988 	bl	8000290 <__aeabi_uldivmod>
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	4613      	mov	r3, r2
 8003f86:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003f88:	4b0b      	ldr	r3, [pc, #44]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	0c1b      	lsrs	r3, r3, #16
 8003f8e:	f003 0303 	and.w	r3, r3, #3
 8003f92:	3301      	adds	r3, #1
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003f98:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003fa2:	e002      	b.n	8003faa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fa4:	4b05      	ldr	r3, [pc, #20]	@ (8003fbc <HAL_RCC_GetSysClockFreq+0x204>)
 8003fa6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003fa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003faa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3750      	adds	r7, #80	@ 0x50
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fb6:	bf00      	nop
 8003fb8:	40023800 	.word	0x40023800
 8003fbc:	00f42400 	.word	0x00f42400
 8003fc0:	007a1200 	.word	0x007a1200

08003fc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fc8:	4b03      	ldr	r3, [pc, #12]	@ (8003fd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fca:	681b      	ldr	r3, [r3, #0]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	20000004 	.word	0x20000004

08003fdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fe0:	f7ff fff0 	bl	8003fc4 <HAL_RCC_GetHCLKFreq>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	4b05      	ldr	r3, [pc, #20]	@ (8003ffc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	0a9b      	lsrs	r3, r3, #10
 8003fec:	f003 0307 	and.w	r3, r3, #7
 8003ff0:	4903      	ldr	r1, [pc, #12]	@ (8004000 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ff2:	5ccb      	ldrb	r3, [r1, r3]
 8003ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	40023800 	.word	0x40023800
 8004000:	0800a06c 	.word	0x0800a06c

08004004 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004008:	f7ff ffdc 	bl	8003fc4 <HAL_RCC_GetHCLKFreq>
 800400c:	4602      	mov	r2, r0
 800400e:	4b05      	ldr	r3, [pc, #20]	@ (8004024 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	0b5b      	lsrs	r3, r3, #13
 8004014:	f003 0307 	and.w	r3, r3, #7
 8004018:	4903      	ldr	r1, [pc, #12]	@ (8004028 <HAL_RCC_GetPCLK2Freq+0x24>)
 800401a:	5ccb      	ldrb	r3, [r1, r3]
 800401c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004020:	4618      	mov	r0, r3
 8004022:	bd80      	pop	{r7, pc}
 8004024:	40023800 	.word	0x40023800
 8004028:	0800a06c 	.word	0x0800a06c

0800402c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e07b      	b.n	8004136 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004042:	2b00      	cmp	r3, #0
 8004044:	d108      	bne.n	8004058 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800404e:	d009      	beq.n	8004064 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	61da      	str	r2, [r3, #28]
 8004056:	e005      	b.n	8004064 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d106      	bne.n	8004084 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7fc fef2 	bl	8000e68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2202      	movs	r2, #2
 8004088:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800409a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80040ac:	431a      	orrs	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	431a      	orrs	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040d4:	431a      	orrs	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040de:	431a      	orrs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a1b      	ldr	r3, [r3, #32]
 80040e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040e8:	ea42 0103 	orr.w	r1, r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	0c1b      	lsrs	r3, r3, #16
 8004102:	f003 0104 	and.w	r1, r3, #4
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410a:	f003 0210 	and.w	r2, r3, #16
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	69da      	ldr	r2, [r3, #28]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004124:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b082      	sub	sp, #8
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d101      	bne.n	8004150 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e042      	b.n	80041d6 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b00      	cmp	r3, #0
 800415a:	d106      	bne.n	800416a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7fc fee7 	bl	8000f38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2224      	movs	r2, #36	@ 0x24
 800416e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68da      	ldr	r2, [r3, #12]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004180:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 ff46 	bl	8005014 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	691a      	ldr	r2, [r3, #16]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004196:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	695a      	ldr	r2, [r3, #20]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80041a6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68da      	ldr	r2, [r3, #12]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80041b6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2220      	movs	r2, #32
 80041c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2220      	movs	r2, #32
 80041ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b08a      	sub	sp, #40	@ 0x28
 80041e2:	af02      	add	r7, sp, #8
 80041e4:	60f8      	str	r0, [r7, #12]
 80041e6:	60b9      	str	r1, [r7, #8]
 80041e8:	603b      	str	r3, [r7, #0]
 80041ea:	4613      	mov	r3, r2
 80041ec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041ee:	2300      	movs	r3, #0
 80041f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b20      	cmp	r3, #32
 80041fc:	d175      	bne.n	80042ea <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d002      	beq.n	800420a <HAL_UART_Transmit+0x2c>
 8004204:	88fb      	ldrh	r3, [r7, #6]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e06e      	b.n	80042ec <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2221      	movs	r2, #33	@ 0x21
 8004218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800421c:	f7fd f912 	bl	8001444 <HAL_GetTick>
 8004220:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	88fa      	ldrh	r2, [r7, #6]
 8004226:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	88fa      	ldrh	r2, [r7, #6]
 800422c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004236:	d108      	bne.n	800424a <HAL_UART_Transmit+0x6c>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d104      	bne.n	800424a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004240:	2300      	movs	r3, #0
 8004242:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	61bb      	str	r3, [r7, #24]
 8004248:	e003      	b.n	8004252 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800424e:	2300      	movs	r3, #0
 8004250:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004252:	e02e      	b.n	80042b2 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	2200      	movs	r2, #0
 800425c:	2180      	movs	r1, #128	@ 0x80
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f000 fc1e 	bl	8004aa0 <UART_WaitOnFlagUntilTimeout>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d005      	beq.n	8004276 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2220      	movs	r2, #32
 800426e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e03a      	b.n	80042ec <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10b      	bne.n	8004294 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	881b      	ldrh	r3, [r3, #0]
 8004280:	461a      	mov	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800428a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	3302      	adds	r3, #2
 8004290:	61bb      	str	r3, [r7, #24]
 8004292:	e007      	b.n	80042a4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	781a      	ldrb	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	3301      	adds	r3, #1
 80042a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	3b01      	subs	r3, #1
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1cb      	bne.n	8004254 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	9300      	str	r3, [sp, #0]
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	2200      	movs	r2, #0
 80042c4:	2140      	movs	r1, #64	@ 0x40
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f000 fbea 	bl	8004aa0 <UART_WaitOnFlagUntilTimeout>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d005      	beq.n	80042de <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2220      	movs	r2, #32
 80042d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e006      	b.n	80042ec <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2220      	movs	r2, #32
 80042e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80042e6:	2300      	movs	r3, #0
 80042e8:	e000      	b.n	80042ec <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80042ea:	2302      	movs	r3, #2
  }
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3720      	adds	r7, #32
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	4613      	mov	r3, r2
 8004300:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b20      	cmp	r3, #32
 800430c:	d112      	bne.n	8004334 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d002      	beq.n	800431a <HAL_UART_Receive_DMA+0x26>
 8004314:	88fb      	ldrh	r3, [r7, #6]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e00b      	b.n	8004336 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004324:	88fb      	ldrh	r3, [r7, #6]
 8004326:	461a      	mov	r2, r3
 8004328:	68b9      	ldr	r1, [r7, #8]
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f000 fc12 	bl	8004b54 <UART_Start_Receive_DMA>
 8004330:	4603      	mov	r3, r0
 8004332:	e000      	b.n	8004336 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004334:	2302      	movs	r3, #2
  }
}
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
	...

08004340 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b0ba      	sub	sp, #232	@ 0xe8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004366:	2300      	movs	r3, #0
 8004368:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800436c:	2300      	movs	r3, #0
 800436e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004376:	f003 030f 	and.w	r3, r3, #15
 800437a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800437e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10f      	bne.n	80043a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800438a:	f003 0320 	and.w	r3, r3, #32
 800438e:	2b00      	cmp	r3, #0
 8004390:	d009      	beq.n	80043a6 <HAL_UART_IRQHandler+0x66>
 8004392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004396:	f003 0320 	and.w	r3, r3, #32
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 fd79 	bl	8004e96 <UART_Receive_IT>
      return;
 80043a4:	e25b      	b.n	800485e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80043a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 80de 	beq.w	800456c <HAL_UART_IRQHandler+0x22c>
 80043b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d106      	bne.n	80043ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80043bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043c0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 80d1 	beq.w	800456c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80043ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00b      	beq.n	80043ee <HAL_UART_IRQHandler+0xae>
 80043d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d005      	beq.n	80043ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043e6:	f043 0201 	orr.w	r2, r3, #1
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043f2:	f003 0304 	and.w	r3, r3, #4
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00b      	beq.n	8004412 <HAL_UART_IRQHandler+0xd2>
 80043fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d005      	beq.n	8004412 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800440a:	f043 0202 	orr.w	r2, r3, #2
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00b      	beq.n	8004436 <HAL_UART_IRQHandler+0xf6>
 800441e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d005      	beq.n	8004436 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800442e:	f043 0204 	orr.w	r2, r3, #4
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800443a:	f003 0308 	and.w	r3, r3, #8
 800443e:	2b00      	cmp	r3, #0
 8004440:	d011      	beq.n	8004466 <HAL_UART_IRQHandler+0x126>
 8004442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004446:	f003 0320 	and.w	r3, r3, #32
 800444a:	2b00      	cmp	r3, #0
 800444c:	d105      	bne.n	800445a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800444e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	d005      	beq.n	8004466 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445e:	f043 0208 	orr.w	r2, r3, #8
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800446a:	2b00      	cmp	r3, #0
 800446c:	f000 81f2 	beq.w	8004854 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004474:	f003 0320 	and.w	r3, r3, #32
 8004478:	2b00      	cmp	r3, #0
 800447a:	d008      	beq.n	800448e <HAL_UART_IRQHandler+0x14e>
 800447c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004480:	f003 0320 	and.w	r3, r3, #32
 8004484:	2b00      	cmp	r3, #0
 8004486:	d002      	beq.n	800448e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 fd04 	bl	8004e96 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004498:	2b40      	cmp	r3, #64	@ 0x40
 800449a:	bf0c      	ite	eq
 800449c:	2301      	moveq	r3, #1
 800449e:	2300      	movne	r3, #0
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044aa:	f003 0308 	and.w	r3, r3, #8
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d103      	bne.n	80044ba <HAL_UART_IRQHandler+0x17a>
 80044b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d04f      	beq.n	800455a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 fc0c 	bl	8004cd8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ca:	2b40      	cmp	r3, #64	@ 0x40
 80044cc:	d141      	bne.n	8004552 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	3314      	adds	r3, #20
 80044d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80044dc:	e853 3f00 	ldrex	r3, [r3]
 80044e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80044e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80044e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	3314      	adds	r3, #20
 80044f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80044fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80044fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004502:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004506:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800450a:	e841 2300 	strex	r3, r2, [r1]
 800450e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004512:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1d9      	bne.n	80044ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800451e:	2b00      	cmp	r3, #0
 8004520:	d013      	beq.n	800454a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004526:	4a7e      	ldr	r2, [pc, #504]	@ (8004720 <HAL_UART_IRQHandler+0x3e0>)
 8004528:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800452e:	4618      	mov	r0, r3
 8004530:	f7fd fa40 	bl	80019b4 <HAL_DMA_Abort_IT>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d016      	beq.n	8004568 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800453e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004544:	4610      	mov	r0, r2
 8004546:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004548:	e00e      	b.n	8004568 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 f994 	bl	8004878 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004550:	e00a      	b.n	8004568 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f990 	bl	8004878 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004558:	e006      	b.n	8004568 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f98c 	bl	8004878 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004566:	e175      	b.n	8004854 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004568:	bf00      	nop
    return;
 800456a:	e173      	b.n	8004854 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004570:	2b01      	cmp	r3, #1
 8004572:	f040 814f 	bne.w	8004814 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800457a:	f003 0310 	and.w	r3, r3, #16
 800457e:	2b00      	cmp	r3, #0
 8004580:	f000 8148 	beq.w	8004814 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004588:	f003 0310 	and.w	r3, r3, #16
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 8141 	beq.w	8004814 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004592:	2300      	movs	r3, #0
 8004594:	60bb      	str	r3, [r7, #8]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	60bb      	str	r3, [r7, #8]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	60bb      	str	r3, [r7, #8]
 80045a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b2:	2b40      	cmp	r3, #64	@ 0x40
 80045b4:	f040 80b6 	bne.w	8004724 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80045c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 8145 	beq.w	8004858 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80045d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80045d6:	429a      	cmp	r2, r3
 80045d8:	f080 813e 	bcs.w	8004858 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80045e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045ee:	f000 8088 	beq.w	8004702 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	330c      	adds	r3, #12
 80045f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004600:	e853 3f00 	ldrex	r3, [r3]
 8004604:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004608:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800460c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004610:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	330c      	adds	r3, #12
 800461a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800461e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004622:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004626:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800462a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800462e:	e841 2300 	strex	r3, r2, [r1]
 8004632:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004636:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1d9      	bne.n	80045f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3314      	adds	r3, #20
 8004644:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004646:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004648:	e853 3f00 	ldrex	r3, [r3]
 800464c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800464e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004650:	f023 0301 	bic.w	r3, r3, #1
 8004654:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	3314      	adds	r3, #20
 800465e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004662:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004666:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004668:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800466a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800466e:	e841 2300 	strex	r3, r2, [r1]
 8004672:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004674:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1e1      	bne.n	800463e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	3314      	adds	r3, #20
 8004680:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004682:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004684:	e853 3f00 	ldrex	r3, [r3]
 8004688:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800468a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800468c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004690:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	3314      	adds	r3, #20
 800469a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800469e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80046a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80046a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80046a6:	e841 2300 	strex	r3, r2, [r1]
 80046aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80046ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1e3      	bne.n	800467a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2220      	movs	r2, #32
 80046b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	330c      	adds	r3, #12
 80046c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046ca:	e853 3f00 	ldrex	r3, [r3]
 80046ce:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80046d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046d2:	f023 0310 	bic.w	r3, r3, #16
 80046d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	330c      	adds	r3, #12
 80046e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80046e4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80046e6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80046ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80046ec:	e841 2300 	strex	r3, r2, [r1]
 80046f0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80046f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1e3      	bne.n	80046c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7fd f8e9 	bl	80018d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2202      	movs	r2, #2
 8004706:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004710:	b29b      	uxth	r3, r3
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	b29b      	uxth	r3, r3
 8004716:	4619      	mov	r1, r3
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 f8b7 	bl	800488c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800471e:	e09b      	b.n	8004858 <HAL_UART_IRQHandler+0x518>
 8004720:	08004d9f 	.word	0x08004d9f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800472c:	b29b      	uxth	r3, r3
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004738:	b29b      	uxth	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 808e 	beq.w	800485c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004740:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 8089 	beq.w	800485c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	330c      	adds	r3, #12
 8004750:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004754:	e853 3f00 	ldrex	r3, [r3]
 8004758:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800475a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800475c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004760:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	330c      	adds	r3, #12
 800476a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800476e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004770:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004772:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004774:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004776:	e841 2300 	strex	r3, r2, [r1]
 800477a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800477c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1e3      	bne.n	800474a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	3314      	adds	r3, #20
 8004788:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800478c:	e853 3f00 	ldrex	r3, [r3]
 8004790:	623b      	str	r3, [r7, #32]
   return(result);
 8004792:	6a3b      	ldr	r3, [r7, #32]
 8004794:	f023 0301 	bic.w	r3, r3, #1
 8004798:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	3314      	adds	r3, #20
 80047a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80047a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80047a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047ae:	e841 2300 	strex	r3, r2, [r1]
 80047b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1e3      	bne.n	8004782 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2220      	movs	r2, #32
 80047be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	330c      	adds	r3, #12
 80047ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	e853 3f00 	ldrex	r3, [r3]
 80047d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f023 0310 	bic.w	r3, r3, #16
 80047de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	330c      	adds	r3, #12
 80047e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80047ec:	61fa      	str	r2, [r7, #28]
 80047ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f0:	69b9      	ldr	r1, [r7, #24]
 80047f2:	69fa      	ldr	r2, [r7, #28]
 80047f4:	e841 2300 	strex	r3, r2, [r1]
 80047f8:	617b      	str	r3, [r7, #20]
   return(result);
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1e3      	bne.n	80047c8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004806:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800480a:	4619      	mov	r1, r3
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 f83d 	bl	800488c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004812:	e023      	b.n	800485c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004818:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800481c:	2b00      	cmp	r3, #0
 800481e:	d009      	beq.n	8004834 <HAL_UART_IRQHandler+0x4f4>
 8004820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004824:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004828:	2b00      	cmp	r3, #0
 800482a:	d003      	beq.n	8004834 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 faca 	bl	8004dc6 <UART_Transmit_IT>
    return;
 8004832:	e014      	b.n	800485e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00e      	beq.n	800485e <HAL_UART_IRQHandler+0x51e>
 8004840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004848:	2b00      	cmp	r3, #0
 800484a:	d008      	beq.n	800485e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 fb0a 	bl	8004e66 <UART_EndTransmit_IT>
    return;
 8004852:	e004      	b.n	800485e <HAL_UART_IRQHandler+0x51e>
    return;
 8004854:	bf00      	nop
 8004856:	e002      	b.n	800485e <HAL_UART_IRQHandler+0x51e>
      return;
 8004858:	bf00      	nop
 800485a:	e000      	b.n	800485e <HAL_UART_IRQHandler+0x51e>
      return;
 800485c:	bf00      	nop
  }
}
 800485e:	37e8      	adds	r7, #232	@ 0xe8
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	460b      	mov	r3, r1
 8004896:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b09c      	sub	sp, #112	@ 0x70
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d172      	bne.n	80049a6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80048c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048c2:	2200      	movs	r2, #0
 80048c4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	330c      	adds	r3, #12
 80048cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048d0:	e853 3f00 	ldrex	r3, [r3]
 80048d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80048d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	330c      	adds	r3, #12
 80048e4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80048e6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80048e8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80048ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80048ee:	e841 2300 	strex	r3, r2, [r1]
 80048f2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80048f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1e5      	bne.n	80048c6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	3314      	adds	r3, #20
 8004900:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004904:	e853 3f00 	ldrex	r3, [r3]
 8004908:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800490a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800490c:	f023 0301 	bic.w	r3, r3, #1
 8004910:	667b      	str	r3, [r7, #100]	@ 0x64
 8004912:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	3314      	adds	r3, #20
 8004918:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800491a:	647a      	str	r2, [r7, #68]	@ 0x44
 800491c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004920:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004922:	e841 2300 	strex	r3, r2, [r1]
 8004926:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1e5      	bne.n	80048fa <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800492e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	3314      	adds	r3, #20
 8004934:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004938:	e853 3f00 	ldrex	r3, [r3]
 800493c:	623b      	str	r3, [r7, #32]
   return(result);
 800493e:	6a3b      	ldr	r3, [r7, #32]
 8004940:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004944:	663b      	str	r3, [r7, #96]	@ 0x60
 8004946:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	3314      	adds	r3, #20
 800494c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800494e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004950:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004952:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004954:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004956:	e841 2300 	strex	r3, r2, [r1]
 800495a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800495c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1e5      	bne.n	800492e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004962:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004964:	2220      	movs	r2, #32
 8004966:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800496a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800496c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800496e:	2b01      	cmp	r3, #1
 8004970:	d119      	bne.n	80049a6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004972:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	330c      	adds	r3, #12
 8004978:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	e853 3f00 	ldrex	r3, [r3]
 8004980:	60fb      	str	r3, [r7, #12]
   return(result);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f023 0310 	bic.w	r3, r3, #16
 8004988:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800498a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	330c      	adds	r3, #12
 8004990:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004992:	61fa      	str	r2, [r7, #28]
 8004994:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004996:	69b9      	ldr	r1, [r7, #24]
 8004998:	69fa      	ldr	r2, [r7, #28]
 800499a:	e841 2300 	strex	r3, r2, [r1]
 800499e:	617b      	str	r3, [r7, #20]
   return(result);
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1e5      	bne.n	8004972 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049a8:	2200      	movs	r2, #0
 80049aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d106      	bne.n	80049c2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049b6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80049b8:	4619      	mov	r1, r3
 80049ba:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80049bc:	f7ff ff66 	bl	800488c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80049c0:	e002      	b.n	80049c8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80049c2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80049c4:	f7fb fe18 	bl	80005f8 <HAL_UART_RxCpltCallback>
}
 80049c8:	bf00      	nop
 80049ca:	3770      	adds	r7, #112	@ 0x70
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049dc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2201      	movs	r2, #1
 80049e2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d108      	bne.n	80049fe <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80049f0:	085b      	lsrs	r3, r3, #1
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	4619      	mov	r1, r3
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f7ff ff48 	bl	800488c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80049fc:	e002      	b.n	8004a04 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f7fb ffb6 	bl	8000970 <HAL_UART_RxHalfCpltCallback>
}
 8004a04:	bf00      	nop
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004a14:	2300      	movs	r3, #0
 8004a16:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a1c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a28:	2b80      	cmp	r3, #128	@ 0x80
 8004a2a:	bf0c      	ite	eq
 8004a2c:	2301      	moveq	r3, #1
 8004a2e:	2300      	movne	r3, #0
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b21      	cmp	r3, #33	@ 0x21
 8004a3e:	d108      	bne.n	8004a52 <UART_DMAError+0x46>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d005      	beq.n	8004a52 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004a4c:	68b8      	ldr	r0, [r7, #8]
 8004a4e:	f000 f91b 	bl	8004c88 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a5c:	2b40      	cmp	r3, #64	@ 0x40
 8004a5e:	bf0c      	ite	eq
 8004a60:	2301      	moveq	r3, #1
 8004a62:	2300      	movne	r3, #0
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b22      	cmp	r3, #34	@ 0x22
 8004a72:	d108      	bne.n	8004a86 <UART_DMAError+0x7a>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d005      	beq.n	8004a86 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004a80:	68b8      	ldr	r0, [r7, #8]
 8004a82:	f000 f929 	bl	8004cd8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a8a:	f043 0210 	orr.w	r2, r3, #16
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a92:	68b8      	ldr	r0, [r7, #8]
 8004a94:	f7ff fef0 	bl	8004878 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a98:	bf00      	nop
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	603b      	str	r3, [r7, #0]
 8004aac:	4613      	mov	r3, r2
 8004aae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ab0:	e03b      	b.n	8004b2a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ab2:	6a3b      	ldr	r3, [r7, #32]
 8004ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab8:	d037      	beq.n	8004b2a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aba:	f7fc fcc3 	bl	8001444 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	6a3a      	ldr	r2, [r7, #32]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d302      	bcc.n	8004ad0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004aca:	6a3b      	ldr	r3, [r7, #32]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e03a      	b.n	8004b4a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	f003 0304 	and.w	r3, r3, #4
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d023      	beq.n	8004b2a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	2b80      	cmp	r3, #128	@ 0x80
 8004ae6:	d020      	beq.n	8004b2a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	2b40      	cmp	r3, #64	@ 0x40
 8004aec:	d01d      	beq.n	8004b2a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0308 	and.w	r3, r3, #8
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	d116      	bne.n	8004b2a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004afc:	2300      	movs	r3, #0
 8004afe:	617b      	str	r3, [r7, #20]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	617b      	str	r3, [r7, #20]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	617b      	str	r3, [r7, #20]
 8004b10:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f000 f8e0 	bl	8004cd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2208      	movs	r2, #8
 8004b1c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e00f      	b.n	8004b4a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	4013      	ands	r3, r2
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	bf0c      	ite	eq
 8004b3a:	2301      	moveq	r3, #1
 8004b3c:	2300      	movne	r3, #0
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	461a      	mov	r2, r3
 8004b42:	79fb      	ldrb	r3, [r7, #7]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d0b4      	beq.n	8004ab2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3718      	adds	r7, #24
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
	...

08004b54 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b098      	sub	sp, #96	@ 0x60
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	88fa      	ldrh	r2, [r7, #6]
 8004b6c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2222      	movs	r2, #34	@ 0x22
 8004b78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b80:	4a3e      	ldr	r2, [pc, #248]	@ (8004c7c <UART_Start_Receive_DMA+0x128>)
 8004b82:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b88:	4a3d      	ldr	r2, [pc, #244]	@ (8004c80 <UART_Start_Receive_DMA+0x12c>)
 8004b8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b90:	4a3c      	ldr	r2, [pc, #240]	@ (8004c84 <UART_Start_Receive_DMA+0x130>)
 8004b92:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b98:	2200      	movs	r2, #0
 8004b9a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004b9c:	f107 0308 	add.w	r3, r7, #8
 8004ba0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	3304      	adds	r3, #4
 8004bac:	4619      	mov	r1, r3
 8004bae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	88fb      	ldrh	r3, [r7, #6]
 8004bb4:	f7fc fe36 	bl	8001824 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004bb8:	2300      	movs	r3, #0
 8004bba:	613b      	str	r3, [r7, #16]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	613b      	str	r3, [r7, #16]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	613b      	str	r3, [r7, #16]
 8004bcc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d019      	beq.n	8004c0a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	330c      	adds	r3, #12
 8004bdc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004be0:	e853 3f00 	ldrex	r3, [r3]
 8004be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004be6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bec:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	330c      	adds	r3, #12
 8004bf4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004bf6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004bf8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004bfc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004bfe:	e841 2300 	strex	r3, r2, [r1]
 8004c02:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004c04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1e5      	bne.n	8004bd6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	3314      	adds	r3, #20
 8004c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c14:	e853 3f00 	ldrex	r3, [r3]
 8004c18:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c1c:	f043 0301 	orr.w	r3, r3, #1
 8004c20:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	3314      	adds	r3, #20
 8004c28:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004c2a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004c2c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004c30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004c32:	e841 2300 	strex	r3, r2, [r1]
 8004c36:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1e5      	bne.n	8004c0a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	3314      	adds	r3, #20
 8004c44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	e853 3f00 	ldrex	r3, [r3]
 8004c4c:	617b      	str	r3, [r7, #20]
   return(result);
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c54:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	3314      	adds	r3, #20
 8004c5c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004c5e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004c60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c62:	6a39      	ldr	r1, [r7, #32]
 8004c64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c66:	e841 2300 	strex	r3, r2, [r1]
 8004c6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1e5      	bne.n	8004c3e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3760      	adds	r7, #96	@ 0x60
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	080048a5 	.word	0x080048a5
 8004c80:	080049d1 	.word	0x080049d1
 8004c84:	08004a0d 	.word	0x08004a0d

08004c88 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b089      	sub	sp, #36	@ 0x24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	330c      	adds	r3, #12
 8004c96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	e853 3f00 	ldrex	r3, [r3]
 8004c9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004ca6:	61fb      	str	r3, [r7, #28]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	330c      	adds	r3, #12
 8004cae:	69fa      	ldr	r2, [r7, #28]
 8004cb0:	61ba      	str	r2, [r7, #24]
 8004cb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb4:	6979      	ldr	r1, [r7, #20]
 8004cb6:	69ba      	ldr	r2, [r7, #24]
 8004cb8:	e841 2300 	strex	r3, r2, [r1]
 8004cbc:	613b      	str	r3, [r7, #16]
   return(result);
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1e5      	bne.n	8004c90 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004ccc:	bf00      	nop
 8004cce:	3724      	adds	r7, #36	@ 0x24
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b095      	sub	sp, #84	@ 0x54
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	330c      	adds	r3, #12
 8004ce6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cea:	e853 3f00 	ldrex	r3, [r3]
 8004cee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	330c      	adds	r3, #12
 8004cfe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d00:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d04:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d08:	e841 2300 	strex	r3, r2, [r1]
 8004d0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1e5      	bne.n	8004ce0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	3314      	adds	r3, #20
 8004d1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	e853 3f00 	ldrex	r3, [r3]
 8004d22:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	f023 0301 	bic.w	r3, r3, #1
 8004d2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	3314      	adds	r3, #20
 8004d32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d34:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d3c:	e841 2300 	strex	r3, r2, [r1]
 8004d40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1e5      	bne.n	8004d14 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d119      	bne.n	8004d84 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	330c      	adds	r3, #12
 8004d56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	e853 3f00 	ldrex	r3, [r3]
 8004d5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	f023 0310 	bic.w	r3, r3, #16
 8004d66:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	330c      	adds	r3, #12
 8004d6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d70:	61ba      	str	r2, [r7, #24]
 8004d72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d74:	6979      	ldr	r1, [r7, #20]
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	e841 2300 	strex	r3, r2, [r1]
 8004d7c:	613b      	str	r3, [r7, #16]
   return(result);
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1e5      	bne.n	8004d50 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2220      	movs	r2, #32
 8004d88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004d92:	bf00      	nop
 8004d94:	3754      	adds	r7, #84	@ 0x54
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr

08004d9e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b084      	sub	sp, #16
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004daa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f7ff fd5d 	bl	8004878 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dbe:	bf00      	nop
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b085      	sub	sp, #20
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b21      	cmp	r3, #33	@ 0x21
 8004dd8:	d13e      	bne.n	8004e58 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004de2:	d114      	bne.n	8004e0e <UART_Transmit_IT+0x48>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d110      	bne.n	8004e0e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a1b      	ldr	r3, [r3, #32]
 8004df0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	881b      	ldrh	r3, [r3, #0]
 8004df6:	461a      	mov	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e00:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	1c9a      	adds	r2, r3, #2
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	621a      	str	r2, [r3, #32]
 8004e0c:	e008      	b.n	8004e20 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	1c59      	adds	r1, r3, #1
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	6211      	str	r1, [r2, #32]
 8004e18:	781a      	ldrb	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	3b01      	subs	r3, #1
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d10f      	bne.n	8004e54 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68da      	ldr	r2, [r3, #12]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e42:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68da      	ldr	r2, [r3, #12]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e52:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e54:	2300      	movs	r3, #0
 8004e56:	e000      	b.n	8004e5a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e58:	2302      	movs	r3, #2
  }
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b082      	sub	sp, #8
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68da      	ldr	r2, [r3, #12]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e7c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2220      	movs	r2, #32
 8004e82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f7ff fcec 	bl	8004864 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3708      	adds	r7, #8
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b08c      	sub	sp, #48	@ 0x30
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b22      	cmp	r3, #34	@ 0x22
 8004ea8:	f040 80ae 	bne.w	8005008 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eb4:	d117      	bne.n	8004ee6 <UART_Receive_IT+0x50>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d113      	bne.n	8004ee6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ede:	1c9a      	adds	r2, r3, #2
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ee4:	e026      	b.n	8004f34 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004eec:	2300      	movs	r3, #0
 8004eee:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ef8:	d007      	beq.n	8004f0a <UART_Receive_IT+0x74>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10a      	bne.n	8004f18 <UART_Receive_IT+0x82>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d106      	bne.n	8004f18 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	b2da      	uxtb	r2, r3
 8004f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f14:	701a      	strb	r2, [r3, #0]
 8004f16:	e008      	b.n	8004f2a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f28:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f2e:	1c5a      	adds	r2, r3, #1
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	4619      	mov	r1, r3
 8004f42:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d15d      	bne.n	8005004 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 0220 	bic.w	r2, r2, #32
 8004f56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68da      	ldr	r2, [r3, #12]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	695a      	ldr	r2, [r3, #20]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 0201 	bic.w	r2, r2, #1
 8004f76:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d135      	bne.n	8004ffa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	330c      	adds	r3, #12
 8004f9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	e853 3f00 	ldrex	r3, [r3]
 8004fa2:	613b      	str	r3, [r7, #16]
   return(result);
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	f023 0310 	bic.w	r3, r3, #16
 8004faa:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	330c      	adds	r3, #12
 8004fb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fb4:	623a      	str	r2, [r7, #32]
 8004fb6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb8:	69f9      	ldr	r1, [r7, #28]
 8004fba:	6a3a      	ldr	r2, [r7, #32]
 8004fbc:	e841 2300 	strex	r3, r2, [r1]
 8004fc0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1e5      	bne.n	8004f94 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0310 	and.w	r3, r3, #16
 8004fd2:	2b10      	cmp	r3, #16
 8004fd4:	d10a      	bne.n	8004fec <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	60fb      	str	r3, [r7, #12]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	60fb      	str	r3, [r7, #12]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	60fb      	str	r3, [r7, #12]
 8004fea:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7ff fc4a 	bl	800488c <HAL_UARTEx_RxEventCallback>
 8004ff8:	e002      	b.n	8005000 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7fb fafc 	bl	80005f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005000:	2300      	movs	r3, #0
 8005002:	e002      	b.n	800500a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005004:	2300      	movs	r3, #0
 8005006:	e000      	b.n	800500a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005008:	2302      	movs	r3, #2
  }
}
 800500a:	4618      	mov	r0, r3
 800500c:	3730      	adds	r7, #48	@ 0x30
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
	...

08005014 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005018:	b0c0      	sub	sp, #256	@ 0x100
 800501a:	af00      	add	r7, sp, #0
 800501c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800502c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005030:	68d9      	ldr	r1, [r3, #12]
 8005032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	ea40 0301 	orr.w	r3, r0, r1
 800503c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800503e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005042:	689a      	ldr	r2, [r3, #8]
 8005044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	431a      	orrs	r2, r3
 800504c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	431a      	orrs	r2, r3
 8005054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	4313      	orrs	r3, r2
 800505c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800506c:	f021 010c 	bic.w	r1, r1, #12
 8005070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800507a:	430b      	orrs	r3, r1
 800507c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800507e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800508a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800508e:	6999      	ldr	r1, [r3, #24]
 8005090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	ea40 0301 	orr.w	r3, r0, r1
 800509a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800509c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	4b8f      	ldr	r3, [pc, #572]	@ (80052e0 <UART_SetConfig+0x2cc>)
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d005      	beq.n	80050b4 <UART_SetConfig+0xa0>
 80050a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	4b8d      	ldr	r3, [pc, #564]	@ (80052e4 <UART_SetConfig+0x2d0>)
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d104      	bne.n	80050be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050b4:	f7fe ffa6 	bl	8004004 <HAL_RCC_GetPCLK2Freq>
 80050b8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80050bc:	e003      	b.n	80050c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050be:	f7fe ff8d 	bl	8003fdc <HAL_RCC_GetPCLK1Freq>
 80050c2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ca:	69db      	ldr	r3, [r3, #28]
 80050cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050d0:	f040 810c 	bne.w	80052ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050d8:	2200      	movs	r2, #0
 80050da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80050de:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80050e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80050e6:	4622      	mov	r2, r4
 80050e8:	462b      	mov	r3, r5
 80050ea:	1891      	adds	r1, r2, r2
 80050ec:	65b9      	str	r1, [r7, #88]	@ 0x58
 80050ee:	415b      	adcs	r3, r3
 80050f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80050f6:	4621      	mov	r1, r4
 80050f8:	eb12 0801 	adds.w	r8, r2, r1
 80050fc:	4629      	mov	r1, r5
 80050fe:	eb43 0901 	adc.w	r9, r3, r1
 8005102:	f04f 0200 	mov.w	r2, #0
 8005106:	f04f 0300 	mov.w	r3, #0
 800510a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800510e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005112:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005116:	4690      	mov	r8, r2
 8005118:	4699      	mov	r9, r3
 800511a:	4623      	mov	r3, r4
 800511c:	eb18 0303 	adds.w	r3, r8, r3
 8005120:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005124:	462b      	mov	r3, r5
 8005126:	eb49 0303 	adc.w	r3, r9, r3
 800512a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800512e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800513a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800513e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005142:	460b      	mov	r3, r1
 8005144:	18db      	adds	r3, r3, r3
 8005146:	653b      	str	r3, [r7, #80]	@ 0x50
 8005148:	4613      	mov	r3, r2
 800514a:	eb42 0303 	adc.w	r3, r2, r3
 800514e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005150:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005154:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005158:	f7fb f89a 	bl	8000290 <__aeabi_uldivmod>
 800515c:	4602      	mov	r2, r0
 800515e:	460b      	mov	r3, r1
 8005160:	4b61      	ldr	r3, [pc, #388]	@ (80052e8 <UART_SetConfig+0x2d4>)
 8005162:	fba3 2302 	umull	r2, r3, r3, r2
 8005166:	095b      	lsrs	r3, r3, #5
 8005168:	011c      	lsls	r4, r3, #4
 800516a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800516e:	2200      	movs	r2, #0
 8005170:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005174:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005178:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800517c:	4642      	mov	r2, r8
 800517e:	464b      	mov	r3, r9
 8005180:	1891      	adds	r1, r2, r2
 8005182:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005184:	415b      	adcs	r3, r3
 8005186:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005188:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800518c:	4641      	mov	r1, r8
 800518e:	eb12 0a01 	adds.w	sl, r2, r1
 8005192:	4649      	mov	r1, r9
 8005194:	eb43 0b01 	adc.w	fp, r3, r1
 8005198:	f04f 0200 	mov.w	r2, #0
 800519c:	f04f 0300 	mov.w	r3, #0
 80051a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80051a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80051a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051ac:	4692      	mov	sl, r2
 80051ae:	469b      	mov	fp, r3
 80051b0:	4643      	mov	r3, r8
 80051b2:	eb1a 0303 	adds.w	r3, sl, r3
 80051b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051ba:	464b      	mov	r3, r9
 80051bc:	eb4b 0303 	adc.w	r3, fp, r3
 80051c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80051c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80051d0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80051d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80051d8:	460b      	mov	r3, r1
 80051da:	18db      	adds	r3, r3, r3
 80051dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80051de:	4613      	mov	r3, r2
 80051e0:	eb42 0303 	adc.w	r3, r2, r3
 80051e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80051e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80051ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80051ee:	f7fb f84f 	bl	8000290 <__aeabi_uldivmod>
 80051f2:	4602      	mov	r2, r0
 80051f4:	460b      	mov	r3, r1
 80051f6:	4611      	mov	r1, r2
 80051f8:	4b3b      	ldr	r3, [pc, #236]	@ (80052e8 <UART_SetConfig+0x2d4>)
 80051fa:	fba3 2301 	umull	r2, r3, r3, r1
 80051fe:	095b      	lsrs	r3, r3, #5
 8005200:	2264      	movs	r2, #100	@ 0x64
 8005202:	fb02 f303 	mul.w	r3, r2, r3
 8005206:	1acb      	subs	r3, r1, r3
 8005208:	00db      	lsls	r3, r3, #3
 800520a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800520e:	4b36      	ldr	r3, [pc, #216]	@ (80052e8 <UART_SetConfig+0x2d4>)
 8005210:	fba3 2302 	umull	r2, r3, r3, r2
 8005214:	095b      	lsrs	r3, r3, #5
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800521c:	441c      	add	r4, r3
 800521e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005222:	2200      	movs	r2, #0
 8005224:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005228:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800522c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005230:	4642      	mov	r2, r8
 8005232:	464b      	mov	r3, r9
 8005234:	1891      	adds	r1, r2, r2
 8005236:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005238:	415b      	adcs	r3, r3
 800523a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800523c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005240:	4641      	mov	r1, r8
 8005242:	1851      	adds	r1, r2, r1
 8005244:	6339      	str	r1, [r7, #48]	@ 0x30
 8005246:	4649      	mov	r1, r9
 8005248:	414b      	adcs	r3, r1
 800524a:	637b      	str	r3, [r7, #52]	@ 0x34
 800524c:	f04f 0200 	mov.w	r2, #0
 8005250:	f04f 0300 	mov.w	r3, #0
 8005254:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005258:	4659      	mov	r1, fp
 800525a:	00cb      	lsls	r3, r1, #3
 800525c:	4651      	mov	r1, sl
 800525e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005262:	4651      	mov	r1, sl
 8005264:	00ca      	lsls	r2, r1, #3
 8005266:	4610      	mov	r0, r2
 8005268:	4619      	mov	r1, r3
 800526a:	4603      	mov	r3, r0
 800526c:	4642      	mov	r2, r8
 800526e:	189b      	adds	r3, r3, r2
 8005270:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005274:	464b      	mov	r3, r9
 8005276:	460a      	mov	r2, r1
 8005278:	eb42 0303 	adc.w	r3, r2, r3
 800527c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800528c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005290:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005294:	460b      	mov	r3, r1
 8005296:	18db      	adds	r3, r3, r3
 8005298:	62bb      	str	r3, [r7, #40]	@ 0x28
 800529a:	4613      	mov	r3, r2
 800529c:	eb42 0303 	adc.w	r3, r2, r3
 80052a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80052a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80052aa:	f7fa fff1 	bl	8000290 <__aeabi_uldivmod>
 80052ae:	4602      	mov	r2, r0
 80052b0:	460b      	mov	r3, r1
 80052b2:	4b0d      	ldr	r3, [pc, #52]	@ (80052e8 <UART_SetConfig+0x2d4>)
 80052b4:	fba3 1302 	umull	r1, r3, r3, r2
 80052b8:	095b      	lsrs	r3, r3, #5
 80052ba:	2164      	movs	r1, #100	@ 0x64
 80052bc:	fb01 f303 	mul.w	r3, r1, r3
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	3332      	adds	r3, #50	@ 0x32
 80052c6:	4a08      	ldr	r2, [pc, #32]	@ (80052e8 <UART_SetConfig+0x2d4>)
 80052c8:	fba2 2303 	umull	r2, r3, r2, r3
 80052cc:	095b      	lsrs	r3, r3, #5
 80052ce:	f003 0207 	and.w	r2, r3, #7
 80052d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4422      	add	r2, r4
 80052da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052dc:	e106      	b.n	80054ec <UART_SetConfig+0x4d8>
 80052de:	bf00      	nop
 80052e0:	40011000 	.word	0x40011000
 80052e4:	40011400 	.word	0x40011400
 80052e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052f0:	2200      	movs	r2, #0
 80052f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80052f6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80052fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80052fe:	4642      	mov	r2, r8
 8005300:	464b      	mov	r3, r9
 8005302:	1891      	adds	r1, r2, r2
 8005304:	6239      	str	r1, [r7, #32]
 8005306:	415b      	adcs	r3, r3
 8005308:	627b      	str	r3, [r7, #36]	@ 0x24
 800530a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800530e:	4641      	mov	r1, r8
 8005310:	1854      	adds	r4, r2, r1
 8005312:	4649      	mov	r1, r9
 8005314:	eb43 0501 	adc.w	r5, r3, r1
 8005318:	f04f 0200 	mov.w	r2, #0
 800531c:	f04f 0300 	mov.w	r3, #0
 8005320:	00eb      	lsls	r3, r5, #3
 8005322:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005326:	00e2      	lsls	r2, r4, #3
 8005328:	4614      	mov	r4, r2
 800532a:	461d      	mov	r5, r3
 800532c:	4643      	mov	r3, r8
 800532e:	18e3      	adds	r3, r4, r3
 8005330:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005334:	464b      	mov	r3, r9
 8005336:	eb45 0303 	adc.w	r3, r5, r3
 800533a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800533e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800534a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800534e:	f04f 0200 	mov.w	r2, #0
 8005352:	f04f 0300 	mov.w	r3, #0
 8005356:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800535a:	4629      	mov	r1, r5
 800535c:	008b      	lsls	r3, r1, #2
 800535e:	4621      	mov	r1, r4
 8005360:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005364:	4621      	mov	r1, r4
 8005366:	008a      	lsls	r2, r1, #2
 8005368:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800536c:	f7fa ff90 	bl	8000290 <__aeabi_uldivmod>
 8005370:	4602      	mov	r2, r0
 8005372:	460b      	mov	r3, r1
 8005374:	4b60      	ldr	r3, [pc, #384]	@ (80054f8 <UART_SetConfig+0x4e4>)
 8005376:	fba3 2302 	umull	r2, r3, r3, r2
 800537a:	095b      	lsrs	r3, r3, #5
 800537c:	011c      	lsls	r4, r3, #4
 800537e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005382:	2200      	movs	r2, #0
 8005384:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005388:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800538c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005390:	4642      	mov	r2, r8
 8005392:	464b      	mov	r3, r9
 8005394:	1891      	adds	r1, r2, r2
 8005396:	61b9      	str	r1, [r7, #24]
 8005398:	415b      	adcs	r3, r3
 800539a:	61fb      	str	r3, [r7, #28]
 800539c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053a0:	4641      	mov	r1, r8
 80053a2:	1851      	adds	r1, r2, r1
 80053a4:	6139      	str	r1, [r7, #16]
 80053a6:	4649      	mov	r1, r9
 80053a8:	414b      	adcs	r3, r1
 80053aa:	617b      	str	r3, [r7, #20]
 80053ac:	f04f 0200 	mov.w	r2, #0
 80053b0:	f04f 0300 	mov.w	r3, #0
 80053b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053b8:	4659      	mov	r1, fp
 80053ba:	00cb      	lsls	r3, r1, #3
 80053bc:	4651      	mov	r1, sl
 80053be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053c2:	4651      	mov	r1, sl
 80053c4:	00ca      	lsls	r2, r1, #3
 80053c6:	4610      	mov	r0, r2
 80053c8:	4619      	mov	r1, r3
 80053ca:	4603      	mov	r3, r0
 80053cc:	4642      	mov	r2, r8
 80053ce:	189b      	adds	r3, r3, r2
 80053d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80053d4:	464b      	mov	r3, r9
 80053d6:	460a      	mov	r2, r1
 80053d8:	eb42 0303 	adc.w	r3, r2, r3
 80053dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80053e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80053ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80053ec:	f04f 0200 	mov.w	r2, #0
 80053f0:	f04f 0300 	mov.w	r3, #0
 80053f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80053f8:	4649      	mov	r1, r9
 80053fa:	008b      	lsls	r3, r1, #2
 80053fc:	4641      	mov	r1, r8
 80053fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005402:	4641      	mov	r1, r8
 8005404:	008a      	lsls	r2, r1, #2
 8005406:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800540a:	f7fa ff41 	bl	8000290 <__aeabi_uldivmod>
 800540e:	4602      	mov	r2, r0
 8005410:	460b      	mov	r3, r1
 8005412:	4611      	mov	r1, r2
 8005414:	4b38      	ldr	r3, [pc, #224]	@ (80054f8 <UART_SetConfig+0x4e4>)
 8005416:	fba3 2301 	umull	r2, r3, r3, r1
 800541a:	095b      	lsrs	r3, r3, #5
 800541c:	2264      	movs	r2, #100	@ 0x64
 800541e:	fb02 f303 	mul.w	r3, r2, r3
 8005422:	1acb      	subs	r3, r1, r3
 8005424:	011b      	lsls	r3, r3, #4
 8005426:	3332      	adds	r3, #50	@ 0x32
 8005428:	4a33      	ldr	r2, [pc, #204]	@ (80054f8 <UART_SetConfig+0x4e4>)
 800542a:	fba2 2303 	umull	r2, r3, r2, r3
 800542e:	095b      	lsrs	r3, r3, #5
 8005430:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005434:	441c      	add	r4, r3
 8005436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800543a:	2200      	movs	r2, #0
 800543c:	673b      	str	r3, [r7, #112]	@ 0x70
 800543e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005440:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005444:	4642      	mov	r2, r8
 8005446:	464b      	mov	r3, r9
 8005448:	1891      	adds	r1, r2, r2
 800544a:	60b9      	str	r1, [r7, #8]
 800544c:	415b      	adcs	r3, r3
 800544e:	60fb      	str	r3, [r7, #12]
 8005450:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005454:	4641      	mov	r1, r8
 8005456:	1851      	adds	r1, r2, r1
 8005458:	6039      	str	r1, [r7, #0]
 800545a:	4649      	mov	r1, r9
 800545c:	414b      	adcs	r3, r1
 800545e:	607b      	str	r3, [r7, #4]
 8005460:	f04f 0200 	mov.w	r2, #0
 8005464:	f04f 0300 	mov.w	r3, #0
 8005468:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800546c:	4659      	mov	r1, fp
 800546e:	00cb      	lsls	r3, r1, #3
 8005470:	4651      	mov	r1, sl
 8005472:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005476:	4651      	mov	r1, sl
 8005478:	00ca      	lsls	r2, r1, #3
 800547a:	4610      	mov	r0, r2
 800547c:	4619      	mov	r1, r3
 800547e:	4603      	mov	r3, r0
 8005480:	4642      	mov	r2, r8
 8005482:	189b      	adds	r3, r3, r2
 8005484:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005486:	464b      	mov	r3, r9
 8005488:	460a      	mov	r2, r1
 800548a:	eb42 0303 	adc.w	r3, r2, r3
 800548e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	663b      	str	r3, [r7, #96]	@ 0x60
 800549a:	667a      	str	r2, [r7, #100]	@ 0x64
 800549c:	f04f 0200 	mov.w	r2, #0
 80054a0:	f04f 0300 	mov.w	r3, #0
 80054a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80054a8:	4649      	mov	r1, r9
 80054aa:	008b      	lsls	r3, r1, #2
 80054ac:	4641      	mov	r1, r8
 80054ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054b2:	4641      	mov	r1, r8
 80054b4:	008a      	lsls	r2, r1, #2
 80054b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80054ba:	f7fa fee9 	bl	8000290 <__aeabi_uldivmod>
 80054be:	4602      	mov	r2, r0
 80054c0:	460b      	mov	r3, r1
 80054c2:	4b0d      	ldr	r3, [pc, #52]	@ (80054f8 <UART_SetConfig+0x4e4>)
 80054c4:	fba3 1302 	umull	r1, r3, r3, r2
 80054c8:	095b      	lsrs	r3, r3, #5
 80054ca:	2164      	movs	r1, #100	@ 0x64
 80054cc:	fb01 f303 	mul.w	r3, r1, r3
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	011b      	lsls	r3, r3, #4
 80054d4:	3332      	adds	r3, #50	@ 0x32
 80054d6:	4a08      	ldr	r2, [pc, #32]	@ (80054f8 <UART_SetConfig+0x4e4>)
 80054d8:	fba2 2303 	umull	r2, r3, r2, r3
 80054dc:	095b      	lsrs	r3, r3, #5
 80054de:	f003 020f 	and.w	r2, r3, #15
 80054e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4422      	add	r2, r4
 80054ea:	609a      	str	r2, [r3, #8]
}
 80054ec:	bf00      	nop
 80054ee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80054f2:	46bd      	mov	sp, r7
 80054f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054f8:	51eb851f 	.word	0x51eb851f

080054fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054fc:	b084      	sub	sp, #16
 80054fe:	b580      	push	{r7, lr}
 8005500:	b084      	sub	sp, #16
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
 8005506:	f107 001c 	add.w	r0, r7, #28
 800550a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800550e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005512:	2b01      	cmp	r3, #1
 8005514:	d123      	bne.n	800555e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800551a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800552a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800553e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005542:	2b01      	cmp	r3, #1
 8005544:	d105      	bne.n	8005552 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f001 fae8 	bl	8006b28 <USB_CoreReset>
 8005558:	4603      	mov	r3, r0
 800555a:	73fb      	strb	r3, [r7, #15]
 800555c:	e01b      	b.n	8005596 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f001 fadc 	bl	8006b28 <USB_CoreReset>
 8005570:	4603      	mov	r3, r0
 8005572:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005574:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005578:	2b00      	cmp	r3, #0
 800557a:	d106      	bne.n	800558a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005580:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	639a      	str	r2, [r3, #56]	@ 0x38
 8005588:	e005      	b.n	8005596 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800558e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005596:	7fbb      	ldrb	r3, [r7, #30]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d10b      	bne.n	80055b4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f043 0206 	orr.w	r2, r3, #6
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f043 0220 	orr.w	r2, r3, #32
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80055b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055c0:	b004      	add	sp, #16
 80055c2:	4770      	bx	lr

080055c4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b087      	sub	sp, #28
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	4613      	mov	r3, r2
 80055d0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80055d2:	79fb      	ldrb	r3, [r7, #7]
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d165      	bne.n	80056a4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	4a41      	ldr	r2, [pc, #260]	@ (80056e0 <USB_SetTurnaroundTime+0x11c>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d906      	bls.n	80055ee <USB_SetTurnaroundTime+0x2a>
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	4a40      	ldr	r2, [pc, #256]	@ (80056e4 <USB_SetTurnaroundTime+0x120>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d202      	bcs.n	80055ee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80055e8:	230f      	movs	r3, #15
 80055ea:	617b      	str	r3, [r7, #20]
 80055ec:	e062      	b.n	80056b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	4a3c      	ldr	r2, [pc, #240]	@ (80056e4 <USB_SetTurnaroundTime+0x120>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d306      	bcc.n	8005604 <USB_SetTurnaroundTime+0x40>
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	4a3b      	ldr	r2, [pc, #236]	@ (80056e8 <USB_SetTurnaroundTime+0x124>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d202      	bcs.n	8005604 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80055fe:	230e      	movs	r3, #14
 8005600:	617b      	str	r3, [r7, #20]
 8005602:	e057      	b.n	80056b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	4a38      	ldr	r2, [pc, #224]	@ (80056e8 <USB_SetTurnaroundTime+0x124>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d306      	bcc.n	800561a <USB_SetTurnaroundTime+0x56>
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	4a37      	ldr	r2, [pc, #220]	@ (80056ec <USB_SetTurnaroundTime+0x128>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d202      	bcs.n	800561a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005614:	230d      	movs	r3, #13
 8005616:	617b      	str	r3, [r7, #20]
 8005618:	e04c      	b.n	80056b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	4a33      	ldr	r2, [pc, #204]	@ (80056ec <USB_SetTurnaroundTime+0x128>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d306      	bcc.n	8005630 <USB_SetTurnaroundTime+0x6c>
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	4a32      	ldr	r2, [pc, #200]	@ (80056f0 <USB_SetTurnaroundTime+0x12c>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d802      	bhi.n	8005630 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800562a:	230c      	movs	r3, #12
 800562c:	617b      	str	r3, [r7, #20]
 800562e:	e041      	b.n	80056b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	4a2f      	ldr	r2, [pc, #188]	@ (80056f0 <USB_SetTurnaroundTime+0x12c>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d906      	bls.n	8005646 <USB_SetTurnaroundTime+0x82>
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	4a2e      	ldr	r2, [pc, #184]	@ (80056f4 <USB_SetTurnaroundTime+0x130>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d802      	bhi.n	8005646 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005640:	230b      	movs	r3, #11
 8005642:	617b      	str	r3, [r7, #20]
 8005644:	e036      	b.n	80056b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	4a2a      	ldr	r2, [pc, #168]	@ (80056f4 <USB_SetTurnaroundTime+0x130>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d906      	bls.n	800565c <USB_SetTurnaroundTime+0x98>
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	4a29      	ldr	r2, [pc, #164]	@ (80056f8 <USB_SetTurnaroundTime+0x134>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d802      	bhi.n	800565c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005656:	230a      	movs	r3, #10
 8005658:	617b      	str	r3, [r7, #20]
 800565a:	e02b      	b.n	80056b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	4a26      	ldr	r2, [pc, #152]	@ (80056f8 <USB_SetTurnaroundTime+0x134>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d906      	bls.n	8005672 <USB_SetTurnaroundTime+0xae>
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	4a25      	ldr	r2, [pc, #148]	@ (80056fc <USB_SetTurnaroundTime+0x138>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d202      	bcs.n	8005672 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800566c:	2309      	movs	r3, #9
 800566e:	617b      	str	r3, [r7, #20]
 8005670:	e020      	b.n	80056b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	4a21      	ldr	r2, [pc, #132]	@ (80056fc <USB_SetTurnaroundTime+0x138>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d306      	bcc.n	8005688 <USB_SetTurnaroundTime+0xc4>
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	4a20      	ldr	r2, [pc, #128]	@ (8005700 <USB_SetTurnaroundTime+0x13c>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d802      	bhi.n	8005688 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005682:	2308      	movs	r3, #8
 8005684:	617b      	str	r3, [r7, #20]
 8005686:	e015      	b.n	80056b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	4a1d      	ldr	r2, [pc, #116]	@ (8005700 <USB_SetTurnaroundTime+0x13c>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d906      	bls.n	800569e <USB_SetTurnaroundTime+0xda>
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	4a1c      	ldr	r2, [pc, #112]	@ (8005704 <USB_SetTurnaroundTime+0x140>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d202      	bcs.n	800569e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005698:	2307      	movs	r3, #7
 800569a:	617b      	str	r3, [r7, #20]
 800569c:	e00a      	b.n	80056b4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800569e:	2306      	movs	r3, #6
 80056a0:	617b      	str	r3, [r7, #20]
 80056a2:	e007      	b.n	80056b4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80056a4:	79fb      	ldrb	r3, [r7, #7]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d102      	bne.n	80056b0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80056aa:	2309      	movs	r3, #9
 80056ac:	617b      	str	r3, [r7, #20]
 80056ae:	e001      	b.n	80056b4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80056b0:	2309      	movs	r3, #9
 80056b2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	68da      	ldr	r2, [r3, #12]
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	029b      	lsls	r3, r3, #10
 80056c8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80056cc:	431a      	orrs	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	371c      	adds	r7, #28
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr
 80056e0:	00d8acbf 	.word	0x00d8acbf
 80056e4:	00e4e1c0 	.word	0x00e4e1c0
 80056e8:	00f42400 	.word	0x00f42400
 80056ec:	01067380 	.word	0x01067380
 80056f0:	011a499f 	.word	0x011a499f
 80056f4:	01312cff 	.word	0x01312cff
 80056f8:	014ca43f 	.word	0x014ca43f
 80056fc:	016e3600 	.word	0x016e3600
 8005700:	01a6ab1f 	.word	0x01a6ab1f
 8005704:	01e84800 	.word	0x01e84800

08005708 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f043 0201 	orr.w	r2, r3, #1
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800572a:	b480      	push	{r7}
 800572c:	b083      	sub	sp, #12
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f023 0201 	bic.w	r2, r3, #1
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	460b      	mov	r3, r1
 8005756:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005758:	2300      	movs	r3, #0
 800575a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005768:	78fb      	ldrb	r3, [r7, #3]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d115      	bne.n	800579a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800577a:	200a      	movs	r0, #10
 800577c:	f7fb fe6e 	bl	800145c <HAL_Delay>
      ms += 10U;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	330a      	adds	r3, #10
 8005784:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f001 f93f 	bl	8006a0a <USB_GetMode>
 800578c:	4603      	mov	r3, r0
 800578e:	2b01      	cmp	r3, #1
 8005790:	d01e      	beq.n	80057d0 <USB_SetCurrentMode+0x84>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2bc7      	cmp	r3, #199	@ 0xc7
 8005796:	d9f0      	bls.n	800577a <USB_SetCurrentMode+0x2e>
 8005798:	e01a      	b.n	80057d0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800579a:	78fb      	ldrb	r3, [r7, #3]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d115      	bne.n	80057cc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80057ac:	200a      	movs	r0, #10
 80057ae:	f7fb fe55 	bl	800145c <HAL_Delay>
      ms += 10U;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	330a      	adds	r3, #10
 80057b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f001 f926 	bl	8006a0a <USB_GetMode>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d005      	beq.n	80057d0 <USB_SetCurrentMode+0x84>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2bc7      	cmp	r3, #199	@ 0xc7
 80057c8:	d9f0      	bls.n	80057ac <USB_SetCurrentMode+0x60>
 80057ca:	e001      	b.n	80057d0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e005      	b.n	80057dc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2bc8      	cmp	r3, #200	@ 0xc8
 80057d4:	d101      	bne.n	80057da <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e000      	b.n	80057dc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057e4:	b084      	sub	sp, #16
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b086      	sub	sp, #24
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
 80057ee:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80057f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80057f6:	2300      	movs	r3, #0
 80057f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80057fe:	2300      	movs	r3, #0
 8005800:	613b      	str	r3, [r7, #16]
 8005802:	e009      	b.n	8005818 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	3340      	adds	r3, #64	@ 0x40
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	4413      	add	r3, r2
 800580e:	2200      	movs	r2, #0
 8005810:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	3301      	adds	r3, #1
 8005816:	613b      	str	r3, [r7, #16]
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	2b0e      	cmp	r3, #14
 800581c:	d9f2      	bls.n	8005804 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800581e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005822:	2b00      	cmp	r3, #0
 8005824:	d11c      	bne.n	8005860 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005834:	f043 0302 	orr.w	r3, r3, #2
 8005838:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800583e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800584a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005856:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	639a      	str	r2, [r3, #56]	@ 0x38
 800585e:	e00b      	b.n	8005878 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005864:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005870:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800587e:	461a      	mov	r2, r3
 8005880:	2300      	movs	r3, #0
 8005882:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005884:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005888:	2b01      	cmp	r3, #1
 800588a:	d10d      	bne.n	80058a8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800588c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005890:	2b00      	cmp	r3, #0
 8005892:	d104      	bne.n	800589e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005894:	2100      	movs	r1, #0
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f968 	bl	8005b6c <USB_SetDevSpeed>
 800589c:	e008      	b.n	80058b0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800589e:	2101      	movs	r1, #1
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 f963 	bl	8005b6c <USB_SetDevSpeed>
 80058a6:	e003      	b.n	80058b0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80058a8:	2103      	movs	r1, #3
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f95e 	bl	8005b6c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80058b0:	2110      	movs	r1, #16
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 f8fa 	bl	8005aac <USB_FlushTxFifo>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d001      	beq.n	80058c2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f924 	bl	8005b10 <USB_FlushRxFifo>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d001      	beq.n	80058d2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058d8:	461a      	mov	r2, r3
 80058da:	2300      	movs	r3, #0
 80058dc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058e4:	461a      	mov	r2, r3
 80058e6:	2300      	movs	r3, #0
 80058e8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058f0:	461a      	mov	r2, r3
 80058f2:	2300      	movs	r3, #0
 80058f4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058f6:	2300      	movs	r3, #0
 80058f8:	613b      	str	r3, [r7, #16]
 80058fa:	e043      	b.n	8005984 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	015a      	lsls	r2, r3, #5
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	4413      	add	r3, r2
 8005904:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800590e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005912:	d118      	bne.n	8005946 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d10a      	bne.n	8005930 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	015a      	lsls	r2, r3, #5
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	4413      	add	r3, r2
 8005922:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005926:	461a      	mov	r2, r3
 8005928:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800592c:	6013      	str	r3, [r2, #0]
 800592e:	e013      	b.n	8005958 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	015a      	lsls	r2, r3, #5
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	4413      	add	r3, r2
 8005938:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800593c:	461a      	mov	r2, r3
 800593e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005942:	6013      	str	r3, [r2, #0]
 8005944:	e008      	b.n	8005958 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	015a      	lsls	r2, r3, #5
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	4413      	add	r3, r2
 800594e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005952:	461a      	mov	r2, r3
 8005954:	2300      	movs	r3, #0
 8005956:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	015a      	lsls	r2, r3, #5
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	4413      	add	r3, r2
 8005960:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005964:	461a      	mov	r2, r3
 8005966:	2300      	movs	r3, #0
 8005968:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	015a      	lsls	r2, r3, #5
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	4413      	add	r3, r2
 8005972:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005976:	461a      	mov	r2, r3
 8005978:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800597c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	3301      	adds	r3, #1
 8005982:	613b      	str	r3, [r7, #16]
 8005984:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005988:	461a      	mov	r2, r3
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	4293      	cmp	r3, r2
 800598e:	d3b5      	bcc.n	80058fc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005990:	2300      	movs	r3, #0
 8005992:	613b      	str	r3, [r7, #16]
 8005994:	e043      	b.n	8005a1e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	015a      	lsls	r2, r3, #5
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	4413      	add	r3, r2
 800599e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80059a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80059ac:	d118      	bne.n	80059e0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10a      	bne.n	80059ca <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059c0:	461a      	mov	r2, r3
 80059c2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80059c6:	6013      	str	r3, [r2, #0]
 80059c8:	e013      	b.n	80059f2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	015a      	lsls	r2, r3, #5
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	4413      	add	r3, r2
 80059d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059d6:	461a      	mov	r2, r3
 80059d8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80059dc:	6013      	str	r3, [r2, #0]
 80059de:	e008      	b.n	80059f2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	015a      	lsls	r2, r3, #5
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	4413      	add	r3, r2
 80059e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059ec:	461a      	mov	r2, r3
 80059ee:	2300      	movs	r3, #0
 80059f0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	015a      	lsls	r2, r3, #5
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	4413      	add	r3, r2
 80059fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059fe:	461a      	mov	r2, r3
 8005a00:	2300      	movs	r3, #0
 8005a02:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	015a      	lsls	r2, r3, #5
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a10:	461a      	mov	r2, r3
 8005a12:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005a16:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	613b      	str	r3, [r7, #16]
 8005a1e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005a22:	461a      	mov	r2, r3
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d3b5      	bcc.n	8005996 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a3c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005a4a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005a4c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d105      	bne.n	8005a60 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	f043 0210 	orr.w	r2, r3, #16
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	699a      	ldr	r2, [r3, #24]
 8005a64:	4b10      	ldr	r3, [pc, #64]	@ (8005aa8 <USB_DevInit+0x2c4>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005a6c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d005      	beq.n	8005a80 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	f043 0208 	orr.w	r2, r3, #8
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005a80:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d107      	bne.n	8005a98 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005a90:	f043 0304 	orr.w	r3, r3, #4
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005a98:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3718      	adds	r7, #24
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005aa4:	b004      	add	sp, #16
 8005aa6:	4770      	bx	lr
 8005aa8:	803c3800 	.word	0x803c3800

08005aac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	3301      	adds	r3, #1
 8005abe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ac6:	d901      	bls.n	8005acc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e01b      	b.n	8005b04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	daf2      	bge.n	8005aba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	019b      	lsls	r3, r3, #6
 8005adc:	f043 0220 	orr.w	r2, r3, #32
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005af0:	d901      	bls.n	8005af6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e006      	b.n	8005b04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	f003 0320 	and.w	r3, r3, #32
 8005afe:	2b20      	cmp	r3, #32
 8005b00:	d0f0      	beq.n	8005ae4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3714      	adds	r7, #20
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b28:	d901      	bls.n	8005b2e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e018      	b.n	8005b60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	daf2      	bge.n	8005b1c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005b36:	2300      	movs	r3, #0
 8005b38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2210      	movs	r2, #16
 8005b3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	3301      	adds	r3, #1
 8005b44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b4c:	d901      	bls.n	8005b52 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e006      	b.n	8005b60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	f003 0310 	and.w	r3, r3, #16
 8005b5a:	2b10      	cmp	r3, #16
 8005b5c:	d0f0      	beq.n	8005b40 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3714      	adds	r7, #20
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	460b      	mov	r3, r1
 8005b76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	78fb      	ldrb	r3, [r7, #3]
 8005b86:	68f9      	ldr	r1, [r7, #12]
 8005b88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3714      	adds	r7, #20
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr

08005b9e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b087      	sub	sp, #28
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f003 0306 	and.w	r3, r3, #6
 8005bb6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d102      	bne.n	8005bc4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	75fb      	strb	r3, [r7, #23]
 8005bc2:	e00a      	b.n	8005bda <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d002      	beq.n	8005bd0 <USB_GetDevSpeed+0x32>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2b06      	cmp	r3, #6
 8005bce:	d102      	bne.n	8005bd6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	75fb      	strb	r3, [r7, #23]
 8005bd4:	e001      	b.n	8005bda <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005bd6:	230f      	movs	r3, #15
 8005bd8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	371c      	adds	r7, #28
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	785b      	ldrb	r3, [r3, #1]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d13a      	bne.n	8005c7a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c0a:	69da      	ldr	r2, [r3, #28]
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	f003 030f 	and.w	r3, r3, #15
 8005c14:	2101      	movs	r1, #1
 8005c16:	fa01 f303 	lsl.w	r3, r1, r3
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	68f9      	ldr	r1, [r7, #12]
 8005c1e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c22:	4313      	orrs	r3, r2
 8005c24:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	015a      	lsls	r2, r3, #5
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d155      	bne.n	8005ce8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	791b      	ldrb	r3, [r3, #4]
 8005c56:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c58:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	059b      	lsls	r3, r3, #22
 8005c5e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c60:	4313      	orrs	r3, r2
 8005c62:	68ba      	ldr	r2, [r7, #8]
 8005c64:	0151      	lsls	r1, r2, #5
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	440a      	add	r2, r1
 8005c6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c76:	6013      	str	r3, [r2, #0]
 8005c78:	e036      	b.n	8005ce8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c80:	69da      	ldr	r2, [r3, #28]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	f003 030f 	and.w	r3, r3, #15
 8005c8a:	2101      	movs	r1, #1
 8005c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c90:	041b      	lsls	r3, r3, #16
 8005c92:	68f9      	ldr	r1, [r7, #12]
 8005c94:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	015a      	lsls	r2, r3, #5
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d11a      	bne.n	8005ce8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	015a      	lsls	r2, r3, #5
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	4413      	add	r3, r2
 8005cba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	791b      	ldrb	r3, [r3, #4]
 8005ccc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005cce:	430b      	orrs	r3, r1
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	0151      	lsls	r1, r2, #5
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	440a      	add	r2, r1
 8005cda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ce2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ce6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
	...

08005cf8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	785b      	ldrb	r3, [r3, #1]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d161      	bne.n	8005dd8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d2a:	d11f      	bne.n	8005d6c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	0151      	lsls	r1, r2, #5
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	440a      	add	r2, r1
 8005d42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d46:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005d4a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	0151      	lsls	r1, r2, #5
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	440a      	add	r2, r1
 8005d62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d66:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	f003 030f 	and.w	r3, r3, #15
 8005d7c:	2101      	movs	r1, #1
 8005d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	43db      	mvns	r3, r3
 8005d86:	68f9      	ldr	r1, [r7, #12]
 8005d88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d96:	69da      	ldr	r2, [r3, #28]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	f003 030f 	and.w	r3, r3, #15
 8005da0:	2101      	movs	r1, #1
 8005da2:	fa01 f303 	lsl.w	r3, r1, r3
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	43db      	mvns	r3, r3
 8005daa:	68f9      	ldr	r1, [r7, #12]
 8005dac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005db0:	4013      	ands	r3, r2
 8005db2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	0159      	lsls	r1, r3, #5
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	440b      	add	r3, r1
 8005dca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dce:	4619      	mov	r1, r3
 8005dd0:	4b35      	ldr	r3, [pc, #212]	@ (8005ea8 <USB_DeactivateEndpoint+0x1b0>)
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	600b      	str	r3, [r1, #0]
 8005dd6:	e060      	b.n	8005e9a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005dea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005dee:	d11f      	bne.n	8005e30 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	0151      	lsls	r1, r2, #5
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	440a      	add	r2, r1
 8005e06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e0a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005e0e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	015a      	lsls	r2, r3, #5
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68ba      	ldr	r2, [r7, #8]
 8005e20:	0151      	lsls	r1, r2, #5
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	440a      	add	r2, r1
 8005e26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e2a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e2e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	f003 030f 	and.w	r3, r3, #15
 8005e40:	2101      	movs	r1, #1
 8005e42:	fa01 f303 	lsl.w	r3, r1, r3
 8005e46:	041b      	lsls	r3, r3, #16
 8005e48:	43db      	mvns	r3, r3
 8005e4a:	68f9      	ldr	r1, [r7, #12]
 8005e4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e50:	4013      	ands	r3, r2
 8005e52:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e5a:	69da      	ldr	r2, [r3, #28]
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	f003 030f 	and.w	r3, r3, #15
 8005e64:	2101      	movs	r1, #1
 8005e66:	fa01 f303 	lsl.w	r3, r1, r3
 8005e6a:	041b      	lsls	r3, r3, #16
 8005e6c:	43db      	mvns	r3, r3
 8005e6e:	68f9      	ldr	r1, [r7, #12]
 8005e70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e74:	4013      	ands	r3, r2
 8005e76:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	015a      	lsls	r2, r3, #5
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	4413      	add	r3, r2
 8005e80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	0159      	lsls	r1, r3, #5
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	440b      	add	r3, r1
 8005e8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e92:	4619      	mov	r1, r3
 8005e94:	4b05      	ldr	r3, [pc, #20]	@ (8005eac <USB_DeactivateEndpoint+0x1b4>)
 8005e96:	4013      	ands	r3, r2
 8005e98:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3714      	adds	r7, #20
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr
 8005ea8:	ec337800 	.word	0xec337800
 8005eac:	eff37800 	.word	0xeff37800

08005eb0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b08a      	sub	sp, #40	@ 0x28
 8005eb4:	af02      	add	r7, sp, #8
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	785b      	ldrb	r3, [r3, #1]
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	f040 817f 	bne.w	80061d0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d132      	bne.n	8005f40 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	015a      	lsls	r2, r3, #5
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	69ba      	ldr	r2, [r7, #24]
 8005eea:	0151      	lsls	r1, r2, #5
 8005eec:	69fa      	ldr	r2, [r7, #28]
 8005eee:	440a      	add	r2, r1
 8005ef0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ef4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005ef8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005efc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	015a      	lsls	r2, r3, #5
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	4413      	add	r3, r2
 8005f06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	69ba      	ldr	r2, [r7, #24]
 8005f0e:	0151      	lsls	r1, r2, #5
 8005f10:	69fa      	ldr	r2, [r7, #28]
 8005f12:	440a      	add	r2, r1
 8005f14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f18:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005f1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	015a      	lsls	r2, r3, #5
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	4413      	add	r3, r2
 8005f26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	69ba      	ldr	r2, [r7, #24]
 8005f2e:	0151      	lsls	r1, r2, #5
 8005f30:	69fa      	ldr	r2, [r7, #28]
 8005f32:	440a      	add	r2, r1
 8005f34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f38:	0cdb      	lsrs	r3, r3, #19
 8005f3a:	04db      	lsls	r3, r3, #19
 8005f3c:	6113      	str	r3, [r2, #16]
 8005f3e:	e097      	b.n	8006070 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	015a      	lsls	r2, r3, #5
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	4413      	add	r3, r2
 8005f48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	69ba      	ldr	r2, [r7, #24]
 8005f50:	0151      	lsls	r1, r2, #5
 8005f52:	69fa      	ldr	r2, [r7, #28]
 8005f54:	440a      	add	r2, r1
 8005f56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f5a:	0cdb      	lsrs	r3, r3, #19
 8005f5c:	04db      	lsls	r3, r3, #19
 8005f5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	015a      	lsls	r2, r3, #5
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	4413      	add	r3, r2
 8005f68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	69ba      	ldr	r2, [r7, #24]
 8005f70:	0151      	lsls	r1, r2, #5
 8005f72:	69fa      	ldr	r2, [r7, #28]
 8005f74:	440a      	add	r2, r1
 8005f76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f7a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005f7e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005f82:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d11a      	bne.n	8005fc0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	691a      	ldr	r2, [r3, #16]
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d903      	bls.n	8005f9e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	689a      	ldr	r2, [r3, #8]
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	015a      	lsls	r2, r3, #5
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	69ba      	ldr	r2, [r7, #24]
 8005fae:	0151      	lsls	r1, r2, #5
 8005fb0:	69fa      	ldr	r2, [r7, #28]
 8005fb2:	440a      	add	r2, r1
 8005fb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fb8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005fbc:	6113      	str	r3, [r2, #16]
 8005fbe:	e044      	b.n	800604a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	691a      	ldr	r2, [r3, #16]
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	4413      	add	r3, r2
 8005fca:	1e5a      	subs	r2, r3, #1
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	015a      	lsls	r2, r3, #5
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	4413      	add	r3, r2
 8005fde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fe2:	691a      	ldr	r2, [r3, #16]
 8005fe4:	8afb      	ldrh	r3, [r7, #22]
 8005fe6:	04d9      	lsls	r1, r3, #19
 8005fe8:	4ba4      	ldr	r3, [pc, #656]	@ (800627c <USB_EPStartXfer+0x3cc>)
 8005fea:	400b      	ands	r3, r1
 8005fec:	69b9      	ldr	r1, [r7, #24]
 8005fee:	0148      	lsls	r0, r1, #5
 8005ff0:	69f9      	ldr	r1, [r7, #28]
 8005ff2:	4401      	add	r1, r0
 8005ff4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	791b      	ldrb	r3, [r3, #4]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d122      	bne.n	800604a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	4413      	add	r3, r2
 800600c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	69ba      	ldr	r2, [r7, #24]
 8006014:	0151      	lsls	r1, r2, #5
 8006016:	69fa      	ldr	r2, [r7, #28]
 8006018:	440a      	add	r2, r1
 800601a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800601e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006022:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	015a      	lsls	r2, r3, #5
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	4413      	add	r3, r2
 800602c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006030:	691a      	ldr	r2, [r3, #16]
 8006032:	8afb      	ldrh	r3, [r7, #22]
 8006034:	075b      	lsls	r3, r3, #29
 8006036:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800603a:	69b9      	ldr	r1, [r7, #24]
 800603c:	0148      	lsls	r0, r1, #5
 800603e:	69f9      	ldr	r1, [r7, #28]
 8006040:	4401      	add	r1, r0
 8006042:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006046:	4313      	orrs	r3, r2
 8006048:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	015a      	lsls	r2, r3, #5
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	4413      	add	r3, r2
 8006052:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006056:	691a      	ldr	r2, [r3, #16]
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006060:	69b9      	ldr	r1, [r7, #24]
 8006062:	0148      	lsls	r0, r1, #5
 8006064:	69f9      	ldr	r1, [r7, #28]
 8006066:	4401      	add	r1, r0
 8006068:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800606c:	4313      	orrs	r3, r2
 800606e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006070:	79fb      	ldrb	r3, [r7, #7]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d14b      	bne.n	800610e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d009      	beq.n	8006092 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	015a      	lsls	r2, r3, #5
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	4413      	add	r3, r2
 8006086:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800608a:	461a      	mov	r2, r3
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	69db      	ldr	r3, [r3, #28]
 8006090:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	791b      	ldrb	r3, [r3, #4]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d128      	bne.n	80060ec <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d110      	bne.n	80060cc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	015a      	lsls	r2, r3, #5
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	4413      	add	r3, r2
 80060b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	69ba      	ldr	r2, [r7, #24]
 80060ba:	0151      	lsls	r1, r2, #5
 80060bc:	69fa      	ldr	r2, [r7, #28]
 80060be:	440a      	add	r2, r1
 80060c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060c4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80060c8:	6013      	str	r3, [r2, #0]
 80060ca:	e00f      	b.n	80060ec <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	015a      	lsls	r2, r3, #5
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	4413      	add	r3, r2
 80060d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	69ba      	ldr	r2, [r7, #24]
 80060dc:	0151      	lsls	r1, r2, #5
 80060de:	69fa      	ldr	r2, [r7, #28]
 80060e0:	440a      	add	r2, r1
 80060e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060ea:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	015a      	lsls	r2, r3, #5
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	4413      	add	r3, r2
 80060f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	69ba      	ldr	r2, [r7, #24]
 80060fc:	0151      	lsls	r1, r2, #5
 80060fe:	69fa      	ldr	r2, [r7, #28]
 8006100:	440a      	add	r2, r1
 8006102:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006106:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800610a:	6013      	str	r3, [r2, #0]
 800610c:	e166      	b.n	80063dc <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	4413      	add	r3, r2
 8006116:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	69ba      	ldr	r2, [r7, #24]
 800611e:	0151      	lsls	r1, r2, #5
 8006120:	69fa      	ldr	r2, [r7, #28]
 8006122:	440a      	add	r2, r1
 8006124:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006128:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800612c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	791b      	ldrb	r3, [r3, #4]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d015      	beq.n	8006162 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	2b00      	cmp	r3, #0
 800613c:	f000 814e 	beq.w	80063dc <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006146:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	f003 030f 	and.w	r3, r3, #15
 8006150:	2101      	movs	r1, #1
 8006152:	fa01 f303 	lsl.w	r3, r1, r3
 8006156:	69f9      	ldr	r1, [r7, #28]
 8006158:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800615c:	4313      	orrs	r3, r2
 800615e:	634b      	str	r3, [r1, #52]	@ 0x34
 8006160:	e13c      	b.n	80063dc <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800616e:	2b00      	cmp	r3, #0
 8006170:	d110      	bne.n	8006194 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	015a      	lsls	r2, r3, #5
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	4413      	add	r3, r2
 800617a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	69ba      	ldr	r2, [r7, #24]
 8006182:	0151      	lsls	r1, r2, #5
 8006184:	69fa      	ldr	r2, [r7, #28]
 8006186:	440a      	add	r2, r1
 8006188:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800618c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006190:	6013      	str	r3, [r2, #0]
 8006192:	e00f      	b.n	80061b4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	015a      	lsls	r2, r3, #5
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	4413      	add	r3, r2
 800619c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	69ba      	ldr	r2, [r7, #24]
 80061a4:	0151      	lsls	r1, r2, #5
 80061a6:	69fa      	ldr	r2, [r7, #28]
 80061a8:	440a      	add	r2, r1
 80061aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061b2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	68d9      	ldr	r1, [r3, #12]
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	781a      	ldrb	r2, [r3, #0]
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	b298      	uxth	r0, r3
 80061c2:	79fb      	ldrb	r3, [r7, #7]
 80061c4:	9300      	str	r3, [sp, #0]
 80061c6:	4603      	mov	r3, r0
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	f000 f9b9 	bl	8006540 <USB_WritePacket>
 80061ce:	e105      	b.n	80063dc <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	015a      	lsls	r2, r3, #5
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	4413      	add	r3, r2
 80061d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	69ba      	ldr	r2, [r7, #24]
 80061e0:	0151      	lsls	r1, r2, #5
 80061e2:	69fa      	ldr	r2, [r7, #28]
 80061e4:	440a      	add	r2, r1
 80061e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061ea:	0cdb      	lsrs	r3, r3, #19
 80061ec:	04db      	lsls	r3, r3, #19
 80061ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	69ba      	ldr	r2, [r7, #24]
 8006200:	0151      	lsls	r1, r2, #5
 8006202:	69fa      	ldr	r2, [r7, #28]
 8006204:	440a      	add	r2, r1
 8006206:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800620a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800620e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006212:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d132      	bne.n	8006280 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d003      	beq.n	800622a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	689a      	ldr	r2, [r3, #8]
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	689a      	ldr	r2, [r3, #8]
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	015a      	lsls	r2, r3, #5
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	4413      	add	r3, r2
 800623a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800623e:	691a      	ldr	r2, [r3, #16]
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	6a1b      	ldr	r3, [r3, #32]
 8006244:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006248:	69b9      	ldr	r1, [r7, #24]
 800624a:	0148      	lsls	r0, r1, #5
 800624c:	69f9      	ldr	r1, [r7, #28]
 800624e:	4401      	add	r1, r0
 8006250:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006254:	4313      	orrs	r3, r2
 8006256:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	015a      	lsls	r2, r3, #5
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	4413      	add	r3, r2
 8006260:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	69ba      	ldr	r2, [r7, #24]
 8006268:	0151      	lsls	r1, r2, #5
 800626a:	69fa      	ldr	r2, [r7, #28]
 800626c:	440a      	add	r2, r1
 800626e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006272:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006276:	6113      	str	r3, [r2, #16]
 8006278:	e062      	b.n	8006340 <USB_EPStartXfer+0x490>
 800627a:	bf00      	nop
 800627c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d123      	bne.n	80062d0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	015a      	lsls	r2, r3, #5
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	4413      	add	r3, r2
 8006290:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006294:	691a      	ldr	r2, [r3, #16]
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800629e:	69b9      	ldr	r1, [r7, #24]
 80062a0:	0148      	lsls	r0, r1, #5
 80062a2:	69f9      	ldr	r1, [r7, #28]
 80062a4:	4401      	add	r1, r0
 80062a6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80062aa:	4313      	orrs	r3, r2
 80062ac:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	015a      	lsls	r2, r3, #5
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	4413      	add	r3, r2
 80062b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	69ba      	ldr	r2, [r7, #24]
 80062be:	0151      	lsls	r1, r2, #5
 80062c0:	69fa      	ldr	r2, [r7, #28]
 80062c2:	440a      	add	r2, r1
 80062c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80062cc:	6113      	str	r3, [r2, #16]
 80062ce:	e037      	b.n	8006340 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	691a      	ldr	r2, [r3, #16]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	4413      	add	r3, r2
 80062da:	1e5a      	subs	r2, r3, #1
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062e4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	8afa      	ldrh	r2, [r7, #22]
 80062ec:	fb03 f202 	mul.w	r2, r3, r2
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	015a      	lsls	r2, r3, #5
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	4413      	add	r3, r2
 80062fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006300:	691a      	ldr	r2, [r3, #16]
 8006302:	8afb      	ldrh	r3, [r7, #22]
 8006304:	04d9      	lsls	r1, r3, #19
 8006306:	4b38      	ldr	r3, [pc, #224]	@ (80063e8 <USB_EPStartXfer+0x538>)
 8006308:	400b      	ands	r3, r1
 800630a:	69b9      	ldr	r1, [r7, #24]
 800630c:	0148      	lsls	r0, r1, #5
 800630e:	69f9      	ldr	r1, [r7, #28]
 8006310:	4401      	add	r1, r0
 8006312:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006316:	4313      	orrs	r3, r2
 8006318:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	015a      	lsls	r2, r3, #5
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	4413      	add	r3, r2
 8006322:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006326:	691a      	ldr	r2, [r3, #16]
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	6a1b      	ldr	r3, [r3, #32]
 800632c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006330:	69b9      	ldr	r1, [r7, #24]
 8006332:	0148      	lsls	r0, r1, #5
 8006334:	69f9      	ldr	r1, [r7, #28]
 8006336:	4401      	add	r1, r0
 8006338:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800633c:	4313      	orrs	r3, r2
 800633e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006340:	79fb      	ldrb	r3, [r7, #7]
 8006342:	2b01      	cmp	r3, #1
 8006344:	d10d      	bne.n	8006362 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d009      	beq.n	8006362 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	68d9      	ldr	r1, [r3, #12]
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	015a      	lsls	r2, r3, #5
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	4413      	add	r3, r2
 800635a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800635e:	460a      	mov	r2, r1
 8006360:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	791b      	ldrb	r3, [r3, #4]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d128      	bne.n	80063bc <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006376:	2b00      	cmp	r3, #0
 8006378:	d110      	bne.n	800639c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	4413      	add	r3, r2
 8006382:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	0151      	lsls	r1, r2, #5
 800638c:	69fa      	ldr	r2, [r7, #28]
 800638e:	440a      	add	r2, r1
 8006390:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006394:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006398:	6013      	str	r3, [r2, #0]
 800639a:	e00f      	b.n	80063bc <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	015a      	lsls	r2, r3, #5
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	4413      	add	r3, r2
 80063a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	69ba      	ldr	r2, [r7, #24]
 80063ac:	0151      	lsls	r1, r2, #5
 80063ae:	69fa      	ldr	r2, [r7, #28]
 80063b0:	440a      	add	r2, r1
 80063b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063ba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	015a      	lsls	r2, r3, #5
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	69ba      	ldr	r2, [r7, #24]
 80063cc:	0151      	lsls	r1, r2, #5
 80063ce:	69fa      	ldr	r2, [r7, #28]
 80063d0:	440a      	add	r2, r1
 80063d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063d6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80063da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3720      	adds	r7, #32
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	1ff80000 	.word	0x1ff80000

080063ec <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b087      	sub	sp, #28
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80063f6:	2300      	movs	r3, #0
 80063f8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80063fa:	2300      	movs	r3, #0
 80063fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	785b      	ldrb	r3, [r3, #1]
 8006406:	2b01      	cmp	r3, #1
 8006408:	d14a      	bne.n	80064a0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	015a      	lsls	r2, r3, #5
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	4413      	add	r3, r2
 8006414:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800641e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006422:	f040 8086 	bne.w	8006532 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	015a      	lsls	r2, r3, #5
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	4413      	add	r3, r2
 8006430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	683a      	ldr	r2, [r7, #0]
 8006438:	7812      	ldrb	r2, [r2, #0]
 800643a:	0151      	lsls	r1, r2, #5
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	440a      	add	r2, r1
 8006440:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006444:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006448:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	015a      	lsls	r2, r3, #5
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	4413      	add	r3, r2
 8006454:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	683a      	ldr	r2, [r7, #0]
 800645c:	7812      	ldrb	r2, [r2, #0]
 800645e:	0151      	lsls	r1, r2, #5
 8006460:	693a      	ldr	r2, [r7, #16]
 8006462:	440a      	add	r2, r1
 8006464:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006468:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800646c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	3301      	adds	r3, #1
 8006472:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f242 7210 	movw	r2, #10000	@ 0x2710
 800647a:	4293      	cmp	r3, r2
 800647c:	d902      	bls.n	8006484 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	75fb      	strb	r3, [r7, #23]
          break;
 8006482:	e056      	b.n	8006532 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	015a      	lsls	r2, r3, #5
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	4413      	add	r3, r2
 800648e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006498:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800649c:	d0e7      	beq.n	800646e <USB_EPStopXfer+0x82>
 800649e:	e048      	b.n	8006532 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	015a      	lsls	r2, r3, #5
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	4413      	add	r3, r2
 80064aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80064b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064b8:	d13b      	bne.n	8006532 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	015a      	lsls	r2, r3, #5
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	4413      	add	r3, r2
 80064c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	7812      	ldrb	r2, [r2, #0]
 80064ce:	0151      	lsls	r1, r2, #5
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	440a      	add	r2, r1
 80064d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80064dc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	015a      	lsls	r2, r3, #5
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	4413      	add	r3, r2
 80064e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	683a      	ldr	r2, [r7, #0]
 80064f0:	7812      	ldrb	r2, [r2, #0]
 80064f2:	0151      	lsls	r1, r2, #5
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	440a      	add	r2, r1
 80064f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006500:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	3301      	adds	r3, #1
 8006506:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800650e:	4293      	cmp	r3, r2
 8006510:	d902      	bls.n	8006518 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	75fb      	strb	r3, [r7, #23]
          break;
 8006516:	e00c      	b.n	8006532 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	015a      	lsls	r2, r3, #5
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	4413      	add	r3, r2
 8006522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800652c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006530:	d0e7      	beq.n	8006502 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006532:	7dfb      	ldrb	r3, [r7, #23]
}
 8006534:	4618      	mov	r0, r3
 8006536:	371c      	adds	r7, #28
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006540:	b480      	push	{r7}
 8006542:	b089      	sub	sp, #36	@ 0x24
 8006544:	af00      	add	r7, sp, #0
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	4611      	mov	r1, r2
 800654c:	461a      	mov	r2, r3
 800654e:	460b      	mov	r3, r1
 8006550:	71fb      	strb	r3, [r7, #7]
 8006552:	4613      	mov	r3, r2
 8006554:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800655e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006562:	2b00      	cmp	r3, #0
 8006564:	d123      	bne.n	80065ae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006566:	88bb      	ldrh	r3, [r7, #4]
 8006568:	3303      	adds	r3, #3
 800656a:	089b      	lsrs	r3, r3, #2
 800656c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800656e:	2300      	movs	r3, #0
 8006570:	61bb      	str	r3, [r7, #24]
 8006572:	e018      	b.n	80065a6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006574:	79fb      	ldrb	r3, [r7, #7]
 8006576:	031a      	lsls	r2, r3, #12
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	4413      	add	r3, r2
 800657c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006580:	461a      	mov	r2, r3
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	3301      	adds	r3, #1
 800658c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	3301      	adds	r3, #1
 8006592:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	3301      	adds	r3, #1
 8006598:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	3301      	adds	r3, #1
 800659e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	3301      	adds	r3, #1
 80065a4:	61bb      	str	r3, [r7, #24]
 80065a6:	69ba      	ldr	r2, [r7, #24]
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d3e2      	bcc.n	8006574 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3724      	adds	r7, #36	@ 0x24
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80065bc:	b480      	push	{r7}
 80065be:	b08b      	sub	sp, #44	@ 0x2c
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	4613      	mov	r3, r2
 80065c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80065d2:	88fb      	ldrh	r3, [r7, #6]
 80065d4:	089b      	lsrs	r3, r3, #2
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80065da:	88fb      	ldrh	r3, [r7, #6]
 80065dc:	f003 0303 	and.w	r3, r3, #3
 80065e0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80065e2:	2300      	movs	r3, #0
 80065e4:	623b      	str	r3, [r7, #32]
 80065e6:	e014      	b.n	8006612 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f2:	601a      	str	r2, [r3, #0]
    pDest++;
 80065f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f6:	3301      	adds	r3, #1
 80065f8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80065fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065fc:	3301      	adds	r3, #1
 80065fe:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006602:	3301      	adds	r3, #1
 8006604:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006608:	3301      	adds	r3, #1
 800660a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800660c:	6a3b      	ldr	r3, [r7, #32]
 800660e:	3301      	adds	r3, #1
 8006610:	623b      	str	r3, [r7, #32]
 8006612:	6a3a      	ldr	r2, [r7, #32]
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	429a      	cmp	r2, r3
 8006618:	d3e6      	bcc.n	80065e8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800661a:	8bfb      	ldrh	r3, [r7, #30]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d01e      	beq.n	800665e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006620:	2300      	movs	r3, #0
 8006622:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800662a:	461a      	mov	r2, r3
 800662c:	f107 0310 	add.w	r3, r7, #16
 8006630:	6812      	ldr	r2, [r2, #0]
 8006632:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	6a3b      	ldr	r3, [r7, #32]
 8006638:	b2db      	uxtb	r3, r3
 800663a:	00db      	lsls	r3, r3, #3
 800663c:	fa22 f303 	lsr.w	r3, r2, r3
 8006640:	b2da      	uxtb	r2, r3
 8006642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006644:	701a      	strb	r2, [r3, #0]
      i++;
 8006646:	6a3b      	ldr	r3, [r7, #32]
 8006648:	3301      	adds	r3, #1
 800664a:	623b      	str	r3, [r7, #32]
      pDest++;
 800664c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800664e:	3301      	adds	r3, #1
 8006650:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006652:	8bfb      	ldrh	r3, [r7, #30]
 8006654:	3b01      	subs	r3, #1
 8006656:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006658:	8bfb      	ldrh	r3, [r7, #30]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1ea      	bne.n	8006634 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800665e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006660:	4618      	mov	r0, r3
 8006662:	372c      	adds	r7, #44	@ 0x2c
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800666c:	b480      	push	{r7}
 800666e:	b085      	sub	sp, #20
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	785b      	ldrb	r3, [r3, #1]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d12c      	bne.n	80066e2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	015a      	lsls	r2, r3, #5
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	4413      	add	r3, r2
 8006690:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	db12      	blt.n	80066c0 <USB_EPSetStall+0x54>
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00f      	beq.n	80066c0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	015a      	lsls	r2, r3, #5
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68ba      	ldr	r2, [r7, #8]
 80066b0:	0151      	lsls	r1, r2, #5
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	440a      	add	r2, r1
 80066b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066ba:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80066be:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	015a      	lsls	r2, r3, #5
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	4413      	add	r3, r2
 80066c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	0151      	lsls	r1, r2, #5
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	440a      	add	r2, r1
 80066d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80066de:	6013      	str	r3, [r2, #0]
 80066e0:	e02b      	b.n	800673a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	015a      	lsls	r2, r3, #5
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	4413      	add	r3, r2
 80066ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	db12      	blt.n	800671a <USB_EPSetStall+0xae>
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00f      	beq.n	800671a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	015a      	lsls	r2, r3, #5
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	4413      	add	r3, r2
 8006702:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	0151      	lsls	r1, r2, #5
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	440a      	add	r2, r1
 8006710:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006714:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006718:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	015a      	lsls	r2, r3, #5
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	4413      	add	r3, r2
 8006722:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68ba      	ldr	r2, [r7, #8]
 800672a:	0151      	lsls	r1, r2, #5
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	440a      	add	r2, r1
 8006730:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006734:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006738:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3714      	adds	r7, #20
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	785b      	ldrb	r3, [r3, #1]
 8006760:	2b01      	cmp	r3, #1
 8006762:	d128      	bne.n	80067b6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	015a      	lsls	r2, r3, #5
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	4413      	add	r3, r2
 800676c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	0151      	lsls	r1, r2, #5
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	440a      	add	r2, r1
 800677a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800677e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006782:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	791b      	ldrb	r3, [r3, #4]
 8006788:	2b03      	cmp	r3, #3
 800678a:	d003      	beq.n	8006794 <USB_EPClearStall+0x4c>
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	791b      	ldrb	r3, [r3, #4]
 8006790:	2b02      	cmp	r3, #2
 8006792:	d138      	bne.n	8006806 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	015a      	lsls	r2, r3, #5
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	4413      	add	r3, r2
 800679c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68ba      	ldr	r2, [r7, #8]
 80067a4:	0151      	lsls	r1, r2, #5
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	440a      	add	r2, r1
 80067aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067b2:	6013      	str	r3, [r2, #0]
 80067b4:	e027      	b.n	8006806 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	015a      	lsls	r2, r3, #5
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	4413      	add	r3, r2
 80067be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	0151      	lsls	r1, r2, #5
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	440a      	add	r2, r1
 80067cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067d0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80067d4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	791b      	ldrb	r3, [r3, #4]
 80067da:	2b03      	cmp	r3, #3
 80067dc:	d003      	beq.n	80067e6 <USB_EPClearStall+0x9e>
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	791b      	ldrb	r3, [r3, #4]
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	d10f      	bne.n	8006806 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	015a      	lsls	r2, r3, #5
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	4413      	add	r3, r2
 80067ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68ba      	ldr	r2, [r7, #8]
 80067f6:	0151      	lsls	r1, r2, #5
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	440a      	add	r2, r1
 80067fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006800:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006804:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	3714      	adds	r7, #20
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	460b      	mov	r3, r1
 800681e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006832:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006836:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	78fb      	ldrb	r3, [r7, #3]
 8006842:	011b      	lsls	r3, r3, #4
 8006844:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006848:	68f9      	ldr	r1, [r7, #12]
 800684a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800684e:	4313      	orrs	r3, r2
 8006850:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3714      	adds	r7, #20
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800687a:	f023 0303 	bic.w	r3, r3, #3
 800687e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800688e:	f023 0302 	bic.w	r3, r3, #2
 8006892:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr

080068a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80068a2:	b480      	push	{r7}
 80068a4:	b085      	sub	sp, #20
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80068bc:	f023 0303 	bic.w	r3, r3, #3
 80068c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068d0:	f043 0302 	orr.w	r3, r3, #2
 80068d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3714      	adds	r7, #20
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	695b      	ldr	r3, [r3, #20]
 80068f0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	4013      	ands	r3, r2
 80068fa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80068fc:	68fb      	ldr	r3, [r7, #12]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3714      	adds	r7, #20
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr

0800690a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800690a:	b480      	push	{r7}
 800690c:	b085      	sub	sp, #20
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006926:	69db      	ldr	r3, [r3, #28]
 8006928:	68ba      	ldr	r2, [r7, #8]
 800692a:	4013      	ands	r3, r2
 800692c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	0c1b      	lsrs	r3, r3, #16
}
 8006932:	4618      	mov	r0, r3
 8006934:	3714      	adds	r7, #20
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr

0800693e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800693e:	b480      	push	{r7}
 8006940:	b085      	sub	sp, #20
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800695a:	69db      	ldr	r3, [r3, #28]
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	4013      	ands	r3, r2
 8006960:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	b29b      	uxth	r3, r3
}
 8006966:	4618      	mov	r0, r3
 8006968:	3714      	adds	r7, #20
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr

08006972 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006972:	b480      	push	{r7}
 8006974:	b085      	sub	sp, #20
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
 800697a:	460b      	mov	r3, r1
 800697c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006982:	78fb      	ldrb	r3, [r7, #3]
 8006984:	015a      	lsls	r2, r3, #5
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	4413      	add	r3, r2
 800698a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	4013      	ands	r3, r2
 800699e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80069a0:	68bb      	ldr	r3, [r7, #8]
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3714      	adds	r7, #20
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr

080069ae <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80069ae:	b480      	push	{r7}
 80069b0:	b087      	sub	sp, #28
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
 80069b6:	460b      	mov	r3, r1
 80069b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069d0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80069d2:	78fb      	ldrb	r3, [r7, #3]
 80069d4:	f003 030f 	and.w	r3, r3, #15
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	fa22 f303 	lsr.w	r3, r2, r3
 80069de:	01db      	lsls	r3, r3, #7
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80069e8:	78fb      	ldrb	r3, [r7, #3]
 80069ea:	015a      	lsls	r2, r3, #5
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	4413      	add	r3, r2
 80069f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	4013      	ands	r3, r2
 80069fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80069fc:	68bb      	ldr	r3, [r7, #8]
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	371c      	adds	r7, #28
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr

08006a0a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a0a:	b480      	push	{r7}
 8006a0c:	b083      	sub	sp, #12
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	695b      	ldr	r3, [r3, #20]
 8006a16:	f003 0301 	and.w	r3, r3, #1
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	370c      	adds	r7, #12
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr

08006a26 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a26:	b480      	push	{r7}
 8006a28:	b085      	sub	sp, #20
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a40:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006a44:	f023 0307 	bic.w	r3, r3, #7
 8006a48:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a5c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3714      	adds	r7, #20
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b087      	sub	sp, #28
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	460b      	mov	r3, r1
 8006a76:	607a      	str	r2, [r7, #4]
 8006a78:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	333c      	adds	r3, #60	@ 0x3c
 8006a82:	3304      	adds	r3, #4
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	4a26      	ldr	r2, [pc, #152]	@ (8006b24 <USB_EP0_OutStart+0xb8>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d90a      	bls.n	8006aa6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006aa0:	d101      	bne.n	8006aa6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	e037      	b.n	8006b16 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006aac:	461a      	mov	r2, r3
 8006aae:	2300      	movs	r3, #0
 8006ab0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ac0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006ac4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ad4:	f043 0318 	orr.w	r3, r3, #24
 8006ad8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	697a      	ldr	r2, [r7, #20]
 8006ae4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ae8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006aec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006aee:	7afb      	ldrb	r3, [r7, #11]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d10f      	bne.n	8006b14 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006afa:	461a      	mov	r2, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	697a      	ldr	r2, [r7, #20]
 8006b0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b0e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006b12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	371c      	adds	r7, #28
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	4f54300a 	.word	0x4f54300a

08006b28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b30:	2300      	movs	r3, #0
 8006b32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	3301      	adds	r3, #1
 8006b38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b40:	d901      	bls.n	8006b46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e01b      	b.n	8006b7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	daf2      	bge.n	8006b34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	f043 0201 	orr.w	r2, r3, #1
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	3301      	adds	r3, #1
 8006b62:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b6a:	d901      	bls.n	8006b70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e006      	b.n	8006b7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	f003 0301 	and.w	r3, r3, #1
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d0f0      	beq.n	8006b5e <USB_CoreReset+0x36>

  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3714      	adds	r7, #20
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
	...

08006b8c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	460b      	mov	r3, r1
 8006b96:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006b98:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006b9c:	f002 fc38 	bl	8009410 <USBD_static_malloc>
 8006ba0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d109      	bne.n	8006bbc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	32b0      	adds	r2, #176	@ 0xb0
 8006bb2:	2100      	movs	r1, #0
 8006bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006bb8:	2302      	movs	r3, #2
 8006bba:	e0d4      	b.n	8006d66 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006bbc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	68f8      	ldr	r0, [r7, #12]
 8006bc4:	f002 fca2 	bl	800950c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	32b0      	adds	r2, #176	@ 0xb0
 8006bd2:	68f9      	ldr	r1, [r7, #12]
 8006bd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	32b0      	adds	r2, #176	@ 0xb0
 8006be2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	7c1b      	ldrb	r3, [r3, #16]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d138      	bne.n	8006c66 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006bf4:	4b5e      	ldr	r3, [pc, #376]	@ (8006d70 <USBD_CDC_Init+0x1e4>)
 8006bf6:	7819      	ldrb	r1, [r3, #0]
 8006bf8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006bfc:	2202      	movs	r2, #2
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f002 fae3 	bl	80091ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006c04:	4b5a      	ldr	r3, [pc, #360]	@ (8006d70 <USBD_CDC_Init+0x1e4>)
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	f003 020f 	and.w	r2, r3, #15
 8006c0c:	6879      	ldr	r1, [r7, #4]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4413      	add	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	440b      	add	r3, r1
 8006c18:	3324      	adds	r3, #36	@ 0x24
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006c1e:	4b55      	ldr	r3, [pc, #340]	@ (8006d74 <USBD_CDC_Init+0x1e8>)
 8006c20:	7819      	ldrb	r1, [r3, #0]
 8006c22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006c26:	2202      	movs	r2, #2
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f002 face 	bl	80091ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006c2e:	4b51      	ldr	r3, [pc, #324]	@ (8006d74 <USBD_CDC_Init+0x1e8>)
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	f003 020f 	and.w	r2, r3, #15
 8006c36:	6879      	ldr	r1, [r7, #4]
 8006c38:	4613      	mov	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	440b      	add	r3, r1
 8006c42:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006c46:	2201      	movs	r2, #1
 8006c48:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006c4a:	4b4b      	ldr	r3, [pc, #300]	@ (8006d78 <USBD_CDC_Init+0x1ec>)
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	f003 020f 	and.w	r2, r3, #15
 8006c52:	6879      	ldr	r1, [r7, #4]
 8006c54:	4613      	mov	r3, r2
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	4413      	add	r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	440b      	add	r3, r1
 8006c5e:	3326      	adds	r3, #38	@ 0x26
 8006c60:	2210      	movs	r2, #16
 8006c62:	801a      	strh	r2, [r3, #0]
 8006c64:	e035      	b.n	8006cd2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006c66:	4b42      	ldr	r3, [pc, #264]	@ (8006d70 <USBD_CDC_Init+0x1e4>)
 8006c68:	7819      	ldrb	r1, [r3, #0]
 8006c6a:	2340      	movs	r3, #64	@ 0x40
 8006c6c:	2202      	movs	r2, #2
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f002 faab 	bl	80091ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006c74:	4b3e      	ldr	r3, [pc, #248]	@ (8006d70 <USBD_CDC_Init+0x1e4>)
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	f003 020f 	and.w	r2, r3, #15
 8006c7c:	6879      	ldr	r1, [r7, #4]
 8006c7e:	4613      	mov	r3, r2
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	4413      	add	r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	440b      	add	r3, r1
 8006c88:	3324      	adds	r3, #36	@ 0x24
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006c8e:	4b39      	ldr	r3, [pc, #228]	@ (8006d74 <USBD_CDC_Init+0x1e8>)
 8006c90:	7819      	ldrb	r1, [r3, #0]
 8006c92:	2340      	movs	r3, #64	@ 0x40
 8006c94:	2202      	movs	r2, #2
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f002 fa97 	bl	80091ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006c9c:	4b35      	ldr	r3, [pc, #212]	@ (8006d74 <USBD_CDC_Init+0x1e8>)
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	f003 020f 	and.w	r2, r3, #15
 8006ca4:	6879      	ldr	r1, [r7, #4]
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	4413      	add	r3, r2
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	440b      	add	r3, r1
 8006cb0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006cb8:	4b2f      	ldr	r3, [pc, #188]	@ (8006d78 <USBD_CDC_Init+0x1ec>)
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	f003 020f 	and.w	r2, r3, #15
 8006cc0:	6879      	ldr	r1, [r7, #4]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4413      	add	r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	440b      	add	r3, r1
 8006ccc:	3326      	adds	r3, #38	@ 0x26
 8006cce:	2210      	movs	r2, #16
 8006cd0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006cd2:	4b29      	ldr	r3, [pc, #164]	@ (8006d78 <USBD_CDC_Init+0x1ec>)
 8006cd4:	7819      	ldrb	r1, [r3, #0]
 8006cd6:	2308      	movs	r3, #8
 8006cd8:	2203      	movs	r2, #3
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f002 fa75 	bl	80091ca <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006ce0:	4b25      	ldr	r3, [pc, #148]	@ (8006d78 <USBD_CDC_Init+0x1ec>)
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	f003 020f 	and.w	r2, r3, #15
 8006ce8:	6879      	ldr	r1, [r7, #4]
 8006cea:	4613      	mov	r3, r2
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	4413      	add	r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	440b      	add	r3, r1
 8006cf4:	3324      	adds	r3, #36	@ 0x24
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	33b0      	adds	r3, #176	@ 0xb0
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4413      	add	r3, r2
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d101      	bne.n	8006d34 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006d30:	2302      	movs	r3, #2
 8006d32:	e018      	b.n	8006d66 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	7c1b      	ldrb	r3, [r3, #16]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10a      	bne.n	8006d52 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d3c:	4b0d      	ldr	r3, [pc, #52]	@ (8006d74 <USBD_CDC_Init+0x1e8>)
 8006d3e:	7819      	ldrb	r1, [r3, #0]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006d46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f002 fb2c 	bl	80093a8 <USBD_LL_PrepareReceive>
 8006d50:	e008      	b.n	8006d64 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d52:	4b08      	ldr	r3, [pc, #32]	@ (8006d74 <USBD_CDC_Init+0x1e8>)
 8006d54:	7819      	ldrb	r1, [r3, #0]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006d5c:	2340      	movs	r3, #64	@ 0x40
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f002 fb22 	bl	80093a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3710      	adds	r7, #16
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	20000097 	.word	0x20000097
 8006d74:	20000098 	.word	0x20000098
 8006d78:	20000099 	.word	0x20000099

08006d7c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	460b      	mov	r3, r1
 8006d86:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006d88:	4b3a      	ldr	r3, [pc, #232]	@ (8006e74 <USBD_CDC_DeInit+0xf8>)
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f002 fa41 	bl	8009216 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006d94:	4b37      	ldr	r3, [pc, #220]	@ (8006e74 <USBD_CDC_DeInit+0xf8>)
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	f003 020f 	and.w	r2, r3, #15
 8006d9c:	6879      	ldr	r1, [r7, #4]
 8006d9e:	4613      	mov	r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4413      	add	r3, r2
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	440b      	add	r3, r1
 8006da8:	3324      	adds	r3, #36	@ 0x24
 8006daa:	2200      	movs	r2, #0
 8006dac:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006dae:	4b32      	ldr	r3, [pc, #200]	@ (8006e78 <USBD_CDC_DeInit+0xfc>)
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	4619      	mov	r1, r3
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f002 fa2e 	bl	8009216 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006dba:	4b2f      	ldr	r3, [pc, #188]	@ (8006e78 <USBD_CDC_DeInit+0xfc>)
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	f003 020f 	and.w	r2, r3, #15
 8006dc2:	6879      	ldr	r1, [r7, #4]
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	4413      	add	r3, r2
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	440b      	add	r3, r1
 8006dce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006dd6:	4b29      	ldr	r3, [pc, #164]	@ (8006e7c <USBD_CDC_DeInit+0x100>)
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	4619      	mov	r1, r3
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f002 fa1a 	bl	8009216 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006de2:	4b26      	ldr	r3, [pc, #152]	@ (8006e7c <USBD_CDC_DeInit+0x100>)
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	f003 020f 	and.w	r2, r3, #15
 8006dea:	6879      	ldr	r1, [r7, #4]
 8006dec:	4613      	mov	r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4413      	add	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	440b      	add	r3, r1
 8006df6:	3324      	adds	r3, #36	@ 0x24
 8006df8:	2200      	movs	r2, #0
 8006dfa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006dfc:	4b1f      	ldr	r3, [pc, #124]	@ (8006e7c <USBD_CDC_DeInit+0x100>)
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	f003 020f 	and.w	r2, r3, #15
 8006e04:	6879      	ldr	r1, [r7, #4]
 8006e06:	4613      	mov	r3, r2
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4413      	add	r3, r2
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	440b      	add	r3, r1
 8006e10:	3326      	adds	r3, #38	@ 0x26
 8006e12:	2200      	movs	r2, #0
 8006e14:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	32b0      	adds	r2, #176	@ 0xb0
 8006e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d01f      	beq.n	8006e68 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	33b0      	adds	r3, #176	@ 0xb0
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	4413      	add	r3, r2
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	32b0      	adds	r2, #176	@ 0xb0
 8006e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f002 faee 	bl	800942c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	32b0      	adds	r2, #176	@ 0xb0
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3708      	adds	r7, #8
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	20000097 	.word	0x20000097
 8006e78:	20000098 	.word	0x20000098
 8006e7c:	20000099 	.word	0x20000099

08006e80 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b086      	sub	sp, #24
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	32b0      	adds	r2, #176	@ 0xb0
 8006e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e98:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d101      	bne.n	8006eb0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006eac:	2303      	movs	r3, #3
 8006eae:	e0bf      	b.n	8007030 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d050      	beq.n	8006f5e <USBD_CDC_Setup+0xde>
 8006ebc:	2b20      	cmp	r3, #32
 8006ebe:	f040 80af 	bne.w	8007020 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	88db      	ldrh	r3, [r3, #6]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d03a      	beq.n	8006f40 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	b25b      	sxtb	r3, r3
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	da1b      	bge.n	8006f0c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	33b0      	adds	r3, #176	@ 0xb0
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	4413      	add	r3, r2
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	683a      	ldr	r2, [r7, #0]
 8006ee8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006eea:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006eec:	683a      	ldr	r2, [r7, #0]
 8006eee:	88d2      	ldrh	r2, [r2, #6]
 8006ef0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	88db      	ldrh	r3, [r3, #6]
 8006ef6:	2b07      	cmp	r3, #7
 8006ef8:	bf28      	it	cs
 8006efa:	2307      	movcs	r3, #7
 8006efc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	89fa      	ldrh	r2, [r7, #14]
 8006f02:	4619      	mov	r1, r3
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f001 fd53 	bl	80089b0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006f0a:	e090      	b.n	800702e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	785a      	ldrb	r2, [r3, #1]
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	88db      	ldrh	r3, [r3, #6]
 8006f1a:	2b3f      	cmp	r3, #63	@ 0x3f
 8006f1c:	d803      	bhi.n	8006f26 <USBD_CDC_Setup+0xa6>
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	88db      	ldrh	r3, [r3, #6]
 8006f22:	b2da      	uxtb	r2, r3
 8006f24:	e000      	b.n	8006f28 <USBD_CDC_Setup+0xa8>
 8006f26:	2240      	movs	r2, #64	@ 0x40
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006f2e:	6939      	ldr	r1, [r7, #16]
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006f36:	461a      	mov	r2, r3
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f001 fd65 	bl	8008a08 <USBD_CtlPrepareRx>
      break;
 8006f3e:	e076      	b.n	800702e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	33b0      	adds	r3, #176	@ 0xb0
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	4413      	add	r3, r2
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	683a      	ldr	r2, [r7, #0]
 8006f54:	7850      	ldrb	r0, [r2, #1]
 8006f56:	2200      	movs	r2, #0
 8006f58:	6839      	ldr	r1, [r7, #0]
 8006f5a:	4798      	blx	r3
      break;
 8006f5c:	e067      	b.n	800702e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	785b      	ldrb	r3, [r3, #1]
 8006f62:	2b0b      	cmp	r3, #11
 8006f64:	d851      	bhi.n	800700a <USBD_CDC_Setup+0x18a>
 8006f66:	a201      	add	r2, pc, #4	@ (adr r2, 8006f6c <USBD_CDC_Setup+0xec>)
 8006f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6c:	08006f9d 	.word	0x08006f9d
 8006f70:	08007019 	.word	0x08007019
 8006f74:	0800700b 	.word	0x0800700b
 8006f78:	0800700b 	.word	0x0800700b
 8006f7c:	0800700b 	.word	0x0800700b
 8006f80:	0800700b 	.word	0x0800700b
 8006f84:	0800700b 	.word	0x0800700b
 8006f88:	0800700b 	.word	0x0800700b
 8006f8c:	0800700b 	.word	0x0800700b
 8006f90:	0800700b 	.word	0x0800700b
 8006f94:	08006fc7 	.word	0x08006fc7
 8006f98:	08006ff1 	.word	0x08006ff1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	2b03      	cmp	r3, #3
 8006fa6:	d107      	bne.n	8006fb8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006fa8:	f107 030a 	add.w	r3, r7, #10
 8006fac:	2202      	movs	r2, #2
 8006fae:	4619      	mov	r1, r3
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f001 fcfd 	bl	80089b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fb6:	e032      	b.n	800701e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006fb8:	6839      	ldr	r1, [r7, #0]
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f001 fc7b 	bl	80088b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006fc0:	2303      	movs	r3, #3
 8006fc2:	75fb      	strb	r3, [r7, #23]
          break;
 8006fc4:	e02b      	b.n	800701e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	2b03      	cmp	r3, #3
 8006fd0:	d107      	bne.n	8006fe2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006fd2:	f107 030d 	add.w	r3, r7, #13
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	4619      	mov	r1, r3
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f001 fce8 	bl	80089b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fe0:	e01d      	b.n	800701e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006fe2:	6839      	ldr	r1, [r7, #0]
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f001 fc66 	bl	80088b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006fea:	2303      	movs	r3, #3
 8006fec:	75fb      	strb	r3, [r7, #23]
          break;
 8006fee:	e016      	b.n	800701e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b03      	cmp	r3, #3
 8006ffa:	d00f      	beq.n	800701c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006ffc:	6839      	ldr	r1, [r7, #0]
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f001 fc59 	bl	80088b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007004:	2303      	movs	r3, #3
 8007006:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007008:	e008      	b.n	800701c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800700a:	6839      	ldr	r1, [r7, #0]
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f001 fc52 	bl	80088b6 <USBD_CtlError>
          ret = USBD_FAIL;
 8007012:	2303      	movs	r3, #3
 8007014:	75fb      	strb	r3, [r7, #23]
          break;
 8007016:	e002      	b.n	800701e <USBD_CDC_Setup+0x19e>
          break;
 8007018:	bf00      	nop
 800701a:	e008      	b.n	800702e <USBD_CDC_Setup+0x1ae>
          break;
 800701c:	bf00      	nop
      }
      break;
 800701e:	e006      	b.n	800702e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007020:	6839      	ldr	r1, [r7, #0]
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f001 fc47 	bl	80088b6 <USBD_CtlError>
      ret = USBD_FAIL;
 8007028:	2303      	movs	r3, #3
 800702a:	75fb      	strb	r3, [r7, #23]
      break;
 800702c:	bf00      	nop
  }

  return (uint8_t)ret;
 800702e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007030:	4618      	mov	r0, r3
 8007032:	3718      	adds	r7, #24
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	460b      	mov	r3, r1
 8007042:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800704a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	32b0      	adds	r2, #176	@ 0xb0
 8007056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d101      	bne.n	8007062 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800705e:	2303      	movs	r3, #3
 8007060:	e065      	b.n	800712e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	32b0      	adds	r2, #176	@ 0xb0
 800706c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007070:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007072:	78fb      	ldrb	r3, [r7, #3]
 8007074:	f003 020f 	and.w	r2, r3, #15
 8007078:	6879      	ldr	r1, [r7, #4]
 800707a:	4613      	mov	r3, r2
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4413      	add	r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	440b      	add	r3, r1
 8007084:	3318      	adds	r3, #24
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d02f      	beq.n	80070ec <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800708c:	78fb      	ldrb	r3, [r7, #3]
 800708e:	f003 020f 	and.w	r2, r3, #15
 8007092:	6879      	ldr	r1, [r7, #4]
 8007094:	4613      	mov	r3, r2
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	4413      	add	r3, r2
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	440b      	add	r3, r1
 800709e:	3318      	adds	r3, #24
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	78fb      	ldrb	r3, [r7, #3]
 80070a4:	f003 010f 	and.w	r1, r3, #15
 80070a8:	68f8      	ldr	r0, [r7, #12]
 80070aa:	460b      	mov	r3, r1
 80070ac:	00db      	lsls	r3, r3, #3
 80070ae:	440b      	add	r3, r1
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	4403      	add	r3, r0
 80070b4:	331c      	adds	r3, #28
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	fbb2 f1f3 	udiv	r1, r2, r3
 80070bc:	fb01 f303 	mul.w	r3, r1, r3
 80070c0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d112      	bne.n	80070ec <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80070c6:	78fb      	ldrb	r3, [r7, #3]
 80070c8:	f003 020f 	and.w	r2, r3, #15
 80070cc:	6879      	ldr	r1, [r7, #4]
 80070ce:	4613      	mov	r3, r2
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	4413      	add	r3, r2
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	440b      	add	r3, r1
 80070d8:	3318      	adds	r3, #24
 80070da:	2200      	movs	r2, #0
 80070dc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80070de:	78f9      	ldrb	r1, [r7, #3]
 80070e0:	2300      	movs	r3, #0
 80070e2:	2200      	movs	r2, #0
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f002 f93e 	bl	8009366 <USBD_LL_Transmit>
 80070ea:	e01f      	b.n	800712c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	33b0      	adds	r3, #176	@ 0xb0
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	4413      	add	r3, r2
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d010      	beq.n	800712c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	33b0      	adds	r3, #176	@ 0xb0
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	4413      	add	r3, r2
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	68ba      	ldr	r2, [r7, #8]
 800711e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007122:	68ba      	ldr	r2, [r7, #8]
 8007124:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007128:	78fa      	ldrb	r2, [r7, #3]
 800712a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b084      	sub	sp, #16
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
 800713e:	460b      	mov	r3, r1
 8007140:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	32b0      	adds	r2, #176	@ 0xb0
 800714c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007150:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	32b0      	adds	r2, #176	@ 0xb0
 800715c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d101      	bne.n	8007168 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007164:	2303      	movs	r3, #3
 8007166:	e01a      	b.n	800719e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007168:	78fb      	ldrb	r3, [r7, #3]
 800716a:	4619      	mov	r1, r3
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f002 f93c 	bl	80093ea <USBD_LL_GetRxDataSize>
 8007172:	4602      	mov	r2, r0
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	33b0      	adds	r3, #176	@ 0xb0
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	4413      	add	r3, r2
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007198:	4611      	mov	r1, r2
 800719a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b084      	sub	sp, #16
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	32b0      	adds	r2, #176	@ 0xb0
 80071b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d101      	bne.n	80071c8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80071c4:	2303      	movs	r3, #3
 80071c6:	e024      	b.n	8007212 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	33b0      	adds	r3, #176	@ 0xb0
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	4413      	add	r3, r2
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d019      	beq.n	8007210 <USBD_CDC_EP0_RxReady+0x6a>
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80071e2:	2bff      	cmp	r3, #255	@ 0xff
 80071e4:	d014      	beq.n	8007210 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	33b0      	adds	r3, #176	@ 0xb0
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	4413      	add	r3, r2
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80071fe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007206:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	22ff      	movs	r2, #255	@ 0xff
 800720c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
	...

0800721c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b086      	sub	sp, #24
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007224:	2182      	movs	r1, #130	@ 0x82
 8007226:	4818      	ldr	r0, [pc, #96]	@ (8007288 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007228:	f000 fd0f 	bl	8007c4a <USBD_GetEpDesc>
 800722c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800722e:	2101      	movs	r1, #1
 8007230:	4815      	ldr	r0, [pc, #84]	@ (8007288 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007232:	f000 fd0a 	bl	8007c4a <USBD_GetEpDesc>
 8007236:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007238:	2181      	movs	r1, #129	@ 0x81
 800723a:	4813      	ldr	r0, [pc, #76]	@ (8007288 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800723c:	f000 fd05 	bl	8007c4a <USBD_GetEpDesc>
 8007240:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d002      	beq.n	800724e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	2210      	movs	r2, #16
 800724c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d006      	beq.n	8007262 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	2200      	movs	r2, #0
 8007258:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800725c:	711a      	strb	r2, [r3, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d006      	beq.n	8007276 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2200      	movs	r2, #0
 800726c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007270:	711a      	strb	r2, [r3, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2243      	movs	r2, #67	@ 0x43
 800727a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800727c:	4b02      	ldr	r3, [pc, #8]	@ (8007288 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800727e:	4618      	mov	r0, r3
 8007280:	3718      	adds	r7, #24
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	20000054 	.word	0x20000054

0800728c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b086      	sub	sp, #24
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007294:	2182      	movs	r1, #130	@ 0x82
 8007296:	4818      	ldr	r0, [pc, #96]	@ (80072f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007298:	f000 fcd7 	bl	8007c4a <USBD_GetEpDesc>
 800729c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800729e:	2101      	movs	r1, #1
 80072a0:	4815      	ldr	r0, [pc, #84]	@ (80072f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80072a2:	f000 fcd2 	bl	8007c4a <USBD_GetEpDesc>
 80072a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80072a8:	2181      	movs	r1, #129	@ 0x81
 80072aa:	4813      	ldr	r0, [pc, #76]	@ (80072f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80072ac:	f000 fccd 	bl	8007c4a <USBD_GetEpDesc>
 80072b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d002      	beq.n	80072be <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	2210      	movs	r2, #16
 80072bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d006      	beq.n	80072d2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	2200      	movs	r2, #0
 80072c8:	711a      	strb	r2, [r3, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f042 0202 	orr.w	r2, r2, #2
 80072d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d006      	beq.n	80072e6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2200      	movs	r2, #0
 80072dc:	711a      	strb	r2, [r3, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	f042 0202 	orr.w	r2, r2, #2
 80072e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2243      	movs	r2, #67	@ 0x43
 80072ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80072ec:	4b02      	ldr	r3, [pc, #8]	@ (80072f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3718      	adds	r7, #24
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	20000054 	.word	0x20000054

080072fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b086      	sub	sp, #24
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007304:	2182      	movs	r1, #130	@ 0x82
 8007306:	4818      	ldr	r0, [pc, #96]	@ (8007368 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007308:	f000 fc9f 	bl	8007c4a <USBD_GetEpDesc>
 800730c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800730e:	2101      	movs	r1, #1
 8007310:	4815      	ldr	r0, [pc, #84]	@ (8007368 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007312:	f000 fc9a 	bl	8007c4a <USBD_GetEpDesc>
 8007316:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007318:	2181      	movs	r1, #129	@ 0x81
 800731a:	4813      	ldr	r0, [pc, #76]	@ (8007368 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800731c:	f000 fc95 	bl	8007c4a <USBD_GetEpDesc>
 8007320:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d002      	beq.n	800732e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	2210      	movs	r2, #16
 800732c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d006      	beq.n	8007342 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	2200      	movs	r2, #0
 8007338:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800733c:	711a      	strb	r2, [r3, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d006      	beq.n	8007356 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2200      	movs	r2, #0
 800734c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007350:	711a      	strb	r2, [r3, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2243      	movs	r2, #67	@ 0x43
 800735a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800735c:	4b02      	ldr	r3, [pc, #8]	@ (8007368 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800735e:	4618      	mov	r0, r3
 8007360:	3718      	adds	r7, #24
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	20000054 	.word	0x20000054

0800736c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	220a      	movs	r2, #10
 8007378:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800737a:	4b03      	ldr	r3, [pc, #12]	@ (8007388 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800737c:	4618      	mov	r0, r3
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr
 8007388:	20000010 	.word	0x20000010

0800738c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d101      	bne.n	80073a0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800739c:	2303      	movs	r3, #3
 800739e:	e009      	b.n	80073b4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	33b0      	adds	r3, #176	@ 0xb0
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	4413      	add	r3, r2
 80073ae:	683a      	ldr	r2, [r7, #0]
 80073b0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b087      	sub	sp, #28
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	32b0      	adds	r2, #176	@ 0xb0
 80073d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073da:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d101      	bne.n	80073e6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80073e2:	2303      	movs	r3, #3
 80073e4:	e008      	b.n	80073f8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	68ba      	ldr	r2, [r7, #8]
 80073ea:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	371c      	adds	r7, #28
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	32b0      	adds	r2, #176	@ 0xb0
 8007418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800741c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d101      	bne.n	8007428 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007424:	2303      	movs	r3, #3
 8007426:	e004      	b.n	8007432 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	683a      	ldr	r2, [r7, #0]
 800742c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3714      	adds	r7, #20
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr
	...

08007440 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	32b0      	adds	r2, #176	@ 0xb0
 8007452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007456:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	32b0      	adds	r2, #176	@ 0xb0
 8007462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d101      	bne.n	800746e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800746a:	2303      	movs	r3, #3
 800746c:	e018      	b.n	80074a0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	7c1b      	ldrb	r3, [r3, #16]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d10a      	bne.n	800748c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007476:	4b0c      	ldr	r3, [pc, #48]	@ (80074a8 <USBD_CDC_ReceivePacket+0x68>)
 8007478:	7819      	ldrb	r1, [r3, #0]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007480:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f001 ff8f 	bl	80093a8 <USBD_LL_PrepareReceive>
 800748a:	e008      	b.n	800749e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800748c:	4b06      	ldr	r3, [pc, #24]	@ (80074a8 <USBD_CDC_ReceivePacket+0x68>)
 800748e:	7819      	ldrb	r1, [r3, #0]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007496:	2340      	movs	r3, #64	@ 0x40
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f001 ff85 	bl	80093a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3710      	adds	r7, #16
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	20000098 	.word	0x20000098

080074ac <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b086      	sub	sp, #24
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	4613      	mov	r3, r2
 80074b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d101      	bne.n	80074c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80074c0:	2303      	movs	r3, #3
 80074c2:	e01f      	b.n	8007504 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d003      	beq.n	80074ea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	68ba      	ldr	r2, [r7, #8]
 80074e6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2201      	movs	r2, #1
 80074ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	79fa      	ldrb	r2, [r7, #7]
 80074f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f001 fdff 	bl	80090fc <USBD_LL_Init>
 80074fe:	4603      	mov	r3, r0
 8007500:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007502:	7dfb      	ldrb	r3, [r7, #23]
}
 8007504:	4618      	mov	r0, r3
 8007506:	3718      	adds	r7, #24
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007516:	2300      	movs	r3, #0
 8007518:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d101      	bne.n	8007524 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007520:	2303      	movs	r3, #3
 8007522:	e025      	b.n	8007570 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	683a      	ldr	r2, [r7, #0]
 8007528:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	32ae      	adds	r2, #174	@ 0xae
 8007536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800753a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00f      	beq.n	8007560 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	32ae      	adds	r2, #174	@ 0xae
 800754a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800754e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007550:	f107 020e 	add.w	r2, r7, #14
 8007554:	4610      	mov	r0, r2
 8007556:	4798      	blx	r3
 8007558:	4602      	mov	r2, r0
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007566:	1c5a      	adds	r2, r3, #1
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f001 fe07 	bl	8009194 <USBD_LL_Start>
 8007586:	4603      	mov	r3, r0
}
 8007588:	4618      	mov	r0, r3
 800758a:	3708      	adds	r7, #8
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007598:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800759a:	4618      	mov	r0, r3
 800759c:	370c      	adds	r7, #12
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr

080075a6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b084      	sub	sp, #16
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
 80075ae:	460b      	mov	r3, r1
 80075b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80075b2:	2300      	movs	r3, #0
 80075b4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d009      	beq.n	80075d4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	78fa      	ldrb	r2, [r7, #3]
 80075ca:	4611      	mov	r1, r2
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	4798      	blx	r3
 80075d0:	4603      	mov	r3, r0
 80075d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80075d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b084      	sub	sp, #16
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
 80075e6:	460b      	mov	r3, r1
 80075e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80075ea:	2300      	movs	r3, #0
 80075ec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	78fa      	ldrb	r2, [r7, #3]
 80075f8:	4611      	mov	r1, r2
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	4798      	blx	r3
 80075fe:	4603      	mov	r3, r0
 8007600:	2b00      	cmp	r3, #0
 8007602:	d001      	beq.n	8007608 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007604:	2303      	movs	r3, #3
 8007606:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007608:	7bfb      	ldrb	r3, [r7, #15]
}
 800760a:	4618      	mov	r0, r3
 800760c:	3710      	adds	r7, #16
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}

08007612 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007612:	b580      	push	{r7, lr}
 8007614:	b084      	sub	sp, #16
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
 800761a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007622:	6839      	ldr	r1, [r7, #0]
 8007624:	4618      	mov	r0, r3
 8007626:	f001 f90c 	bl	8008842 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2201      	movs	r2, #1
 800762e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007638:	461a      	mov	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007646:	f003 031f 	and.w	r3, r3, #31
 800764a:	2b02      	cmp	r3, #2
 800764c:	d01a      	beq.n	8007684 <USBD_LL_SetupStage+0x72>
 800764e:	2b02      	cmp	r3, #2
 8007650:	d822      	bhi.n	8007698 <USBD_LL_SetupStage+0x86>
 8007652:	2b00      	cmp	r3, #0
 8007654:	d002      	beq.n	800765c <USBD_LL_SetupStage+0x4a>
 8007656:	2b01      	cmp	r3, #1
 8007658:	d00a      	beq.n	8007670 <USBD_LL_SetupStage+0x5e>
 800765a:	e01d      	b.n	8007698 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007662:	4619      	mov	r1, r3
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 fb63 	bl	8007d30 <USBD_StdDevReq>
 800766a:	4603      	mov	r3, r0
 800766c:	73fb      	strb	r3, [r7, #15]
      break;
 800766e:	e020      	b.n	80076b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007676:	4619      	mov	r1, r3
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 fbcb 	bl	8007e14 <USBD_StdItfReq>
 800767e:	4603      	mov	r3, r0
 8007680:	73fb      	strb	r3, [r7, #15]
      break;
 8007682:	e016      	b.n	80076b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800768a:	4619      	mov	r1, r3
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 fc2d 	bl	8007eec <USBD_StdEPReq>
 8007692:	4603      	mov	r3, r0
 8007694:	73fb      	strb	r3, [r7, #15]
      break;
 8007696:	e00c      	b.n	80076b2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800769e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	4619      	mov	r1, r3
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f001 fdd4 	bl	8009254 <USBD_LL_StallEP>
 80076ac:	4603      	mov	r3, r0
 80076ae:	73fb      	strb	r3, [r7, #15]
      break;
 80076b0:	bf00      	nop
  }

  return ret;
 80076b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3710      	adds	r7, #16
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b086      	sub	sp, #24
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	460b      	mov	r3, r1
 80076c6:	607a      	str	r2, [r7, #4]
 80076c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80076ca:	2300      	movs	r3, #0
 80076cc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80076ce:	7afb      	ldrb	r3, [r7, #11]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d16e      	bne.n	80077b2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80076da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80076e2:	2b03      	cmp	r3, #3
 80076e4:	f040 8098 	bne.w	8007818 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	689a      	ldr	r2, [r3, #8]
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d913      	bls.n	800771c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	689a      	ldr	r2, [r3, #8]
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	1ad2      	subs	r2, r2, r3
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	68da      	ldr	r2, [r3, #12]
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	4293      	cmp	r3, r2
 800770c:	bf28      	it	cs
 800770e:	4613      	movcs	r3, r2
 8007710:	461a      	mov	r2, r3
 8007712:	6879      	ldr	r1, [r7, #4]
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f001 f994 	bl	8008a42 <USBD_CtlContinueRx>
 800771a:	e07d      	b.n	8007818 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007722:	f003 031f 	and.w	r3, r3, #31
 8007726:	2b02      	cmp	r3, #2
 8007728:	d014      	beq.n	8007754 <USBD_LL_DataOutStage+0x98>
 800772a:	2b02      	cmp	r3, #2
 800772c:	d81d      	bhi.n	800776a <USBD_LL_DataOutStage+0xae>
 800772e:	2b00      	cmp	r3, #0
 8007730:	d002      	beq.n	8007738 <USBD_LL_DataOutStage+0x7c>
 8007732:	2b01      	cmp	r3, #1
 8007734:	d003      	beq.n	800773e <USBD_LL_DataOutStage+0x82>
 8007736:	e018      	b.n	800776a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007738:	2300      	movs	r3, #0
 800773a:	75bb      	strb	r3, [r7, #22]
            break;
 800773c:	e018      	b.n	8007770 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007744:	b2db      	uxtb	r3, r3
 8007746:	4619      	mov	r1, r3
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f000 fa64 	bl	8007c16 <USBD_CoreFindIF>
 800774e:	4603      	mov	r3, r0
 8007750:	75bb      	strb	r3, [r7, #22]
            break;
 8007752:	e00d      	b.n	8007770 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800775a:	b2db      	uxtb	r3, r3
 800775c:	4619      	mov	r1, r3
 800775e:	68f8      	ldr	r0, [r7, #12]
 8007760:	f000 fa66 	bl	8007c30 <USBD_CoreFindEP>
 8007764:	4603      	mov	r3, r0
 8007766:	75bb      	strb	r3, [r7, #22]
            break;
 8007768:	e002      	b.n	8007770 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800776a:	2300      	movs	r3, #0
 800776c:	75bb      	strb	r3, [r7, #22]
            break;
 800776e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007770:	7dbb      	ldrb	r3, [r7, #22]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d119      	bne.n	80077aa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800777c:	b2db      	uxtb	r3, r3
 800777e:	2b03      	cmp	r3, #3
 8007780:	d113      	bne.n	80077aa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007782:	7dba      	ldrb	r2, [r7, #22]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	32ae      	adds	r2, #174	@ 0xae
 8007788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800778c:	691b      	ldr	r3, [r3, #16]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00b      	beq.n	80077aa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007792:	7dba      	ldrb	r2, [r7, #22]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800779a:	7dba      	ldrb	r2, [r7, #22]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	32ae      	adds	r2, #174	@ 0xae
 80077a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80077aa:	68f8      	ldr	r0, [r7, #12]
 80077ac:	f001 f95a 	bl	8008a64 <USBD_CtlSendStatus>
 80077b0:	e032      	b.n	8007818 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80077b2:	7afb      	ldrb	r3, [r7, #11]
 80077b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	4619      	mov	r1, r3
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	f000 fa37 	bl	8007c30 <USBD_CoreFindEP>
 80077c2:	4603      	mov	r3, r0
 80077c4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80077c6:	7dbb      	ldrb	r3, [r7, #22]
 80077c8:	2bff      	cmp	r3, #255	@ 0xff
 80077ca:	d025      	beq.n	8007818 <USBD_LL_DataOutStage+0x15c>
 80077cc:	7dbb      	ldrb	r3, [r7, #22]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d122      	bne.n	8007818 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	2b03      	cmp	r3, #3
 80077dc:	d117      	bne.n	800780e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80077de:	7dba      	ldrb	r2, [r7, #22]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	32ae      	adds	r2, #174	@ 0xae
 80077e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077e8:	699b      	ldr	r3, [r3, #24]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00f      	beq.n	800780e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80077ee:	7dba      	ldrb	r2, [r7, #22]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80077f6:	7dba      	ldrb	r2, [r7, #22]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	32ae      	adds	r2, #174	@ 0xae
 80077fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007800:	699b      	ldr	r3, [r3, #24]
 8007802:	7afa      	ldrb	r2, [r7, #11]
 8007804:	4611      	mov	r1, r2
 8007806:	68f8      	ldr	r0, [r7, #12]
 8007808:	4798      	blx	r3
 800780a:	4603      	mov	r3, r0
 800780c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800780e:	7dfb      	ldrb	r3, [r7, #23]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d001      	beq.n	8007818 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007814:	7dfb      	ldrb	r3, [r7, #23]
 8007816:	e000      	b.n	800781a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	3718      	adds	r7, #24
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}

08007822 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007822:	b580      	push	{r7, lr}
 8007824:	b086      	sub	sp, #24
 8007826:	af00      	add	r7, sp, #0
 8007828:	60f8      	str	r0, [r7, #12]
 800782a:	460b      	mov	r3, r1
 800782c:	607a      	str	r2, [r7, #4]
 800782e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007830:	7afb      	ldrb	r3, [r7, #11]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d16f      	bne.n	8007916 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	3314      	adds	r3, #20
 800783a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007842:	2b02      	cmp	r3, #2
 8007844:	d15a      	bne.n	80078fc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	689a      	ldr	r2, [r3, #8]
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	429a      	cmp	r2, r3
 8007850:	d914      	bls.n	800787c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	689a      	ldr	r2, [r3, #8]
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	1ad2      	subs	r2, r2, r3
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	461a      	mov	r2, r3
 8007866:	6879      	ldr	r1, [r7, #4]
 8007868:	68f8      	ldr	r0, [r7, #12]
 800786a:	f001 f8bc 	bl	80089e6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800786e:	2300      	movs	r3, #0
 8007870:	2200      	movs	r2, #0
 8007872:	2100      	movs	r1, #0
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f001 fd97 	bl	80093a8 <USBD_LL_PrepareReceive>
 800787a:	e03f      	b.n	80078fc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	68da      	ldr	r2, [r3, #12]
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	429a      	cmp	r2, r3
 8007886:	d11c      	bne.n	80078c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	685a      	ldr	r2, [r3, #4]
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007890:	429a      	cmp	r2, r3
 8007892:	d316      	bcc.n	80078c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	685a      	ldr	r2, [r3, #4]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800789e:	429a      	cmp	r2, r3
 80078a0:	d20f      	bcs.n	80078c2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80078a2:	2200      	movs	r2, #0
 80078a4:	2100      	movs	r1, #0
 80078a6:	68f8      	ldr	r0, [r7, #12]
 80078a8:	f001 f89d 	bl	80089e6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078b4:	2300      	movs	r3, #0
 80078b6:	2200      	movs	r2, #0
 80078b8:	2100      	movs	r1, #0
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f001 fd74 	bl	80093a8 <USBD_LL_PrepareReceive>
 80078c0:	e01c      	b.n	80078fc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	2b03      	cmp	r3, #3
 80078cc:	d10f      	bne.n	80078ee <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d009      	beq.n	80078ee <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2200      	movs	r2, #0
 80078de:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80078ee:	2180      	movs	r1, #128	@ 0x80
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	f001 fcaf 	bl	8009254 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	f001 f8c7 	bl	8008a8a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d03a      	beq.n	800797c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	f7ff fe42 	bl	8007590 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2200      	movs	r2, #0
 8007910:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007914:	e032      	b.n	800797c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007916:	7afb      	ldrb	r3, [r7, #11]
 8007918:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800791c:	b2db      	uxtb	r3, r3
 800791e:	4619      	mov	r1, r3
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	f000 f985 	bl	8007c30 <USBD_CoreFindEP>
 8007926:	4603      	mov	r3, r0
 8007928:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800792a:	7dfb      	ldrb	r3, [r7, #23]
 800792c:	2bff      	cmp	r3, #255	@ 0xff
 800792e:	d025      	beq.n	800797c <USBD_LL_DataInStage+0x15a>
 8007930:	7dfb      	ldrb	r3, [r7, #23]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d122      	bne.n	800797c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800793c:	b2db      	uxtb	r3, r3
 800793e:	2b03      	cmp	r3, #3
 8007940:	d11c      	bne.n	800797c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007942:	7dfa      	ldrb	r2, [r7, #23]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	32ae      	adds	r2, #174	@ 0xae
 8007948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800794c:	695b      	ldr	r3, [r3, #20]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d014      	beq.n	800797c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007952:	7dfa      	ldrb	r2, [r7, #23]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800795a:	7dfa      	ldrb	r2, [r7, #23]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	32ae      	adds	r2, #174	@ 0xae
 8007960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007964:	695b      	ldr	r3, [r3, #20]
 8007966:	7afa      	ldrb	r2, [r7, #11]
 8007968:	4611      	mov	r1, r2
 800796a:	68f8      	ldr	r0, [r7, #12]
 800796c:	4798      	blx	r3
 800796e:	4603      	mov	r3, r0
 8007970:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007972:	7dbb      	ldrb	r3, [r7, #22]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d001      	beq.n	800797c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007978:	7dbb      	ldrb	r3, [r7, #22]
 800797a:	e000      	b.n	800797e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3718      	adds	r7, #24
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b084      	sub	sp, #16
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800798e:	2300      	movs	r3, #0
 8007990:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2201      	movs	r2, #1
 8007996:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d014      	beq.n	80079ec <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00e      	beq.n	80079ec <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	6852      	ldr	r2, [r2, #4]
 80079da:	b2d2      	uxtb	r2, r2
 80079dc:	4611      	mov	r1, r2
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	4798      	blx	r3
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d001      	beq.n	80079ec <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80079e8:	2303      	movs	r3, #3
 80079ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079ec:	2340      	movs	r3, #64	@ 0x40
 80079ee:	2200      	movs	r2, #0
 80079f0:	2100      	movs	r1, #0
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f001 fbe9 	bl	80091ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2240      	movs	r2, #64	@ 0x40
 8007a04:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a08:	2340      	movs	r3, #64	@ 0x40
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	2180      	movs	r1, #128	@ 0x80
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f001 fbdb 	bl	80091ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2240      	movs	r2, #64	@ 0x40
 8007a1e:	621a      	str	r2, [r3, #32]

  return ret;
 8007a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3710      	adds	r7, #16
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}

08007a2a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007a2a:	b480      	push	{r7}
 8007a2c:	b083      	sub	sp, #12
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
 8007a32:	460b      	mov	r3, r1
 8007a34:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	78fa      	ldrb	r2, [r7, #3]
 8007a3a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	370c      	adds	r7, #12
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr

08007a4a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007a4a:	b480      	push	{r7}
 8007a4c:	b083      	sub	sp, #12
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	2b04      	cmp	r3, #4
 8007a5c:	d006      	beq.n	8007a6c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a64:	b2da      	uxtb	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2204      	movs	r2, #4
 8007a70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	370c      	adds	r7, #12
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr

08007a82 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007a82:	b480      	push	{r7}
 8007a84:	b083      	sub	sp, #12
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	2b04      	cmp	r3, #4
 8007a94:	d106      	bne.n	8007aa4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007a9c:	b2da      	uxtb	r2, r3
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007aa4:	2300      	movs	r3, #0
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	370c      	adds	r7, #12
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr

08007ab2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b082      	sub	sp, #8
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	2b03      	cmp	r3, #3
 8007ac4:	d110      	bne.n	8007ae8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00b      	beq.n	8007ae8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ad6:	69db      	ldr	r3, [r3, #28]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d005      	beq.n	8007ae8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ae2:	69db      	ldr	r3, [r3, #28]
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3708      	adds	r7, #8
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}

08007af2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b082      	sub	sp, #8
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
 8007afa:	460b      	mov	r3, r1
 8007afc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	32ae      	adds	r2, #174	@ 0xae
 8007b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d101      	bne.n	8007b14 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007b10:	2303      	movs	r3, #3
 8007b12:	e01c      	b.n	8007b4e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	2b03      	cmp	r3, #3
 8007b1e:	d115      	bne.n	8007b4c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	32ae      	adds	r2, #174	@ 0xae
 8007b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b2e:	6a1b      	ldr	r3, [r3, #32]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00b      	beq.n	8007b4c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	32ae      	adds	r2, #174	@ 0xae
 8007b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b42:	6a1b      	ldr	r3, [r3, #32]
 8007b44:	78fa      	ldrb	r2, [r7, #3]
 8007b46:	4611      	mov	r1, r2
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3708      	adds	r7, #8
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007b56:	b580      	push	{r7, lr}
 8007b58:	b082      	sub	sp, #8
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
 8007b5e:	460b      	mov	r3, r1
 8007b60:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	32ae      	adds	r2, #174	@ 0xae
 8007b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d101      	bne.n	8007b78 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007b74:	2303      	movs	r3, #3
 8007b76:	e01c      	b.n	8007bb2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	2b03      	cmp	r3, #3
 8007b82:	d115      	bne.n	8007bb0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	32ae      	adds	r2, #174	@ 0xae
 8007b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00b      	beq.n	8007bb0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	32ae      	adds	r2, #174	@ 0xae
 8007ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ba8:	78fa      	ldrb	r2, [r7, #3]
 8007baa:	4611      	mov	r1, r2
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3708      	adds	r7, #8
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007bba:	b480      	push	{r7}
 8007bbc:	b083      	sub	sp, #12
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00e      	beq.n	8007c0c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	6852      	ldr	r2, [r2, #4]
 8007bfa:	b2d2      	uxtb	r2, r2
 8007bfc:	4611      	mov	r1, r2
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	4798      	blx	r3
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d001      	beq.n	8007c0c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007c16:	b480      	push	{r7}
 8007c18:	b083      	sub	sp, #12
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
 8007c1e:	460b      	mov	r3, r1
 8007c20:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007c22:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	460b      	mov	r3, r1
 8007c3a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007c3c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	370c      	adds	r7, #12
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr

08007c4a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b086      	sub	sp, #24
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
 8007c52:	460b      	mov	r3, r1
 8007c54:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	885b      	ldrh	r3, [r3, #2]
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	68fa      	ldr	r2, [r7, #12]
 8007c6a:	7812      	ldrb	r2, [r2, #0]
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d91f      	bls.n	8007cb0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007c76:	e013      	b.n	8007ca0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007c78:	f107 030a 	add.w	r3, r7, #10
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	6978      	ldr	r0, [r7, #20]
 8007c80:	f000 f81b 	bl	8007cba <USBD_GetNextDesc>
 8007c84:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	785b      	ldrb	r3, [r3, #1]
 8007c8a:	2b05      	cmp	r3, #5
 8007c8c:	d108      	bne.n	8007ca0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	789b      	ldrb	r3, [r3, #2]
 8007c96:	78fa      	ldrb	r2, [r7, #3]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d008      	beq.n	8007cae <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	885b      	ldrh	r3, [r3, #2]
 8007ca4:	b29a      	uxth	r2, r3
 8007ca6:	897b      	ldrh	r3, [r7, #10]
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d8e5      	bhi.n	8007c78 <USBD_GetEpDesc+0x2e>
 8007cac:	e000      	b.n	8007cb0 <USBD_GetEpDesc+0x66>
          break;
 8007cae:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007cb0:	693b      	ldr	r3, [r7, #16]
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3718      	adds	r7, #24
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007cba:	b480      	push	{r7}
 8007cbc:	b085      	sub	sp, #20
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
 8007cc2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	881b      	ldrh	r3, [r3, #0]
 8007ccc:	68fa      	ldr	r2, [r7, #12]
 8007cce:	7812      	ldrb	r2, [r2, #0]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	b29a      	uxth	r2, r3
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	461a      	mov	r2, r3
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3714      	adds	r7, #20
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr

08007cf2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007cf2:	b480      	push	{r7}
 8007cf4:	b087      	sub	sp, #28
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	3301      	adds	r3, #1
 8007d08:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007d10:	8a3b      	ldrh	r3, [r7, #16]
 8007d12:	021b      	lsls	r3, r3, #8
 8007d14:	b21a      	sxth	r2, r3
 8007d16:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	b21b      	sxth	r3, r3
 8007d1e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007d20:	89fb      	ldrh	r3, [r7, #14]
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	371c      	adds	r7, #28
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr
	...

08007d30 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007d46:	2b40      	cmp	r3, #64	@ 0x40
 8007d48:	d005      	beq.n	8007d56 <USBD_StdDevReq+0x26>
 8007d4a:	2b40      	cmp	r3, #64	@ 0x40
 8007d4c:	d857      	bhi.n	8007dfe <USBD_StdDevReq+0xce>
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00f      	beq.n	8007d72 <USBD_StdDevReq+0x42>
 8007d52:	2b20      	cmp	r3, #32
 8007d54:	d153      	bne.n	8007dfe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	32ae      	adds	r2, #174	@ 0xae
 8007d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	6839      	ldr	r1, [r7, #0]
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	4798      	blx	r3
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8007d70:	e04a      	b.n	8007e08 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	785b      	ldrb	r3, [r3, #1]
 8007d76:	2b09      	cmp	r3, #9
 8007d78:	d83b      	bhi.n	8007df2 <USBD_StdDevReq+0xc2>
 8007d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d80 <USBD_StdDevReq+0x50>)
 8007d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d80:	08007dd5 	.word	0x08007dd5
 8007d84:	08007de9 	.word	0x08007de9
 8007d88:	08007df3 	.word	0x08007df3
 8007d8c:	08007ddf 	.word	0x08007ddf
 8007d90:	08007df3 	.word	0x08007df3
 8007d94:	08007db3 	.word	0x08007db3
 8007d98:	08007da9 	.word	0x08007da9
 8007d9c:	08007df3 	.word	0x08007df3
 8007da0:	08007dcb 	.word	0x08007dcb
 8007da4:	08007dbd 	.word	0x08007dbd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007da8:	6839      	ldr	r1, [r7, #0]
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 fa3c 	bl	8008228 <USBD_GetDescriptor>
          break;
 8007db0:	e024      	b.n	8007dfc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007db2:	6839      	ldr	r1, [r7, #0]
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 fba1 	bl	80084fc <USBD_SetAddress>
          break;
 8007dba:	e01f      	b.n	8007dfc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007dbc:	6839      	ldr	r1, [r7, #0]
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 fbe0 	bl	8008584 <USBD_SetConfig>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	73fb      	strb	r3, [r7, #15]
          break;
 8007dc8:	e018      	b.n	8007dfc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007dca:	6839      	ldr	r1, [r7, #0]
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 fc83 	bl	80086d8 <USBD_GetConfig>
          break;
 8007dd2:	e013      	b.n	8007dfc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007dd4:	6839      	ldr	r1, [r7, #0]
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 fcb4 	bl	8008744 <USBD_GetStatus>
          break;
 8007ddc:	e00e      	b.n	8007dfc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007dde:	6839      	ldr	r1, [r7, #0]
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 fce3 	bl	80087ac <USBD_SetFeature>
          break;
 8007de6:	e009      	b.n	8007dfc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007de8:	6839      	ldr	r1, [r7, #0]
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 fd07 	bl	80087fe <USBD_ClrFeature>
          break;
 8007df0:	e004      	b.n	8007dfc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007df2:	6839      	ldr	r1, [r7, #0]
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 fd5e 	bl	80088b6 <USBD_CtlError>
          break;
 8007dfa:	bf00      	nop
      }
      break;
 8007dfc:	e004      	b.n	8007e08 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007dfe:	6839      	ldr	r1, [r7, #0]
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 fd58 	bl	80088b6 <USBD_CtlError>
      break;
 8007e06:	bf00      	nop
  }

  return ret;
 8007e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop

08007e14 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007e2a:	2b40      	cmp	r3, #64	@ 0x40
 8007e2c:	d005      	beq.n	8007e3a <USBD_StdItfReq+0x26>
 8007e2e:	2b40      	cmp	r3, #64	@ 0x40
 8007e30:	d852      	bhi.n	8007ed8 <USBD_StdItfReq+0xc4>
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d001      	beq.n	8007e3a <USBD_StdItfReq+0x26>
 8007e36:	2b20      	cmp	r3, #32
 8007e38:	d14e      	bne.n	8007ed8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	3b01      	subs	r3, #1
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	d840      	bhi.n	8007eca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	889b      	ldrh	r3, [r3, #4]
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d836      	bhi.n	8007ec0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	889b      	ldrh	r3, [r3, #4]
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	4619      	mov	r1, r3
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f7ff fedb 	bl	8007c16 <USBD_CoreFindIF>
 8007e60:	4603      	mov	r3, r0
 8007e62:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e64:	7bbb      	ldrb	r3, [r7, #14]
 8007e66:	2bff      	cmp	r3, #255	@ 0xff
 8007e68:	d01d      	beq.n	8007ea6 <USBD_StdItfReq+0x92>
 8007e6a:	7bbb      	ldrb	r3, [r7, #14]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d11a      	bne.n	8007ea6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007e70:	7bba      	ldrb	r2, [r7, #14]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	32ae      	adds	r2, #174	@ 0xae
 8007e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d00f      	beq.n	8007ea0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007e80:	7bba      	ldrb	r2, [r7, #14]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007e88:	7bba      	ldrb	r2, [r7, #14]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	32ae      	adds	r2, #174	@ 0xae
 8007e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	6839      	ldr	r1, [r7, #0]
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	4798      	blx	r3
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e9e:	e004      	b.n	8007eaa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007ea0:	2303      	movs	r3, #3
 8007ea2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007ea4:	e001      	b.n	8007eaa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007ea6:	2303      	movs	r3, #3
 8007ea8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	88db      	ldrh	r3, [r3, #6]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d110      	bne.n	8007ed4 <USBD_StdItfReq+0xc0>
 8007eb2:	7bfb      	ldrb	r3, [r7, #15]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d10d      	bne.n	8007ed4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 fdd3 	bl	8008a64 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007ebe:	e009      	b.n	8007ed4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007ec0:	6839      	ldr	r1, [r7, #0]
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 fcf7 	bl	80088b6 <USBD_CtlError>
          break;
 8007ec8:	e004      	b.n	8007ed4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007eca:	6839      	ldr	r1, [r7, #0]
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 fcf2 	bl	80088b6 <USBD_CtlError>
          break;
 8007ed2:	e000      	b.n	8007ed6 <USBD_StdItfReq+0xc2>
          break;
 8007ed4:	bf00      	nop
      }
      break;
 8007ed6:	e004      	b.n	8007ee2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007ed8:	6839      	ldr	r1, [r7, #0]
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 fceb 	bl	80088b6 <USBD_CtlError>
      break;
 8007ee0:	bf00      	nop
  }

  return ret;
 8007ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3710      	adds	r7, #16
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	889b      	ldrh	r3, [r3, #4]
 8007efe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007f08:	2b40      	cmp	r3, #64	@ 0x40
 8007f0a:	d007      	beq.n	8007f1c <USBD_StdEPReq+0x30>
 8007f0c:	2b40      	cmp	r3, #64	@ 0x40
 8007f0e:	f200 817f 	bhi.w	8008210 <USBD_StdEPReq+0x324>
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d02a      	beq.n	8007f6c <USBD_StdEPReq+0x80>
 8007f16:	2b20      	cmp	r3, #32
 8007f18:	f040 817a 	bne.w	8008210 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007f1c:	7bbb      	ldrb	r3, [r7, #14]
 8007f1e:	4619      	mov	r1, r3
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f7ff fe85 	bl	8007c30 <USBD_CoreFindEP>
 8007f26:	4603      	mov	r3, r0
 8007f28:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f2a:	7b7b      	ldrb	r3, [r7, #13]
 8007f2c:	2bff      	cmp	r3, #255	@ 0xff
 8007f2e:	f000 8174 	beq.w	800821a <USBD_StdEPReq+0x32e>
 8007f32:	7b7b      	ldrb	r3, [r7, #13]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f040 8170 	bne.w	800821a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007f3a:	7b7a      	ldrb	r2, [r7, #13]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007f42:	7b7a      	ldrb	r2, [r7, #13]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	32ae      	adds	r2, #174	@ 0xae
 8007f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	f000 8163 	beq.w	800821a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007f54:	7b7a      	ldrb	r2, [r7, #13]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	32ae      	adds	r2, #174	@ 0xae
 8007f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	6839      	ldr	r1, [r7, #0]
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	4798      	blx	r3
 8007f66:	4603      	mov	r3, r0
 8007f68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007f6a:	e156      	b.n	800821a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	785b      	ldrb	r3, [r3, #1]
 8007f70:	2b03      	cmp	r3, #3
 8007f72:	d008      	beq.n	8007f86 <USBD_StdEPReq+0x9a>
 8007f74:	2b03      	cmp	r3, #3
 8007f76:	f300 8145 	bgt.w	8008204 <USBD_StdEPReq+0x318>
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	f000 809b 	beq.w	80080b6 <USBD_StdEPReq+0x1ca>
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d03c      	beq.n	8007ffe <USBD_StdEPReq+0x112>
 8007f84:	e13e      	b.n	8008204 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	d002      	beq.n	8007f98 <USBD_StdEPReq+0xac>
 8007f92:	2b03      	cmp	r3, #3
 8007f94:	d016      	beq.n	8007fc4 <USBD_StdEPReq+0xd8>
 8007f96:	e02c      	b.n	8007ff2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f98:	7bbb      	ldrb	r3, [r7, #14]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00d      	beq.n	8007fba <USBD_StdEPReq+0xce>
 8007f9e:	7bbb      	ldrb	r3, [r7, #14]
 8007fa0:	2b80      	cmp	r3, #128	@ 0x80
 8007fa2:	d00a      	beq.n	8007fba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007fa4:	7bbb      	ldrb	r3, [r7, #14]
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f001 f953 	bl	8009254 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fae:	2180      	movs	r1, #128	@ 0x80
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f001 f94f 	bl	8009254 <USBD_LL_StallEP>
 8007fb6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007fb8:	e020      	b.n	8007ffc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007fba:	6839      	ldr	r1, [r7, #0]
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 fc7a 	bl	80088b6 <USBD_CtlError>
              break;
 8007fc2:	e01b      	b.n	8007ffc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	885b      	ldrh	r3, [r3, #2]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d10e      	bne.n	8007fea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007fcc:	7bbb      	ldrb	r3, [r7, #14]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d00b      	beq.n	8007fea <USBD_StdEPReq+0xfe>
 8007fd2:	7bbb      	ldrb	r3, [r7, #14]
 8007fd4:	2b80      	cmp	r3, #128	@ 0x80
 8007fd6:	d008      	beq.n	8007fea <USBD_StdEPReq+0xfe>
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	88db      	ldrh	r3, [r3, #6]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d104      	bne.n	8007fea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007fe0:	7bbb      	ldrb	r3, [r7, #14]
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f001 f935 	bl	8009254 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fd3a 	bl	8008a64 <USBD_CtlSendStatus>

              break;
 8007ff0:	e004      	b.n	8007ffc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007ff2:	6839      	ldr	r1, [r7, #0]
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 fc5e 	bl	80088b6 <USBD_CtlError>
              break;
 8007ffa:	bf00      	nop
          }
          break;
 8007ffc:	e107      	b.n	800820e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008004:	b2db      	uxtb	r3, r3
 8008006:	2b02      	cmp	r3, #2
 8008008:	d002      	beq.n	8008010 <USBD_StdEPReq+0x124>
 800800a:	2b03      	cmp	r3, #3
 800800c:	d016      	beq.n	800803c <USBD_StdEPReq+0x150>
 800800e:	e04b      	b.n	80080a8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008010:	7bbb      	ldrb	r3, [r7, #14]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d00d      	beq.n	8008032 <USBD_StdEPReq+0x146>
 8008016:	7bbb      	ldrb	r3, [r7, #14]
 8008018:	2b80      	cmp	r3, #128	@ 0x80
 800801a:	d00a      	beq.n	8008032 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800801c:	7bbb      	ldrb	r3, [r7, #14]
 800801e:	4619      	mov	r1, r3
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f001 f917 	bl	8009254 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008026:	2180      	movs	r1, #128	@ 0x80
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f001 f913 	bl	8009254 <USBD_LL_StallEP>
 800802e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008030:	e040      	b.n	80080b4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008032:	6839      	ldr	r1, [r7, #0]
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 fc3e 	bl	80088b6 <USBD_CtlError>
              break;
 800803a:	e03b      	b.n	80080b4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	885b      	ldrh	r3, [r3, #2]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d136      	bne.n	80080b2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008044:	7bbb      	ldrb	r3, [r7, #14]
 8008046:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800804a:	2b00      	cmp	r3, #0
 800804c:	d004      	beq.n	8008058 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800804e:	7bbb      	ldrb	r3, [r7, #14]
 8008050:	4619      	mov	r1, r3
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f001 f91d 	bl	8009292 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 fd03 	bl	8008a64 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800805e:	7bbb      	ldrb	r3, [r7, #14]
 8008060:	4619      	mov	r1, r3
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f7ff fde4 	bl	8007c30 <USBD_CoreFindEP>
 8008068:	4603      	mov	r3, r0
 800806a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800806c:	7b7b      	ldrb	r3, [r7, #13]
 800806e:	2bff      	cmp	r3, #255	@ 0xff
 8008070:	d01f      	beq.n	80080b2 <USBD_StdEPReq+0x1c6>
 8008072:	7b7b      	ldrb	r3, [r7, #13]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d11c      	bne.n	80080b2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008078:	7b7a      	ldrb	r2, [r7, #13]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008080:	7b7a      	ldrb	r2, [r7, #13]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	32ae      	adds	r2, #174	@ 0xae
 8008086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800808a:	689b      	ldr	r3, [r3, #8]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d010      	beq.n	80080b2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008090:	7b7a      	ldrb	r2, [r7, #13]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	32ae      	adds	r2, #174	@ 0xae
 8008096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	6839      	ldr	r1, [r7, #0]
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	4798      	blx	r3
 80080a2:	4603      	mov	r3, r0
 80080a4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80080a6:	e004      	b.n	80080b2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80080a8:	6839      	ldr	r1, [r7, #0]
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fc03 	bl	80088b6 <USBD_CtlError>
              break;
 80080b0:	e000      	b.n	80080b4 <USBD_StdEPReq+0x1c8>
              break;
 80080b2:	bf00      	nop
          }
          break;
 80080b4:	e0ab      	b.n	800820e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	2b02      	cmp	r3, #2
 80080c0:	d002      	beq.n	80080c8 <USBD_StdEPReq+0x1dc>
 80080c2:	2b03      	cmp	r3, #3
 80080c4:	d032      	beq.n	800812c <USBD_StdEPReq+0x240>
 80080c6:	e097      	b.n	80081f8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080c8:	7bbb      	ldrb	r3, [r7, #14]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d007      	beq.n	80080de <USBD_StdEPReq+0x1f2>
 80080ce:	7bbb      	ldrb	r3, [r7, #14]
 80080d0:	2b80      	cmp	r3, #128	@ 0x80
 80080d2:	d004      	beq.n	80080de <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80080d4:	6839      	ldr	r1, [r7, #0]
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 fbed 	bl	80088b6 <USBD_CtlError>
                break;
 80080dc:	e091      	b.n	8008202 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	da0b      	bge.n	80080fe <USBD_StdEPReq+0x212>
 80080e6:	7bbb      	ldrb	r3, [r7, #14]
 80080e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80080ec:	4613      	mov	r3, r2
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	4413      	add	r3, r2
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	3310      	adds	r3, #16
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	4413      	add	r3, r2
 80080fa:	3304      	adds	r3, #4
 80080fc:	e00b      	b.n	8008116 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80080fe:	7bbb      	ldrb	r3, [r7, #14]
 8008100:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008104:	4613      	mov	r3, r2
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	4413      	add	r3, r2
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	4413      	add	r3, r2
 8008114:	3304      	adds	r3, #4
 8008116:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	2200      	movs	r2, #0
 800811c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	2202      	movs	r2, #2
 8008122:	4619      	mov	r1, r3
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 fc43 	bl	80089b0 <USBD_CtlSendData>
              break;
 800812a:	e06a      	b.n	8008202 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800812c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008130:	2b00      	cmp	r3, #0
 8008132:	da11      	bge.n	8008158 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008134:	7bbb      	ldrb	r3, [r7, #14]
 8008136:	f003 020f 	and.w	r2, r3, #15
 800813a:	6879      	ldr	r1, [r7, #4]
 800813c:	4613      	mov	r3, r2
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	4413      	add	r3, r2
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	440b      	add	r3, r1
 8008146:	3324      	adds	r3, #36	@ 0x24
 8008148:	881b      	ldrh	r3, [r3, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d117      	bne.n	800817e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800814e:	6839      	ldr	r1, [r7, #0]
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 fbb0 	bl	80088b6 <USBD_CtlError>
                  break;
 8008156:	e054      	b.n	8008202 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008158:	7bbb      	ldrb	r3, [r7, #14]
 800815a:	f003 020f 	and.w	r2, r3, #15
 800815e:	6879      	ldr	r1, [r7, #4]
 8008160:	4613      	mov	r3, r2
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	4413      	add	r3, r2
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	440b      	add	r3, r1
 800816a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800816e:	881b      	ldrh	r3, [r3, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d104      	bne.n	800817e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008174:	6839      	ldr	r1, [r7, #0]
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 fb9d 	bl	80088b6 <USBD_CtlError>
                  break;
 800817c:	e041      	b.n	8008202 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800817e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008182:	2b00      	cmp	r3, #0
 8008184:	da0b      	bge.n	800819e <USBD_StdEPReq+0x2b2>
 8008186:	7bbb      	ldrb	r3, [r7, #14]
 8008188:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800818c:	4613      	mov	r3, r2
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	4413      	add	r3, r2
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	3310      	adds	r3, #16
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	4413      	add	r3, r2
 800819a:	3304      	adds	r3, #4
 800819c:	e00b      	b.n	80081b6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800819e:	7bbb      	ldrb	r3, [r7, #14]
 80081a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081a4:	4613      	mov	r3, r2
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	4413      	add	r3, r2
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	4413      	add	r3, r2
 80081b4:	3304      	adds	r3, #4
 80081b6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80081b8:	7bbb      	ldrb	r3, [r7, #14]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d002      	beq.n	80081c4 <USBD_StdEPReq+0x2d8>
 80081be:	7bbb      	ldrb	r3, [r7, #14]
 80081c0:	2b80      	cmp	r3, #128	@ 0x80
 80081c2:	d103      	bne.n	80081cc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	2200      	movs	r2, #0
 80081c8:	601a      	str	r2, [r3, #0]
 80081ca:	e00e      	b.n	80081ea <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80081cc:	7bbb      	ldrb	r3, [r7, #14]
 80081ce:	4619      	mov	r1, r3
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f001 f87d 	bl	80092d0 <USBD_LL_IsStallEP>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d003      	beq.n	80081e4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	2201      	movs	r2, #1
 80081e0:	601a      	str	r2, [r3, #0]
 80081e2:	e002      	b.n	80081ea <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	2200      	movs	r2, #0
 80081e8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	2202      	movs	r2, #2
 80081ee:	4619      	mov	r1, r3
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 fbdd 	bl	80089b0 <USBD_CtlSendData>
              break;
 80081f6:	e004      	b.n	8008202 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80081f8:	6839      	ldr	r1, [r7, #0]
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 fb5b 	bl	80088b6 <USBD_CtlError>
              break;
 8008200:	bf00      	nop
          }
          break;
 8008202:	e004      	b.n	800820e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008204:	6839      	ldr	r1, [r7, #0]
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 fb55 	bl	80088b6 <USBD_CtlError>
          break;
 800820c:	bf00      	nop
      }
      break;
 800820e:	e005      	b.n	800821c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008210:	6839      	ldr	r1, [r7, #0]
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 fb4f 	bl	80088b6 <USBD_CtlError>
      break;
 8008218:	e000      	b.n	800821c <USBD_StdEPReq+0x330>
      break;
 800821a:	bf00      	nop
  }

  return ret;
 800821c:	7bfb      	ldrb	r3, [r7, #15]
}
 800821e:	4618      	mov	r0, r3
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
	...

08008228 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008232:	2300      	movs	r3, #0
 8008234:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008236:	2300      	movs	r3, #0
 8008238:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800823a:	2300      	movs	r3, #0
 800823c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	885b      	ldrh	r3, [r3, #2]
 8008242:	0a1b      	lsrs	r3, r3, #8
 8008244:	b29b      	uxth	r3, r3
 8008246:	3b01      	subs	r3, #1
 8008248:	2b06      	cmp	r3, #6
 800824a:	f200 8128 	bhi.w	800849e <USBD_GetDescriptor+0x276>
 800824e:	a201      	add	r2, pc, #4	@ (adr r2, 8008254 <USBD_GetDescriptor+0x2c>)
 8008250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008254:	08008271 	.word	0x08008271
 8008258:	08008289 	.word	0x08008289
 800825c:	080082c9 	.word	0x080082c9
 8008260:	0800849f 	.word	0x0800849f
 8008264:	0800849f 	.word	0x0800849f
 8008268:	0800843f 	.word	0x0800843f
 800826c:	0800846b 	.word	0x0800846b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	7c12      	ldrb	r2, [r2, #16]
 800827c:	f107 0108 	add.w	r1, r7, #8
 8008280:	4610      	mov	r0, r2
 8008282:	4798      	blx	r3
 8008284:	60f8      	str	r0, [r7, #12]
      break;
 8008286:	e112      	b.n	80084ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	7c1b      	ldrb	r3, [r3, #16]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d10d      	bne.n	80082ac <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008298:	f107 0208 	add.w	r2, r7, #8
 800829c:	4610      	mov	r0, r2
 800829e:	4798      	blx	r3
 80082a0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	3301      	adds	r3, #1
 80082a6:	2202      	movs	r2, #2
 80082a8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80082aa:	e100      	b.n	80084ae <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082b4:	f107 0208 	add.w	r2, r7, #8
 80082b8:	4610      	mov	r0, r2
 80082ba:	4798      	blx	r3
 80082bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	3301      	adds	r3, #1
 80082c2:	2202      	movs	r2, #2
 80082c4:	701a      	strb	r2, [r3, #0]
      break;
 80082c6:	e0f2      	b.n	80084ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	885b      	ldrh	r3, [r3, #2]
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	2b05      	cmp	r3, #5
 80082d0:	f200 80ac 	bhi.w	800842c <USBD_GetDescriptor+0x204>
 80082d4:	a201      	add	r2, pc, #4	@ (adr r2, 80082dc <USBD_GetDescriptor+0xb4>)
 80082d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082da:	bf00      	nop
 80082dc:	080082f5 	.word	0x080082f5
 80082e0:	08008329 	.word	0x08008329
 80082e4:	0800835d 	.word	0x0800835d
 80082e8:	08008391 	.word	0x08008391
 80082ec:	080083c5 	.word	0x080083c5
 80082f0:	080083f9 	.word	0x080083f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00b      	beq.n	8008318 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	7c12      	ldrb	r2, [r2, #16]
 800830c:	f107 0108 	add.w	r1, r7, #8
 8008310:	4610      	mov	r0, r2
 8008312:	4798      	blx	r3
 8008314:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008316:	e091      	b.n	800843c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008318:	6839      	ldr	r1, [r7, #0]
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 facb 	bl	80088b6 <USBD_CtlError>
            err++;
 8008320:	7afb      	ldrb	r3, [r7, #11]
 8008322:	3301      	adds	r3, #1
 8008324:	72fb      	strb	r3, [r7, #11]
          break;
 8008326:	e089      	b.n	800843c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00b      	beq.n	800834c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	7c12      	ldrb	r2, [r2, #16]
 8008340:	f107 0108 	add.w	r1, r7, #8
 8008344:	4610      	mov	r0, r2
 8008346:	4798      	blx	r3
 8008348:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800834a:	e077      	b.n	800843c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800834c:	6839      	ldr	r1, [r7, #0]
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 fab1 	bl	80088b6 <USBD_CtlError>
            err++;
 8008354:	7afb      	ldrb	r3, [r7, #11]
 8008356:	3301      	adds	r3, #1
 8008358:	72fb      	strb	r3, [r7, #11]
          break;
 800835a:	e06f      	b.n	800843c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00b      	beq.n	8008380 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	7c12      	ldrb	r2, [r2, #16]
 8008374:	f107 0108 	add.w	r1, r7, #8
 8008378:	4610      	mov	r0, r2
 800837a:	4798      	blx	r3
 800837c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800837e:	e05d      	b.n	800843c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008380:	6839      	ldr	r1, [r7, #0]
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 fa97 	bl	80088b6 <USBD_CtlError>
            err++;
 8008388:	7afb      	ldrb	r3, [r7, #11]
 800838a:	3301      	adds	r3, #1
 800838c:	72fb      	strb	r3, [r7, #11]
          break;
 800838e:	e055      	b.n	800843c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d00b      	beq.n	80083b4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083a2:	691b      	ldr	r3, [r3, #16]
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	7c12      	ldrb	r2, [r2, #16]
 80083a8:	f107 0108 	add.w	r1, r7, #8
 80083ac:	4610      	mov	r0, r2
 80083ae:	4798      	blx	r3
 80083b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083b2:	e043      	b.n	800843c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083b4:	6839      	ldr	r1, [r7, #0]
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 fa7d 	bl	80088b6 <USBD_CtlError>
            err++;
 80083bc:	7afb      	ldrb	r3, [r7, #11]
 80083be:	3301      	adds	r3, #1
 80083c0:	72fb      	strb	r3, [r7, #11]
          break;
 80083c2:	e03b      	b.n	800843c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083ca:	695b      	ldr	r3, [r3, #20]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00b      	beq.n	80083e8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083d6:	695b      	ldr	r3, [r3, #20]
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	7c12      	ldrb	r2, [r2, #16]
 80083dc:	f107 0108 	add.w	r1, r7, #8
 80083e0:	4610      	mov	r0, r2
 80083e2:	4798      	blx	r3
 80083e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083e6:	e029      	b.n	800843c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083e8:	6839      	ldr	r1, [r7, #0]
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 fa63 	bl	80088b6 <USBD_CtlError>
            err++;
 80083f0:	7afb      	ldrb	r3, [r7, #11]
 80083f2:	3301      	adds	r3, #1
 80083f4:	72fb      	strb	r3, [r7, #11]
          break;
 80083f6:	e021      	b.n	800843c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083fe:	699b      	ldr	r3, [r3, #24]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d00b      	beq.n	800841c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800840a:	699b      	ldr	r3, [r3, #24]
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	7c12      	ldrb	r2, [r2, #16]
 8008410:	f107 0108 	add.w	r1, r7, #8
 8008414:	4610      	mov	r0, r2
 8008416:	4798      	blx	r3
 8008418:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800841a:	e00f      	b.n	800843c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800841c:	6839      	ldr	r1, [r7, #0]
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 fa49 	bl	80088b6 <USBD_CtlError>
            err++;
 8008424:	7afb      	ldrb	r3, [r7, #11]
 8008426:	3301      	adds	r3, #1
 8008428:	72fb      	strb	r3, [r7, #11]
          break;
 800842a:	e007      	b.n	800843c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800842c:	6839      	ldr	r1, [r7, #0]
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 fa41 	bl	80088b6 <USBD_CtlError>
          err++;
 8008434:	7afb      	ldrb	r3, [r7, #11]
 8008436:	3301      	adds	r3, #1
 8008438:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800843a:	bf00      	nop
      }
      break;
 800843c:	e037      	b.n	80084ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	7c1b      	ldrb	r3, [r3, #16]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d109      	bne.n	800845a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800844c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800844e:	f107 0208 	add.w	r2, r7, #8
 8008452:	4610      	mov	r0, r2
 8008454:	4798      	blx	r3
 8008456:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008458:	e029      	b.n	80084ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800845a:	6839      	ldr	r1, [r7, #0]
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 fa2a 	bl	80088b6 <USBD_CtlError>
        err++;
 8008462:	7afb      	ldrb	r3, [r7, #11]
 8008464:	3301      	adds	r3, #1
 8008466:	72fb      	strb	r3, [r7, #11]
      break;
 8008468:	e021      	b.n	80084ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	7c1b      	ldrb	r3, [r3, #16]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d10d      	bne.n	800848e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800847a:	f107 0208 	add.w	r2, r7, #8
 800847e:	4610      	mov	r0, r2
 8008480:	4798      	blx	r3
 8008482:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	3301      	adds	r3, #1
 8008488:	2207      	movs	r2, #7
 800848a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800848c:	e00f      	b.n	80084ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800848e:	6839      	ldr	r1, [r7, #0]
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 fa10 	bl	80088b6 <USBD_CtlError>
        err++;
 8008496:	7afb      	ldrb	r3, [r7, #11]
 8008498:	3301      	adds	r3, #1
 800849a:	72fb      	strb	r3, [r7, #11]
      break;
 800849c:	e007      	b.n	80084ae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800849e:	6839      	ldr	r1, [r7, #0]
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f000 fa08 	bl	80088b6 <USBD_CtlError>
      err++;
 80084a6:	7afb      	ldrb	r3, [r7, #11]
 80084a8:	3301      	adds	r3, #1
 80084aa:	72fb      	strb	r3, [r7, #11]
      break;
 80084ac:	bf00      	nop
  }

  if (err != 0U)
 80084ae:	7afb      	ldrb	r3, [r7, #11]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d11e      	bne.n	80084f2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	88db      	ldrh	r3, [r3, #6]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d016      	beq.n	80084ea <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80084bc:	893b      	ldrh	r3, [r7, #8]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00e      	beq.n	80084e0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	88da      	ldrh	r2, [r3, #6]
 80084c6:	893b      	ldrh	r3, [r7, #8]
 80084c8:	4293      	cmp	r3, r2
 80084ca:	bf28      	it	cs
 80084cc:	4613      	movcs	r3, r2
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80084d2:	893b      	ldrh	r3, [r7, #8]
 80084d4:	461a      	mov	r2, r3
 80084d6:	68f9      	ldr	r1, [r7, #12]
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 fa69 	bl	80089b0 <USBD_CtlSendData>
 80084de:	e009      	b.n	80084f4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80084e0:	6839      	ldr	r1, [r7, #0]
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 f9e7 	bl	80088b6 <USBD_CtlError>
 80084e8:	e004      	b.n	80084f4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 faba 	bl	8008a64 <USBD_CtlSendStatus>
 80084f0:	e000      	b.n	80084f4 <USBD_GetDescriptor+0x2cc>
    return;
 80084f2:	bf00      	nop
  }
}
 80084f4:	3710      	adds	r7, #16
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop

080084fc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	889b      	ldrh	r3, [r3, #4]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d131      	bne.n	8008572 <USBD_SetAddress+0x76>
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	88db      	ldrh	r3, [r3, #6]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d12d      	bne.n	8008572 <USBD_SetAddress+0x76>
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	885b      	ldrh	r3, [r3, #2]
 800851a:	2b7f      	cmp	r3, #127	@ 0x7f
 800851c:	d829      	bhi.n	8008572 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	885b      	ldrh	r3, [r3, #2]
 8008522:	b2db      	uxtb	r3, r3
 8008524:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008528:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008530:	b2db      	uxtb	r3, r3
 8008532:	2b03      	cmp	r3, #3
 8008534:	d104      	bne.n	8008540 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008536:	6839      	ldr	r1, [r7, #0]
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 f9bc 	bl	80088b6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800853e:	e01d      	b.n	800857c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	7bfa      	ldrb	r2, [r7, #15]
 8008544:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008548:	7bfb      	ldrb	r3, [r7, #15]
 800854a:	4619      	mov	r1, r3
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 feeb 	bl	8009328 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 fa86 	bl	8008a64 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008558:	7bfb      	ldrb	r3, [r7, #15]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d004      	beq.n	8008568 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2202      	movs	r2, #2
 8008562:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008566:	e009      	b.n	800857c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008570:	e004      	b.n	800857c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008572:	6839      	ldr	r1, [r7, #0]
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 f99e 	bl	80088b6 <USBD_CtlError>
  }
}
 800857a:	bf00      	nop
 800857c:	bf00      	nop
 800857e:	3710      	adds	r7, #16
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800858e:	2300      	movs	r3, #0
 8008590:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	885b      	ldrh	r3, [r3, #2]
 8008596:	b2da      	uxtb	r2, r3
 8008598:	4b4e      	ldr	r3, [pc, #312]	@ (80086d4 <USBD_SetConfig+0x150>)
 800859a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800859c:	4b4d      	ldr	r3, [pc, #308]	@ (80086d4 <USBD_SetConfig+0x150>)
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d905      	bls.n	80085b0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80085a4:	6839      	ldr	r1, [r7, #0]
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 f985 	bl	80088b6 <USBD_CtlError>
    return USBD_FAIL;
 80085ac:	2303      	movs	r3, #3
 80085ae:	e08c      	b.n	80086ca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	d002      	beq.n	80085c2 <USBD_SetConfig+0x3e>
 80085bc:	2b03      	cmp	r3, #3
 80085be:	d029      	beq.n	8008614 <USBD_SetConfig+0x90>
 80085c0:	e075      	b.n	80086ae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80085c2:	4b44      	ldr	r3, [pc, #272]	@ (80086d4 <USBD_SetConfig+0x150>)
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d020      	beq.n	800860c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80085ca:	4b42      	ldr	r3, [pc, #264]	@ (80086d4 <USBD_SetConfig+0x150>)
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	461a      	mov	r2, r3
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80085d4:	4b3f      	ldr	r3, [pc, #252]	@ (80086d4 <USBD_SetConfig+0x150>)
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	4619      	mov	r1, r3
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f7fe ffe3 	bl	80075a6 <USBD_SetClassConfig>
 80085e0:	4603      	mov	r3, r0
 80085e2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80085e4:	7bfb      	ldrb	r3, [r7, #15]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d008      	beq.n	80085fc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80085ea:	6839      	ldr	r1, [r7, #0]
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 f962 	bl	80088b6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2202      	movs	r2, #2
 80085f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80085fa:	e065      	b.n	80086c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 fa31 	bl	8008a64 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2203      	movs	r2, #3
 8008606:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800860a:	e05d      	b.n	80086c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 fa29 	bl	8008a64 <USBD_CtlSendStatus>
      break;
 8008612:	e059      	b.n	80086c8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008614:	4b2f      	ldr	r3, [pc, #188]	@ (80086d4 <USBD_SetConfig+0x150>)
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d112      	bne.n	8008642 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2202      	movs	r2, #2
 8008620:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008624:	4b2b      	ldr	r3, [pc, #172]	@ (80086d4 <USBD_SetConfig+0x150>)
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	461a      	mov	r2, r3
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800862e:	4b29      	ldr	r3, [pc, #164]	@ (80086d4 <USBD_SetConfig+0x150>)
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	4619      	mov	r1, r3
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f7fe ffd2 	bl	80075de <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 fa12 	bl	8008a64 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008640:	e042      	b.n	80086c8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008642:	4b24      	ldr	r3, [pc, #144]	@ (80086d4 <USBD_SetConfig+0x150>)
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	461a      	mov	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	429a      	cmp	r2, r3
 800864e:	d02a      	beq.n	80086a6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	b2db      	uxtb	r3, r3
 8008656:	4619      	mov	r1, r3
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f7fe ffc0 	bl	80075de <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800865e:	4b1d      	ldr	r3, [pc, #116]	@ (80086d4 <USBD_SetConfig+0x150>)
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	461a      	mov	r2, r3
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008668:	4b1a      	ldr	r3, [pc, #104]	@ (80086d4 <USBD_SetConfig+0x150>)
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	4619      	mov	r1, r3
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f7fe ff99 	bl	80075a6 <USBD_SetClassConfig>
 8008674:	4603      	mov	r3, r0
 8008676:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008678:	7bfb      	ldrb	r3, [r7, #15]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00f      	beq.n	800869e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800867e:	6839      	ldr	r1, [r7, #0]
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 f918 	bl	80088b6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	b2db      	uxtb	r3, r3
 800868c:	4619      	mov	r1, r3
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f7fe ffa5 	bl	80075de <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2202      	movs	r2, #2
 8008698:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800869c:	e014      	b.n	80086c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 f9e0 	bl	8008a64 <USBD_CtlSendStatus>
      break;
 80086a4:	e010      	b.n	80086c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 f9dc 	bl	8008a64 <USBD_CtlSendStatus>
      break;
 80086ac:	e00c      	b.n	80086c8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80086ae:	6839      	ldr	r1, [r7, #0]
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 f900 	bl	80088b6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80086b6:	4b07      	ldr	r3, [pc, #28]	@ (80086d4 <USBD_SetConfig+0x150>)
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	4619      	mov	r1, r3
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f7fe ff8e 	bl	80075de <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80086c2:	2303      	movs	r3, #3
 80086c4:	73fb      	strb	r3, [r7, #15]
      break;
 80086c6:	bf00      	nop
  }

  return ret;
 80086c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	200061ec 	.word	0x200061ec

080086d8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b082      	sub	sp, #8
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	88db      	ldrh	r3, [r3, #6]
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	d004      	beq.n	80086f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80086ea:	6839      	ldr	r1, [r7, #0]
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 f8e2 	bl	80088b6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80086f2:	e023      	b.n	800873c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	2b02      	cmp	r3, #2
 80086fe:	dc02      	bgt.n	8008706 <USBD_GetConfig+0x2e>
 8008700:	2b00      	cmp	r3, #0
 8008702:	dc03      	bgt.n	800870c <USBD_GetConfig+0x34>
 8008704:	e015      	b.n	8008732 <USBD_GetConfig+0x5a>
 8008706:	2b03      	cmp	r3, #3
 8008708:	d00b      	beq.n	8008722 <USBD_GetConfig+0x4a>
 800870a:	e012      	b.n	8008732 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	3308      	adds	r3, #8
 8008716:	2201      	movs	r2, #1
 8008718:	4619      	mov	r1, r3
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 f948 	bl	80089b0 <USBD_CtlSendData>
        break;
 8008720:	e00c      	b.n	800873c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	3304      	adds	r3, #4
 8008726:	2201      	movs	r2, #1
 8008728:	4619      	mov	r1, r3
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 f940 	bl	80089b0 <USBD_CtlSendData>
        break;
 8008730:	e004      	b.n	800873c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008732:	6839      	ldr	r1, [r7, #0]
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 f8be 	bl	80088b6 <USBD_CtlError>
        break;
 800873a:	bf00      	nop
}
 800873c:	bf00      	nop
 800873e:	3708      	adds	r7, #8
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008754:	b2db      	uxtb	r3, r3
 8008756:	3b01      	subs	r3, #1
 8008758:	2b02      	cmp	r3, #2
 800875a:	d81e      	bhi.n	800879a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	88db      	ldrh	r3, [r3, #6]
 8008760:	2b02      	cmp	r3, #2
 8008762:	d004      	beq.n	800876e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008764:	6839      	ldr	r1, [r7, #0]
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 f8a5 	bl	80088b6 <USBD_CtlError>
        break;
 800876c:	e01a      	b.n	80087a4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2201      	movs	r2, #1
 8008772:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800877a:	2b00      	cmp	r3, #0
 800877c:	d005      	beq.n	800878a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	f043 0202 	orr.w	r2, r3, #2
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	330c      	adds	r3, #12
 800878e:	2202      	movs	r2, #2
 8008790:	4619      	mov	r1, r3
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 f90c 	bl	80089b0 <USBD_CtlSendData>
      break;
 8008798:	e004      	b.n	80087a4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800879a:	6839      	ldr	r1, [r7, #0]
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 f88a 	bl	80088b6 <USBD_CtlError>
      break;
 80087a2:	bf00      	nop
  }
}
 80087a4:	bf00      	nop
 80087a6:	3708      	adds	r7, #8
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	885b      	ldrh	r3, [r3, #2]
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d107      	bne.n	80087ce <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2201      	movs	r2, #1
 80087c2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 f94c 	bl	8008a64 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80087cc:	e013      	b.n	80087f6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	885b      	ldrh	r3, [r3, #2]
 80087d2:	2b02      	cmp	r3, #2
 80087d4:	d10b      	bne.n	80087ee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	889b      	ldrh	r3, [r3, #4]
 80087da:	0a1b      	lsrs	r3, r3, #8
 80087dc:	b29b      	uxth	r3, r3
 80087de:	b2da      	uxtb	r2, r3
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 f93c 	bl	8008a64 <USBD_CtlSendStatus>
}
 80087ec:	e003      	b.n	80087f6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80087ee:	6839      	ldr	r1, [r7, #0]
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 f860 	bl	80088b6 <USBD_CtlError>
}
 80087f6:	bf00      	nop
 80087f8:	3708      	adds	r7, #8
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087fe:	b580      	push	{r7, lr}
 8008800:	b082      	sub	sp, #8
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
 8008806:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800880e:	b2db      	uxtb	r3, r3
 8008810:	3b01      	subs	r3, #1
 8008812:	2b02      	cmp	r3, #2
 8008814:	d80b      	bhi.n	800882e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	885b      	ldrh	r3, [r3, #2]
 800881a:	2b01      	cmp	r3, #1
 800881c:	d10c      	bne.n	8008838 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 f91c 	bl	8008a64 <USBD_CtlSendStatus>
      }
      break;
 800882c:	e004      	b.n	8008838 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800882e:	6839      	ldr	r1, [r7, #0]
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 f840 	bl	80088b6 <USBD_CtlError>
      break;
 8008836:	e000      	b.n	800883a <USBD_ClrFeature+0x3c>
      break;
 8008838:	bf00      	nop
  }
}
 800883a:	bf00      	nop
 800883c:	3708      	adds	r7, #8
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}

08008842 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008842:	b580      	push	{r7, lr}
 8008844:	b084      	sub	sp, #16
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
 800884a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	781a      	ldrb	r2, [r3, #0]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	3301      	adds	r3, #1
 800885c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	781a      	ldrb	r2, [r3, #0]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	3301      	adds	r3, #1
 800886a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800886c:	68f8      	ldr	r0, [r7, #12]
 800886e:	f7ff fa40 	bl	8007cf2 <SWAPBYTE>
 8008872:	4603      	mov	r3, r0
 8008874:	461a      	mov	r2, r3
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	3301      	adds	r3, #1
 800887e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	3301      	adds	r3, #1
 8008884:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008886:	68f8      	ldr	r0, [r7, #12]
 8008888:	f7ff fa33 	bl	8007cf2 <SWAPBYTE>
 800888c:	4603      	mov	r3, r0
 800888e:	461a      	mov	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	3301      	adds	r3, #1
 8008898:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	3301      	adds	r3, #1
 800889e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80088a0:	68f8      	ldr	r0, [r7, #12]
 80088a2:	f7ff fa26 	bl	8007cf2 <SWAPBYTE>
 80088a6:	4603      	mov	r3, r0
 80088a8:	461a      	mov	r2, r3
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	80da      	strh	r2, [r3, #6]
}
 80088ae:	bf00      	nop
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b082      	sub	sp, #8
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
 80088be:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80088c0:	2180      	movs	r1, #128	@ 0x80
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 fcc6 	bl	8009254 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80088c8:	2100      	movs	r1, #0
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 fcc2 	bl	8009254 <USBD_LL_StallEP>
}
 80088d0:	bf00      	nop
 80088d2:	3708      	adds	r7, #8
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b086      	sub	sp, #24
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80088e4:	2300      	movs	r3, #0
 80088e6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d042      	beq.n	8008974 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80088f2:	6938      	ldr	r0, [r7, #16]
 80088f4:	f000 f842 	bl	800897c <USBD_GetLen>
 80088f8:	4603      	mov	r3, r0
 80088fa:	3301      	adds	r3, #1
 80088fc:	005b      	lsls	r3, r3, #1
 80088fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008902:	d808      	bhi.n	8008916 <USBD_GetString+0x3e>
 8008904:	6938      	ldr	r0, [r7, #16]
 8008906:	f000 f839 	bl	800897c <USBD_GetLen>
 800890a:	4603      	mov	r3, r0
 800890c:	3301      	adds	r3, #1
 800890e:	b29b      	uxth	r3, r3
 8008910:	005b      	lsls	r3, r3, #1
 8008912:	b29a      	uxth	r2, r3
 8008914:	e001      	b.n	800891a <USBD_GetString+0x42>
 8008916:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800891e:	7dfb      	ldrb	r3, [r7, #23]
 8008920:	68ba      	ldr	r2, [r7, #8]
 8008922:	4413      	add	r3, r2
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	7812      	ldrb	r2, [r2, #0]
 8008928:	701a      	strb	r2, [r3, #0]
  idx++;
 800892a:	7dfb      	ldrb	r3, [r7, #23]
 800892c:	3301      	adds	r3, #1
 800892e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008930:	7dfb      	ldrb	r3, [r7, #23]
 8008932:	68ba      	ldr	r2, [r7, #8]
 8008934:	4413      	add	r3, r2
 8008936:	2203      	movs	r2, #3
 8008938:	701a      	strb	r2, [r3, #0]
  idx++;
 800893a:	7dfb      	ldrb	r3, [r7, #23]
 800893c:	3301      	adds	r3, #1
 800893e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008940:	e013      	b.n	800896a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008942:	7dfb      	ldrb	r3, [r7, #23]
 8008944:	68ba      	ldr	r2, [r7, #8]
 8008946:	4413      	add	r3, r2
 8008948:	693a      	ldr	r2, [r7, #16]
 800894a:	7812      	ldrb	r2, [r2, #0]
 800894c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	3301      	adds	r3, #1
 8008952:	613b      	str	r3, [r7, #16]
    idx++;
 8008954:	7dfb      	ldrb	r3, [r7, #23]
 8008956:	3301      	adds	r3, #1
 8008958:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800895a:	7dfb      	ldrb	r3, [r7, #23]
 800895c:	68ba      	ldr	r2, [r7, #8]
 800895e:	4413      	add	r3, r2
 8008960:	2200      	movs	r2, #0
 8008962:	701a      	strb	r2, [r3, #0]
    idx++;
 8008964:	7dfb      	ldrb	r3, [r7, #23]
 8008966:	3301      	adds	r3, #1
 8008968:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d1e7      	bne.n	8008942 <USBD_GetString+0x6a>
 8008972:	e000      	b.n	8008976 <USBD_GetString+0x9e>
    return;
 8008974:	bf00      	nop
  }
}
 8008976:	3718      	adds	r7, #24
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800897c:	b480      	push	{r7}
 800897e:	b085      	sub	sp, #20
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008984:	2300      	movs	r3, #0
 8008986:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800898c:	e005      	b.n	800899a <USBD_GetLen+0x1e>
  {
    len++;
 800898e:	7bfb      	ldrb	r3, [r7, #15]
 8008990:	3301      	adds	r3, #1
 8008992:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	3301      	adds	r3, #1
 8008998:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d1f5      	bne.n	800898e <USBD_GetLen+0x12>
  }

  return len;
 80089a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3714      	adds	r7, #20
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr

080089b0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2202      	movs	r2, #2
 80089c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	68ba      	ldr	r2, [r7, #8]
 80089d4:	2100      	movs	r1, #0
 80089d6:	68f8      	ldr	r0, [r7, #12]
 80089d8:	f000 fcc5 	bl	8009366 <USBD_LL_Transmit>

  return USBD_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3710      	adds	r7, #16
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b084      	sub	sp, #16
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	60f8      	str	r0, [r7, #12]
 80089ee:	60b9      	str	r1, [r7, #8]
 80089f0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	68ba      	ldr	r2, [r7, #8]
 80089f6:	2100      	movs	r1, #0
 80089f8:	68f8      	ldr	r0, [r7, #12]
 80089fa:	f000 fcb4 	bl	8009366 <USBD_LL_Transmit>

  return USBD_OK;
 80089fe:	2300      	movs	r3, #0
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3710      	adds	r7, #16
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	60b9      	str	r1, [r7, #8]
 8008a12:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2203      	movs	r2, #3
 8008a18:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	68ba      	ldr	r2, [r7, #8]
 8008a30:	2100      	movs	r1, #0
 8008a32:	68f8      	ldr	r0, [r7, #12]
 8008a34:	f000 fcb8 	bl	80093a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3710      	adds	r7, #16
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b084      	sub	sp, #16
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	60f8      	str	r0, [r7, #12]
 8008a4a:	60b9      	str	r1, [r7, #8]
 8008a4c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	68ba      	ldr	r2, [r7, #8]
 8008a52:	2100      	movs	r1, #0
 8008a54:	68f8      	ldr	r0, [r7, #12]
 8008a56:	f000 fca7 	bl	80093a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3710      	adds	r7, #16
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2204      	movs	r2, #4
 8008a70:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a74:	2300      	movs	r3, #0
 8008a76:	2200      	movs	r2, #0
 8008a78:	2100      	movs	r1, #0
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 fc73 	bl	8009366 <USBD_LL_Transmit>

  return USBD_OK;
 8008a80:	2300      	movs	r3, #0
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3708      	adds	r7, #8
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}

08008a8a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008a8a:	b580      	push	{r7, lr}
 8008a8c:	b082      	sub	sp, #8
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2205      	movs	r2, #5
 8008a96:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	2100      	movs	r1, #0
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 fc81 	bl	80093a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008aa6:	2300      	movs	r3, #0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3708      	adds	r7, #8
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	4912      	ldr	r1, [pc, #72]	@ (8008b00 <MX_USB_DEVICE_Init+0x50>)
 8008ab8:	4812      	ldr	r0, [pc, #72]	@ (8008b04 <MX_USB_DEVICE_Init+0x54>)
 8008aba:	f7fe fcf7 	bl	80074ac <USBD_Init>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d001      	beq.n	8008ac8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008ac4:	f7f8 f9a2 	bl	8000e0c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008ac8:	490f      	ldr	r1, [pc, #60]	@ (8008b08 <MX_USB_DEVICE_Init+0x58>)
 8008aca:	480e      	ldr	r0, [pc, #56]	@ (8008b04 <MX_USB_DEVICE_Init+0x54>)
 8008acc:	f7fe fd1e 	bl	800750c <USBD_RegisterClass>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d001      	beq.n	8008ada <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008ad6:	f7f8 f999 	bl	8000e0c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008ada:	490c      	ldr	r1, [pc, #48]	@ (8008b0c <MX_USB_DEVICE_Init+0x5c>)
 8008adc:	4809      	ldr	r0, [pc, #36]	@ (8008b04 <MX_USB_DEVICE_Init+0x54>)
 8008ade:	f7fe fc55 	bl	800738c <USBD_CDC_RegisterInterface>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d001      	beq.n	8008aec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008ae8:	f7f8 f990 	bl	8000e0c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008aec:	4805      	ldr	r0, [pc, #20]	@ (8008b04 <MX_USB_DEVICE_Init+0x54>)
 8008aee:	f7fe fd43 	bl	8007578 <USBD_Start>
 8008af2:	4603      	mov	r3, r0
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d001      	beq.n	8008afc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008af8:	f7f8 f988 	bl	8000e0c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008afc:	bf00      	nop
 8008afe:	bd80      	pop	{r7, pc}
 8008b00:	200000b0 	.word	0x200000b0
 8008b04:	200061f0 	.word	0x200061f0
 8008b08:	2000001c 	.word	0x2000001c
 8008b0c:	2000009c 	.word	0x2000009c

08008b10 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008b14:	2200      	movs	r2, #0
 8008b16:	4905      	ldr	r1, [pc, #20]	@ (8008b2c <CDC_Init_FS+0x1c>)
 8008b18:	4805      	ldr	r0, [pc, #20]	@ (8008b30 <CDC_Init_FS+0x20>)
 8008b1a:	f7fe fc51 	bl	80073c0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008b1e:	4905      	ldr	r1, [pc, #20]	@ (8008b34 <CDC_Init_FS+0x24>)
 8008b20:	4803      	ldr	r0, [pc, #12]	@ (8008b30 <CDC_Init_FS+0x20>)
 8008b22:	f7fe fc6f 	bl	8007404 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008b26:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	20006ccc 	.word	0x20006ccc
 8008b30:	200061f0 	.word	0x200061f0
 8008b34:	200064cc 	.word	0x200064cc

08008b38 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008b3c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	4603      	mov	r3, r0
 8008b50:	6039      	str	r1, [r7, #0]
 8008b52:	71fb      	strb	r3, [r7, #7]
 8008b54:	4613      	mov	r3, r2
 8008b56:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008b58:	79fb      	ldrb	r3, [r7, #7]
 8008b5a:	2b23      	cmp	r3, #35	@ 0x23
 8008b5c:	d84a      	bhi.n	8008bf4 <CDC_Control_FS+0xac>
 8008b5e:	a201      	add	r2, pc, #4	@ (adr r2, 8008b64 <CDC_Control_FS+0x1c>)
 8008b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b64:	08008bf5 	.word	0x08008bf5
 8008b68:	08008bf5 	.word	0x08008bf5
 8008b6c:	08008bf5 	.word	0x08008bf5
 8008b70:	08008bf5 	.word	0x08008bf5
 8008b74:	08008bf5 	.word	0x08008bf5
 8008b78:	08008bf5 	.word	0x08008bf5
 8008b7c:	08008bf5 	.word	0x08008bf5
 8008b80:	08008bf5 	.word	0x08008bf5
 8008b84:	08008bf5 	.word	0x08008bf5
 8008b88:	08008bf5 	.word	0x08008bf5
 8008b8c:	08008bf5 	.word	0x08008bf5
 8008b90:	08008bf5 	.word	0x08008bf5
 8008b94:	08008bf5 	.word	0x08008bf5
 8008b98:	08008bf5 	.word	0x08008bf5
 8008b9c:	08008bf5 	.word	0x08008bf5
 8008ba0:	08008bf5 	.word	0x08008bf5
 8008ba4:	08008bf5 	.word	0x08008bf5
 8008ba8:	08008bf5 	.word	0x08008bf5
 8008bac:	08008bf5 	.word	0x08008bf5
 8008bb0:	08008bf5 	.word	0x08008bf5
 8008bb4:	08008bf5 	.word	0x08008bf5
 8008bb8:	08008bf5 	.word	0x08008bf5
 8008bbc:	08008bf5 	.word	0x08008bf5
 8008bc0:	08008bf5 	.word	0x08008bf5
 8008bc4:	08008bf5 	.word	0x08008bf5
 8008bc8:	08008bf5 	.word	0x08008bf5
 8008bcc:	08008bf5 	.word	0x08008bf5
 8008bd0:	08008bf5 	.word	0x08008bf5
 8008bd4:	08008bf5 	.word	0x08008bf5
 8008bd8:	08008bf5 	.word	0x08008bf5
 8008bdc:	08008bf5 	.word	0x08008bf5
 8008be0:	08008bf5 	.word	0x08008bf5
 8008be4:	08008bf5 	.word	0x08008bf5
 8008be8:	08008bf5 	.word	0x08008bf5
 8008bec:	08008bf5 	.word	0x08008bf5
 8008bf0:	08008bf5 	.word	0x08008bf5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008bf4:	bf00      	nop
  }

  return (USBD_OK);
 8008bf6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	370c      	adds	r7, #12
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr

08008c04 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008c0e:	6879      	ldr	r1, [r7, #4]
 8008c10:	4805      	ldr	r0, [pc, #20]	@ (8008c28 <CDC_Receive_FS+0x24>)
 8008c12:	f7fe fbf7 	bl	8007404 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008c16:	4804      	ldr	r0, [pc, #16]	@ (8008c28 <CDC_Receive_FS+0x24>)
 8008c18:	f7fe fc12 	bl	8007440 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008c1c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3708      	adds	r7, #8
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	200061f0 	.word	0x200061f0

08008c2c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b087      	sub	sp, #28
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	60f8      	str	r0, [r7, #12]
 8008c34:	60b9      	str	r1, [r7, #8]
 8008c36:	4613      	mov	r3, r2
 8008c38:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008c3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	371c      	adds	r7, #28
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr
	...

08008c50 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b083      	sub	sp, #12
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	4603      	mov	r3, r0
 8008c58:	6039      	str	r1, [r7, #0]
 8008c5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	2212      	movs	r2, #18
 8008c60:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008c62:	4b03      	ldr	r3, [pc, #12]	@ (8008c70 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	370c      	adds	r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr
 8008c70:	200000cc 	.word	0x200000cc

08008c74 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	6039      	str	r1, [r7, #0]
 8008c7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	2204      	movs	r2, #4
 8008c84:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008c86:	4b03      	ldr	r3, [pc, #12]	@ (8008c94 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	370c      	adds	r7, #12
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr
 8008c94:	200000e0 	.word	0x200000e0

08008c98 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	6039      	str	r1, [r7, #0]
 8008ca2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ca4:	79fb      	ldrb	r3, [r7, #7]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d105      	bne.n	8008cb6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008caa:	683a      	ldr	r2, [r7, #0]
 8008cac:	4907      	ldr	r1, [pc, #28]	@ (8008ccc <USBD_FS_ProductStrDescriptor+0x34>)
 8008cae:	4808      	ldr	r0, [pc, #32]	@ (8008cd0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008cb0:	f7ff fe12 	bl	80088d8 <USBD_GetString>
 8008cb4:	e004      	b.n	8008cc0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008cb6:	683a      	ldr	r2, [r7, #0]
 8008cb8:	4904      	ldr	r1, [pc, #16]	@ (8008ccc <USBD_FS_ProductStrDescriptor+0x34>)
 8008cba:	4805      	ldr	r0, [pc, #20]	@ (8008cd0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008cbc:	f7ff fe0c 	bl	80088d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008cc0:	4b02      	ldr	r3, [pc, #8]	@ (8008ccc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3708      	adds	r7, #8
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
 8008cca:	bf00      	nop
 8008ccc:	200074cc 	.word	0x200074cc
 8008cd0:	0800a014 	.word	0x0800a014

08008cd4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b082      	sub	sp, #8
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	4603      	mov	r3, r0
 8008cdc:	6039      	str	r1, [r7, #0]
 8008cde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008ce0:	683a      	ldr	r2, [r7, #0]
 8008ce2:	4904      	ldr	r1, [pc, #16]	@ (8008cf4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008ce4:	4804      	ldr	r0, [pc, #16]	@ (8008cf8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008ce6:	f7ff fdf7 	bl	80088d8 <USBD_GetString>
  return USBD_StrDesc;
 8008cea:	4b02      	ldr	r3, [pc, #8]	@ (8008cf4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3708      	adds	r7, #8
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	200074cc 	.word	0x200074cc
 8008cf8:	0800a02c 	.word	0x0800a02c

08008cfc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	4603      	mov	r3, r0
 8008d04:	6039      	str	r1, [r7, #0]
 8008d06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	221a      	movs	r2, #26
 8008d0c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008d0e:	f000 f843 	bl	8008d98 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008d12:	4b02      	ldr	r3, [pc, #8]	@ (8008d1c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3708      	adds	r7, #8
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}
 8008d1c:	200000e4 	.word	0x200000e4

08008d20 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	4603      	mov	r3, r0
 8008d28:	6039      	str	r1, [r7, #0]
 8008d2a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008d2c:	79fb      	ldrb	r3, [r7, #7]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d105      	bne.n	8008d3e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d32:	683a      	ldr	r2, [r7, #0]
 8008d34:	4907      	ldr	r1, [pc, #28]	@ (8008d54 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d36:	4808      	ldr	r0, [pc, #32]	@ (8008d58 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d38:	f7ff fdce 	bl	80088d8 <USBD_GetString>
 8008d3c:	e004      	b.n	8008d48 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d3e:	683a      	ldr	r2, [r7, #0]
 8008d40:	4904      	ldr	r1, [pc, #16]	@ (8008d54 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d42:	4805      	ldr	r0, [pc, #20]	@ (8008d58 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d44:	f7ff fdc8 	bl	80088d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d48:	4b02      	ldr	r3, [pc, #8]	@ (8008d54 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3708      	adds	r7, #8
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	200074cc 	.word	0x200074cc
 8008d58:	0800a040 	.word	0x0800a040

08008d5c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b082      	sub	sp, #8
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	4603      	mov	r3, r0
 8008d64:	6039      	str	r1, [r7, #0]
 8008d66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d68:	79fb      	ldrb	r3, [r7, #7]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d105      	bne.n	8008d7a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d6e:	683a      	ldr	r2, [r7, #0]
 8008d70:	4907      	ldr	r1, [pc, #28]	@ (8008d90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d72:	4808      	ldr	r0, [pc, #32]	@ (8008d94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d74:	f7ff fdb0 	bl	80088d8 <USBD_GetString>
 8008d78:	e004      	b.n	8008d84 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d7a:	683a      	ldr	r2, [r7, #0]
 8008d7c:	4904      	ldr	r1, [pc, #16]	@ (8008d90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d7e:	4805      	ldr	r0, [pc, #20]	@ (8008d94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d80:	f7ff fdaa 	bl	80088d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d84:	4b02      	ldr	r3, [pc, #8]	@ (8008d90 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3708      	adds	r7, #8
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
 8008d8e:	bf00      	nop
 8008d90:	200074cc 	.word	0x200074cc
 8008d94:	0800a04c 	.word	0x0800a04c

08008d98 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8008ddc <Get_SerialNum+0x44>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008da4:	4b0e      	ldr	r3, [pc, #56]	@ (8008de0 <Get_SerialNum+0x48>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008daa:	4b0e      	ldr	r3, [pc, #56]	@ (8008de4 <Get_SerialNum+0x4c>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008db0:	68fa      	ldr	r2, [r7, #12]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	4413      	add	r3, r2
 8008db6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d009      	beq.n	8008dd2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008dbe:	2208      	movs	r2, #8
 8008dc0:	4909      	ldr	r1, [pc, #36]	@ (8008de8 <Get_SerialNum+0x50>)
 8008dc2:	68f8      	ldr	r0, [r7, #12]
 8008dc4:	f000 f814 	bl	8008df0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008dc8:	2204      	movs	r2, #4
 8008dca:	4908      	ldr	r1, [pc, #32]	@ (8008dec <Get_SerialNum+0x54>)
 8008dcc:	68b8      	ldr	r0, [r7, #8]
 8008dce:	f000 f80f 	bl	8008df0 <IntToUnicode>
  }
}
 8008dd2:	bf00      	nop
 8008dd4:	3710      	adds	r7, #16
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	1fff7a10 	.word	0x1fff7a10
 8008de0:	1fff7a14 	.word	0x1fff7a14
 8008de4:	1fff7a18 	.word	0x1fff7a18
 8008de8:	200000e6 	.word	0x200000e6
 8008dec:	200000f6 	.word	0x200000f6

08008df0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b087      	sub	sp, #28
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	4613      	mov	r3, r2
 8008dfc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008e02:	2300      	movs	r3, #0
 8008e04:	75fb      	strb	r3, [r7, #23]
 8008e06:	e027      	b.n	8008e58 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	0f1b      	lsrs	r3, r3, #28
 8008e0c:	2b09      	cmp	r3, #9
 8008e0e:	d80b      	bhi.n	8008e28 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	0f1b      	lsrs	r3, r3, #28
 8008e14:	b2da      	uxtb	r2, r3
 8008e16:	7dfb      	ldrb	r3, [r7, #23]
 8008e18:	005b      	lsls	r3, r3, #1
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	440b      	add	r3, r1
 8008e20:	3230      	adds	r2, #48	@ 0x30
 8008e22:	b2d2      	uxtb	r2, r2
 8008e24:	701a      	strb	r2, [r3, #0]
 8008e26:	e00a      	b.n	8008e3e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	0f1b      	lsrs	r3, r3, #28
 8008e2c:	b2da      	uxtb	r2, r3
 8008e2e:	7dfb      	ldrb	r3, [r7, #23]
 8008e30:	005b      	lsls	r3, r3, #1
 8008e32:	4619      	mov	r1, r3
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	440b      	add	r3, r1
 8008e38:	3237      	adds	r2, #55	@ 0x37
 8008e3a:	b2d2      	uxtb	r2, r2
 8008e3c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	011b      	lsls	r3, r3, #4
 8008e42:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008e44:	7dfb      	ldrb	r3, [r7, #23]
 8008e46:	005b      	lsls	r3, r3, #1
 8008e48:	3301      	adds	r3, #1
 8008e4a:	68ba      	ldr	r2, [r7, #8]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	2200      	movs	r2, #0
 8008e50:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008e52:	7dfb      	ldrb	r3, [r7, #23]
 8008e54:	3301      	adds	r3, #1
 8008e56:	75fb      	strb	r3, [r7, #23]
 8008e58:	7dfa      	ldrb	r2, [r7, #23]
 8008e5a:	79fb      	ldrb	r3, [r7, #7]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d3d3      	bcc.n	8008e08 <IntToUnicode+0x18>
  }
}
 8008e60:	bf00      	nop
 8008e62:	bf00      	nop
 8008e64:	371c      	adds	r7, #28
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr
	...

08008e70 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b08a      	sub	sp, #40	@ 0x28
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e78:	f107 0314 	add.w	r3, r7, #20
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	601a      	str	r2, [r3, #0]
 8008e80:	605a      	str	r2, [r3, #4]
 8008e82:	609a      	str	r2, [r3, #8]
 8008e84:	60da      	str	r2, [r3, #12]
 8008e86:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008e90:	d13a      	bne.n	8008f08 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e92:	2300      	movs	r3, #0
 8008e94:	613b      	str	r3, [r7, #16]
 8008e96:	4b1e      	ldr	r3, [pc, #120]	@ (8008f10 <HAL_PCD_MspInit+0xa0>)
 8008e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e9a:	4a1d      	ldr	r2, [pc, #116]	@ (8008f10 <HAL_PCD_MspInit+0xa0>)
 8008e9c:	f043 0301 	orr.w	r3, r3, #1
 8008ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8008ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8008f10 <HAL_PCD_MspInit+0xa0>)
 8008ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ea6:	f003 0301 	and.w	r3, r3, #1
 8008eaa:	613b      	str	r3, [r7, #16]
 8008eac:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008eae:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008eb4:	2302      	movs	r3, #2
 8008eb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ebc:	2303      	movs	r3, #3
 8008ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008ec0:	230a      	movs	r3, #10
 8008ec2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ec4:	f107 0314 	add.w	r3, r7, #20
 8008ec8:	4619      	mov	r1, r3
 8008eca:	4812      	ldr	r0, [pc, #72]	@ (8008f14 <HAL_PCD_MspInit+0xa4>)
 8008ecc:	f7f8 fffe 	bl	8001ecc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8008f10 <HAL_PCD_MspInit+0xa0>)
 8008ed2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ed4:	4a0e      	ldr	r2, [pc, #56]	@ (8008f10 <HAL_PCD_MspInit+0xa0>)
 8008ed6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008eda:	6353      	str	r3, [r2, #52]	@ 0x34
 8008edc:	2300      	movs	r3, #0
 8008ede:	60fb      	str	r3, [r7, #12]
 8008ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8008f10 <HAL_PCD_MspInit+0xa0>)
 8008ee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ee4:	4a0a      	ldr	r2, [pc, #40]	@ (8008f10 <HAL_PCD_MspInit+0xa0>)
 8008ee6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008eea:	6453      	str	r3, [r2, #68]	@ 0x44
 8008eec:	4b08      	ldr	r3, [pc, #32]	@ (8008f10 <HAL_PCD_MspInit+0xa0>)
 8008eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ef0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ef4:	60fb      	str	r3, [r7, #12]
 8008ef6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008ef8:	2200      	movs	r2, #0
 8008efa:	2100      	movs	r1, #0
 8008efc:	2043      	movs	r0, #67	@ 0x43
 8008efe:	f7f8 fbac 	bl	800165a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008f02:	2043      	movs	r0, #67	@ 0x43
 8008f04:	f7f8 fbc5 	bl	8001692 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008f08:	bf00      	nop
 8008f0a:	3728      	adds	r7, #40	@ 0x28
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	40023800 	.word	0x40023800
 8008f14:	40020000 	.word	0x40020000

08008f18 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	4610      	mov	r0, r2
 8008f30:	f7fe fb6f 	bl	8007612 <USBD_LL_SetupStage>
}
 8008f34:	bf00      	nop
 8008f36:	3708      	adds	r7, #8
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	460b      	mov	r3, r1
 8008f46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008f4e:	78fa      	ldrb	r2, [r7, #3]
 8008f50:	6879      	ldr	r1, [r7, #4]
 8008f52:	4613      	mov	r3, r2
 8008f54:	00db      	lsls	r3, r3, #3
 8008f56:	4413      	add	r3, r2
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	440b      	add	r3, r1
 8008f5c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	78fb      	ldrb	r3, [r7, #3]
 8008f64:	4619      	mov	r1, r3
 8008f66:	f7fe fba9 	bl	80076bc <USBD_LL_DataOutStage>
}
 8008f6a:	bf00      	nop
 8008f6c:	3708      	adds	r7, #8
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f72:	b580      	push	{r7, lr}
 8008f74:	b082      	sub	sp, #8
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
 8008f7a:	460b      	mov	r3, r1
 8008f7c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008f84:	78fa      	ldrb	r2, [r7, #3]
 8008f86:	6879      	ldr	r1, [r7, #4]
 8008f88:	4613      	mov	r3, r2
 8008f8a:	00db      	lsls	r3, r3, #3
 8008f8c:	4413      	add	r3, r2
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	440b      	add	r3, r1
 8008f92:	3320      	adds	r3, #32
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	78fb      	ldrb	r3, [r7, #3]
 8008f98:	4619      	mov	r1, r3
 8008f9a:	f7fe fc42 	bl	8007822 <USBD_LL_DataInStage>
}
 8008f9e:	bf00      	nop
 8008fa0:	3708      	adds	r7, #8
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}

08008fa6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fa6:	b580      	push	{r7, lr}
 8008fa8:	b082      	sub	sp, #8
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7fe fd7c 	bl	8007ab2 <USBD_LL_SOF>
}
 8008fba:	bf00      	nop
 8008fbc:	3708      	adds	r7, #8
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}

08008fc2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b084      	sub	sp, #16
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	79db      	ldrb	r3, [r3, #7]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d102      	bne.n	8008fdc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	73fb      	strb	r3, [r7, #15]
 8008fda:	e008      	b.n	8008fee <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	79db      	ldrb	r3, [r3, #7]
 8008fe0:	2b02      	cmp	r3, #2
 8008fe2:	d102      	bne.n	8008fea <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	73fb      	strb	r3, [r7, #15]
 8008fe8:	e001      	b.n	8008fee <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008fea:	f7f7 ff0f 	bl	8000e0c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008ff4:	7bfa      	ldrb	r2, [r7, #15]
 8008ff6:	4611      	mov	r1, r2
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f7fe fd16 	bl	8007a2a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009004:	4618      	mov	r0, r3
 8009006:	f7fe fcbe 	bl	8007986 <USBD_LL_Reset>
}
 800900a:	bf00      	nop
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
	...

08009014 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b082      	sub	sp, #8
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009022:	4618      	mov	r0, r3
 8009024:	f7fe fd11 	bl	8007a4a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	6812      	ldr	r2, [r2, #0]
 8009036:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800903a:	f043 0301 	orr.w	r3, r3, #1
 800903e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	7adb      	ldrb	r3, [r3, #11]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d005      	beq.n	8009054 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009048:	4b04      	ldr	r3, [pc, #16]	@ (800905c <HAL_PCD_SuspendCallback+0x48>)
 800904a:	691b      	ldr	r3, [r3, #16]
 800904c:	4a03      	ldr	r2, [pc, #12]	@ (800905c <HAL_PCD_SuspendCallback+0x48>)
 800904e:	f043 0306 	orr.w	r3, r3, #6
 8009052:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009054:	bf00      	nop
 8009056:	3708      	adds	r7, #8
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}
 800905c:	e000ed00 	.word	0xe000ed00

08009060 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800906e:	4618      	mov	r0, r3
 8009070:	f7fe fd07 	bl	8007a82 <USBD_LL_Resume>
}
 8009074:	bf00      	nop
 8009076:	3708      	adds	r7, #8
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	460b      	mov	r3, r1
 8009086:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800908e:	78fa      	ldrb	r2, [r7, #3]
 8009090:	4611      	mov	r1, r2
 8009092:	4618      	mov	r0, r3
 8009094:	f7fe fd5f 	bl	8007b56 <USBD_LL_IsoOUTIncomplete>
}
 8009098:	bf00      	nop
 800909a:	3708      	adds	r7, #8
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b082      	sub	sp, #8
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	460b      	mov	r3, r1
 80090aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80090b2:	78fa      	ldrb	r2, [r7, #3]
 80090b4:	4611      	mov	r1, r2
 80090b6:	4618      	mov	r0, r3
 80090b8:	f7fe fd1b 	bl	8007af2 <USBD_LL_IsoINIncomplete>
}
 80090bc:	bf00      	nop
 80090be:	3708      	adds	r7, #8
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7fe fd71 	bl	8007bba <USBD_LL_DevConnected>
}
 80090d8:	bf00      	nop
 80090da:	3708      	adds	r7, #8
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7fe fd6e 	bl	8007bd0 <USBD_LL_DevDisconnected>
}
 80090f4:	bf00      	nop
 80090f6:	3708      	adds	r7, #8
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b082      	sub	sp, #8
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d13c      	bne.n	8009186 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800910c:	4a20      	ldr	r2, [pc, #128]	@ (8009190 <USBD_LL_Init+0x94>)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	4a1e      	ldr	r2, [pc, #120]	@ (8009190 <USBD_LL_Init+0x94>)
 8009118:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800911c:	4b1c      	ldr	r3, [pc, #112]	@ (8009190 <USBD_LL_Init+0x94>)
 800911e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009122:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009124:	4b1a      	ldr	r3, [pc, #104]	@ (8009190 <USBD_LL_Init+0x94>)
 8009126:	2204      	movs	r2, #4
 8009128:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800912a:	4b19      	ldr	r3, [pc, #100]	@ (8009190 <USBD_LL_Init+0x94>)
 800912c:	2202      	movs	r2, #2
 800912e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009130:	4b17      	ldr	r3, [pc, #92]	@ (8009190 <USBD_LL_Init+0x94>)
 8009132:	2200      	movs	r2, #0
 8009134:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009136:	4b16      	ldr	r3, [pc, #88]	@ (8009190 <USBD_LL_Init+0x94>)
 8009138:	2202      	movs	r2, #2
 800913a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800913c:	4b14      	ldr	r3, [pc, #80]	@ (8009190 <USBD_LL_Init+0x94>)
 800913e:	2200      	movs	r2, #0
 8009140:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009142:	4b13      	ldr	r3, [pc, #76]	@ (8009190 <USBD_LL_Init+0x94>)
 8009144:	2200      	movs	r2, #0
 8009146:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009148:	4b11      	ldr	r3, [pc, #68]	@ (8009190 <USBD_LL_Init+0x94>)
 800914a:	2200      	movs	r2, #0
 800914c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800914e:	4b10      	ldr	r3, [pc, #64]	@ (8009190 <USBD_LL_Init+0x94>)
 8009150:	2200      	movs	r2, #0
 8009152:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009154:	4b0e      	ldr	r3, [pc, #56]	@ (8009190 <USBD_LL_Init+0x94>)
 8009156:	2200      	movs	r2, #0
 8009158:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800915a:	480d      	ldr	r0, [pc, #52]	@ (8009190 <USBD_LL_Init+0x94>)
 800915c:	f7f9 f87b 	bl	8002256 <HAL_PCD_Init>
 8009160:	4603      	mov	r3, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	d001      	beq.n	800916a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009166:	f7f7 fe51 	bl	8000e0c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800916a:	2180      	movs	r1, #128	@ 0x80
 800916c:	4808      	ldr	r0, [pc, #32]	@ (8009190 <USBD_LL_Init+0x94>)
 800916e:	f7fa faa8 	bl	80036c2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009172:	2240      	movs	r2, #64	@ 0x40
 8009174:	2100      	movs	r1, #0
 8009176:	4806      	ldr	r0, [pc, #24]	@ (8009190 <USBD_LL_Init+0x94>)
 8009178:	f7fa fa5c 	bl	8003634 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800917c:	2280      	movs	r2, #128	@ 0x80
 800917e:	2101      	movs	r1, #1
 8009180:	4803      	ldr	r0, [pc, #12]	@ (8009190 <USBD_LL_Init+0x94>)
 8009182:	f7fa fa57 	bl	8003634 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009186:	2300      	movs	r3, #0
}
 8009188:	4618      	mov	r0, r3
 800918a:	3708      	adds	r7, #8
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}
 8009190:	200076cc 	.word	0x200076cc

08009194 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800919c:	2300      	movs	r3, #0
 800919e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091a0:	2300      	movs	r3, #0
 80091a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7f9 f962 	bl	8002474 <HAL_PCD_Start>
 80091b0:	4603      	mov	r3, r0
 80091b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091b4:	7bfb      	ldrb	r3, [r7, #15]
 80091b6:	4618      	mov	r0, r3
 80091b8:	f000 f942 	bl	8009440 <USBD_Get_USB_Status>
 80091bc:	4603      	mov	r3, r0
 80091be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3710      	adds	r7, #16
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}

080091ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80091ca:	b580      	push	{r7, lr}
 80091cc:	b084      	sub	sp, #16
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
 80091d2:	4608      	mov	r0, r1
 80091d4:	4611      	mov	r1, r2
 80091d6:	461a      	mov	r2, r3
 80091d8:	4603      	mov	r3, r0
 80091da:	70fb      	strb	r3, [r7, #3]
 80091dc:	460b      	mov	r3, r1
 80091de:	70bb      	strb	r3, [r7, #2]
 80091e0:	4613      	mov	r3, r2
 80091e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091e4:	2300      	movs	r3, #0
 80091e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091e8:	2300      	movs	r3, #0
 80091ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80091f2:	78bb      	ldrb	r3, [r7, #2]
 80091f4:	883a      	ldrh	r2, [r7, #0]
 80091f6:	78f9      	ldrb	r1, [r7, #3]
 80091f8:	f7f9 fe36 	bl	8002e68 <HAL_PCD_EP_Open>
 80091fc:	4603      	mov	r3, r0
 80091fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009200:	7bfb      	ldrb	r3, [r7, #15]
 8009202:	4618      	mov	r0, r3
 8009204:	f000 f91c 	bl	8009440 <USBD_Get_USB_Status>
 8009208:	4603      	mov	r3, r0
 800920a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800920c:	7bbb      	ldrb	r3, [r7, #14]
}
 800920e:	4618      	mov	r0, r3
 8009210:	3710      	adds	r7, #16
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}

08009216 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009216:	b580      	push	{r7, lr}
 8009218:	b084      	sub	sp, #16
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
 800921e:	460b      	mov	r3, r1
 8009220:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009222:	2300      	movs	r3, #0
 8009224:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009226:	2300      	movs	r3, #0
 8009228:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009230:	78fa      	ldrb	r2, [r7, #3]
 8009232:	4611      	mov	r1, r2
 8009234:	4618      	mov	r0, r3
 8009236:	f7f9 fe81 	bl	8002f3c <HAL_PCD_EP_Close>
 800923a:	4603      	mov	r3, r0
 800923c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800923e:	7bfb      	ldrb	r3, [r7, #15]
 8009240:	4618      	mov	r0, r3
 8009242:	f000 f8fd 	bl	8009440 <USBD_Get_USB_Status>
 8009246:	4603      	mov	r3, r0
 8009248:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800924a:	7bbb      	ldrb	r3, [r7, #14]
}
 800924c:	4618      	mov	r0, r3
 800924e:	3710      	adds	r7, #16
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	460b      	mov	r3, r1
 800925e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009260:	2300      	movs	r3, #0
 8009262:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009264:	2300      	movs	r3, #0
 8009266:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800926e:	78fa      	ldrb	r2, [r7, #3]
 8009270:	4611      	mov	r1, r2
 8009272:	4618      	mov	r0, r3
 8009274:	f7f9 ff39 	bl	80030ea <HAL_PCD_EP_SetStall>
 8009278:	4603      	mov	r3, r0
 800927a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800927c:	7bfb      	ldrb	r3, [r7, #15]
 800927e:	4618      	mov	r0, r3
 8009280:	f000 f8de 	bl	8009440 <USBD_Get_USB_Status>
 8009284:	4603      	mov	r3, r0
 8009286:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009288:	7bbb      	ldrb	r3, [r7, #14]
}
 800928a:	4618      	mov	r0, r3
 800928c:	3710      	adds	r7, #16
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}

08009292 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009292:	b580      	push	{r7, lr}
 8009294:	b084      	sub	sp, #16
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
 800929a:	460b      	mov	r3, r1
 800929c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800929e:	2300      	movs	r3, #0
 80092a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092a2:	2300      	movs	r3, #0
 80092a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80092ac:	78fa      	ldrb	r2, [r7, #3]
 80092ae:	4611      	mov	r1, r2
 80092b0:	4618      	mov	r0, r3
 80092b2:	f7f9 ff7d 	bl	80031b0 <HAL_PCD_EP_ClrStall>
 80092b6:	4603      	mov	r3, r0
 80092b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092ba:	7bfb      	ldrb	r3, [r7, #15]
 80092bc:	4618      	mov	r0, r3
 80092be:	f000 f8bf 	bl	8009440 <USBD_Get_USB_Status>
 80092c2:	4603      	mov	r3, r0
 80092c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3710      	adds	r7, #16
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b085      	sub	sp, #20
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	460b      	mov	r3, r1
 80092da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80092e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80092e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	da0b      	bge.n	8009304 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80092ec:	78fb      	ldrb	r3, [r7, #3]
 80092ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80092f2:	68f9      	ldr	r1, [r7, #12]
 80092f4:	4613      	mov	r3, r2
 80092f6:	00db      	lsls	r3, r3, #3
 80092f8:	4413      	add	r3, r2
 80092fa:	009b      	lsls	r3, r3, #2
 80092fc:	440b      	add	r3, r1
 80092fe:	3316      	adds	r3, #22
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	e00b      	b.n	800931c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009304:	78fb      	ldrb	r3, [r7, #3]
 8009306:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800930a:	68f9      	ldr	r1, [r7, #12]
 800930c:	4613      	mov	r3, r2
 800930e:	00db      	lsls	r3, r3, #3
 8009310:	4413      	add	r3, r2
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	440b      	add	r3, r1
 8009316:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800931a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800931c:	4618      	mov	r0, r3
 800931e:	3714      	adds	r7, #20
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b084      	sub	sp, #16
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	460b      	mov	r3, r1
 8009332:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009334:	2300      	movs	r3, #0
 8009336:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009338:	2300      	movs	r3, #0
 800933a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009342:	78fa      	ldrb	r2, [r7, #3]
 8009344:	4611      	mov	r1, r2
 8009346:	4618      	mov	r0, r3
 8009348:	f7f9 fd6a 	bl	8002e20 <HAL_PCD_SetAddress>
 800934c:	4603      	mov	r3, r0
 800934e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009350:	7bfb      	ldrb	r3, [r7, #15]
 8009352:	4618      	mov	r0, r3
 8009354:	f000 f874 	bl	8009440 <USBD_Get_USB_Status>
 8009358:	4603      	mov	r3, r0
 800935a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800935c:	7bbb      	ldrb	r3, [r7, #14]
}
 800935e:	4618      	mov	r0, r3
 8009360:	3710      	adds	r7, #16
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}

08009366 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009366:	b580      	push	{r7, lr}
 8009368:	b086      	sub	sp, #24
 800936a:	af00      	add	r7, sp, #0
 800936c:	60f8      	str	r0, [r7, #12]
 800936e:	607a      	str	r2, [r7, #4]
 8009370:	603b      	str	r3, [r7, #0]
 8009372:	460b      	mov	r3, r1
 8009374:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009376:	2300      	movs	r3, #0
 8009378:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800937a:	2300      	movs	r3, #0
 800937c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009384:	7af9      	ldrb	r1, [r7, #11]
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	f7f9 fe74 	bl	8003076 <HAL_PCD_EP_Transmit>
 800938e:	4603      	mov	r3, r0
 8009390:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009392:	7dfb      	ldrb	r3, [r7, #23]
 8009394:	4618      	mov	r0, r3
 8009396:	f000 f853 	bl	8009440 <USBD_Get_USB_Status>
 800939a:	4603      	mov	r3, r0
 800939c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800939e:	7dbb      	ldrb	r3, [r7, #22]
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3718      	adds	r7, #24
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b086      	sub	sp, #24
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	60f8      	str	r0, [r7, #12]
 80093b0:	607a      	str	r2, [r7, #4]
 80093b2:	603b      	str	r3, [r7, #0]
 80093b4:	460b      	mov	r3, r1
 80093b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093b8:	2300      	movs	r3, #0
 80093ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093bc:	2300      	movs	r3, #0
 80093be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80093c6:	7af9      	ldrb	r1, [r7, #11]
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	687a      	ldr	r2, [r7, #4]
 80093cc:	f7f9 fe00 	bl	8002fd0 <HAL_PCD_EP_Receive>
 80093d0:	4603      	mov	r3, r0
 80093d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093d4:	7dfb      	ldrb	r3, [r7, #23]
 80093d6:	4618      	mov	r0, r3
 80093d8:	f000 f832 	bl	8009440 <USBD_Get_USB_Status>
 80093dc:	4603      	mov	r3, r0
 80093de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80093e0:	7dbb      	ldrb	r3, [r7, #22]
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3718      	adds	r7, #24
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b082      	sub	sp, #8
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
 80093f2:	460b      	mov	r3, r1
 80093f4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80093fc:	78fa      	ldrb	r2, [r7, #3]
 80093fe:	4611      	mov	r1, r2
 8009400:	4618      	mov	r0, r3
 8009402:	f7f9 fe20 	bl	8003046 <HAL_PCD_EP_GetRxCount>
 8009406:	4603      	mov	r3, r0
}
 8009408:	4618      	mov	r0, r3
 800940a:	3708      	adds	r7, #8
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009418:	4b03      	ldr	r3, [pc, #12]	@ (8009428 <USBD_static_malloc+0x18>)
}
 800941a:	4618      	mov	r0, r3
 800941c:	370c      	adds	r7, #12
 800941e:	46bd      	mov	sp, r7
 8009420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009424:	4770      	bx	lr
 8009426:	bf00      	nop
 8009428:	20007bb0 	.word	0x20007bb0

0800942c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800942c:	b480      	push	{r7}
 800942e:	b083      	sub	sp, #12
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]

}
 8009434:	bf00      	nop
 8009436:	370c      	adds	r7, #12
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr

08009440 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009440:	b480      	push	{r7}
 8009442:	b085      	sub	sp, #20
 8009444:	af00      	add	r7, sp, #0
 8009446:	4603      	mov	r3, r0
 8009448:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800944a:	2300      	movs	r3, #0
 800944c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800944e:	79fb      	ldrb	r3, [r7, #7]
 8009450:	2b03      	cmp	r3, #3
 8009452:	d817      	bhi.n	8009484 <USBD_Get_USB_Status+0x44>
 8009454:	a201      	add	r2, pc, #4	@ (adr r2, 800945c <USBD_Get_USB_Status+0x1c>)
 8009456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800945a:	bf00      	nop
 800945c:	0800946d 	.word	0x0800946d
 8009460:	08009473 	.word	0x08009473
 8009464:	08009479 	.word	0x08009479
 8009468:	0800947f 	.word	0x0800947f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800946c:	2300      	movs	r3, #0
 800946e:	73fb      	strb	r3, [r7, #15]
    break;
 8009470:	e00b      	b.n	800948a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009472:	2303      	movs	r3, #3
 8009474:	73fb      	strb	r3, [r7, #15]
    break;
 8009476:	e008      	b.n	800948a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009478:	2301      	movs	r3, #1
 800947a:	73fb      	strb	r3, [r7, #15]
    break;
 800947c:	e005      	b.n	800948a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800947e:	2303      	movs	r3, #3
 8009480:	73fb      	strb	r3, [r7, #15]
    break;
 8009482:	e002      	b.n	800948a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009484:	2303      	movs	r3, #3
 8009486:	73fb      	strb	r3, [r7, #15]
    break;
 8009488:	bf00      	nop
  }
  return usb_status;
 800948a:	7bfb      	ldrb	r3, [r7, #15]
}
 800948c:	4618      	mov	r0, r3
 800948e:	3714      	adds	r7, #20
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <_vsniprintf_r>:
 8009498:	b530      	push	{r4, r5, lr}
 800949a:	4614      	mov	r4, r2
 800949c:	2c00      	cmp	r4, #0
 800949e:	b09b      	sub	sp, #108	@ 0x6c
 80094a0:	4605      	mov	r5, r0
 80094a2:	461a      	mov	r2, r3
 80094a4:	da05      	bge.n	80094b2 <_vsniprintf_r+0x1a>
 80094a6:	238b      	movs	r3, #139	@ 0x8b
 80094a8:	6003      	str	r3, [r0, #0]
 80094aa:	f04f 30ff 	mov.w	r0, #4294967295
 80094ae:	b01b      	add	sp, #108	@ 0x6c
 80094b0:	bd30      	pop	{r4, r5, pc}
 80094b2:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80094b6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80094ba:	bf14      	ite	ne
 80094bc:	f104 33ff 	addne.w	r3, r4, #4294967295
 80094c0:	4623      	moveq	r3, r4
 80094c2:	9302      	str	r3, [sp, #8]
 80094c4:	9305      	str	r3, [sp, #20]
 80094c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80094ca:	9100      	str	r1, [sp, #0]
 80094cc:	9104      	str	r1, [sp, #16]
 80094ce:	f8ad 300e 	strh.w	r3, [sp, #14]
 80094d2:	4669      	mov	r1, sp
 80094d4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80094d6:	f000 f9a1 	bl	800981c <_svfiprintf_r>
 80094da:	1c43      	adds	r3, r0, #1
 80094dc:	bfbc      	itt	lt
 80094de:	238b      	movlt	r3, #139	@ 0x8b
 80094e0:	602b      	strlt	r3, [r5, #0]
 80094e2:	2c00      	cmp	r4, #0
 80094e4:	d0e3      	beq.n	80094ae <_vsniprintf_r+0x16>
 80094e6:	9b00      	ldr	r3, [sp, #0]
 80094e8:	2200      	movs	r2, #0
 80094ea:	701a      	strb	r2, [r3, #0]
 80094ec:	e7df      	b.n	80094ae <_vsniprintf_r+0x16>
	...

080094f0 <vsniprintf>:
 80094f0:	b507      	push	{r0, r1, r2, lr}
 80094f2:	9300      	str	r3, [sp, #0]
 80094f4:	4613      	mov	r3, r2
 80094f6:	460a      	mov	r2, r1
 80094f8:	4601      	mov	r1, r0
 80094fa:	4803      	ldr	r0, [pc, #12]	@ (8009508 <vsniprintf+0x18>)
 80094fc:	6800      	ldr	r0, [r0, #0]
 80094fe:	f7ff ffcb 	bl	8009498 <_vsniprintf_r>
 8009502:	b003      	add	sp, #12
 8009504:	f85d fb04 	ldr.w	pc, [sp], #4
 8009508:	20000100 	.word	0x20000100

0800950c <memset>:
 800950c:	4402      	add	r2, r0
 800950e:	4603      	mov	r3, r0
 8009510:	4293      	cmp	r3, r2
 8009512:	d100      	bne.n	8009516 <memset+0xa>
 8009514:	4770      	bx	lr
 8009516:	f803 1b01 	strb.w	r1, [r3], #1
 800951a:	e7f9      	b.n	8009510 <memset+0x4>

0800951c <__errno>:
 800951c:	4b01      	ldr	r3, [pc, #4]	@ (8009524 <__errno+0x8>)
 800951e:	6818      	ldr	r0, [r3, #0]
 8009520:	4770      	bx	lr
 8009522:	bf00      	nop
 8009524:	20000100 	.word	0x20000100

08009528 <__libc_init_array>:
 8009528:	b570      	push	{r4, r5, r6, lr}
 800952a:	4d0d      	ldr	r5, [pc, #52]	@ (8009560 <__libc_init_array+0x38>)
 800952c:	4c0d      	ldr	r4, [pc, #52]	@ (8009564 <__libc_init_array+0x3c>)
 800952e:	1b64      	subs	r4, r4, r5
 8009530:	10a4      	asrs	r4, r4, #2
 8009532:	2600      	movs	r6, #0
 8009534:	42a6      	cmp	r6, r4
 8009536:	d109      	bne.n	800954c <__libc_init_array+0x24>
 8009538:	4d0b      	ldr	r5, [pc, #44]	@ (8009568 <__libc_init_array+0x40>)
 800953a:	4c0c      	ldr	r4, [pc, #48]	@ (800956c <__libc_init_array+0x44>)
 800953c:	f000 fc66 	bl	8009e0c <_init>
 8009540:	1b64      	subs	r4, r4, r5
 8009542:	10a4      	asrs	r4, r4, #2
 8009544:	2600      	movs	r6, #0
 8009546:	42a6      	cmp	r6, r4
 8009548:	d105      	bne.n	8009556 <__libc_init_array+0x2e>
 800954a:	bd70      	pop	{r4, r5, r6, pc}
 800954c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009550:	4798      	blx	r3
 8009552:	3601      	adds	r6, #1
 8009554:	e7ee      	b.n	8009534 <__libc_init_array+0xc>
 8009556:	f855 3b04 	ldr.w	r3, [r5], #4
 800955a:	4798      	blx	r3
 800955c:	3601      	adds	r6, #1
 800955e:	e7f2      	b.n	8009546 <__libc_init_array+0x1e>
 8009560:	0800a0b8 	.word	0x0800a0b8
 8009564:	0800a0b8 	.word	0x0800a0b8
 8009568:	0800a0b8 	.word	0x0800a0b8
 800956c:	0800a0bc 	.word	0x0800a0bc

08009570 <__retarget_lock_acquire_recursive>:
 8009570:	4770      	bx	lr

08009572 <__retarget_lock_release_recursive>:
 8009572:	4770      	bx	lr

08009574 <_free_r>:
 8009574:	b538      	push	{r3, r4, r5, lr}
 8009576:	4605      	mov	r5, r0
 8009578:	2900      	cmp	r1, #0
 800957a:	d041      	beq.n	8009600 <_free_r+0x8c>
 800957c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009580:	1f0c      	subs	r4, r1, #4
 8009582:	2b00      	cmp	r3, #0
 8009584:	bfb8      	it	lt
 8009586:	18e4      	addlt	r4, r4, r3
 8009588:	f000 f8e0 	bl	800974c <__malloc_lock>
 800958c:	4a1d      	ldr	r2, [pc, #116]	@ (8009604 <_free_r+0x90>)
 800958e:	6813      	ldr	r3, [r2, #0]
 8009590:	b933      	cbnz	r3, 80095a0 <_free_r+0x2c>
 8009592:	6063      	str	r3, [r4, #4]
 8009594:	6014      	str	r4, [r2, #0]
 8009596:	4628      	mov	r0, r5
 8009598:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800959c:	f000 b8dc 	b.w	8009758 <__malloc_unlock>
 80095a0:	42a3      	cmp	r3, r4
 80095a2:	d908      	bls.n	80095b6 <_free_r+0x42>
 80095a4:	6820      	ldr	r0, [r4, #0]
 80095a6:	1821      	adds	r1, r4, r0
 80095a8:	428b      	cmp	r3, r1
 80095aa:	bf01      	itttt	eq
 80095ac:	6819      	ldreq	r1, [r3, #0]
 80095ae:	685b      	ldreq	r3, [r3, #4]
 80095b0:	1809      	addeq	r1, r1, r0
 80095b2:	6021      	streq	r1, [r4, #0]
 80095b4:	e7ed      	b.n	8009592 <_free_r+0x1e>
 80095b6:	461a      	mov	r2, r3
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	b10b      	cbz	r3, 80095c0 <_free_r+0x4c>
 80095bc:	42a3      	cmp	r3, r4
 80095be:	d9fa      	bls.n	80095b6 <_free_r+0x42>
 80095c0:	6811      	ldr	r1, [r2, #0]
 80095c2:	1850      	adds	r0, r2, r1
 80095c4:	42a0      	cmp	r0, r4
 80095c6:	d10b      	bne.n	80095e0 <_free_r+0x6c>
 80095c8:	6820      	ldr	r0, [r4, #0]
 80095ca:	4401      	add	r1, r0
 80095cc:	1850      	adds	r0, r2, r1
 80095ce:	4283      	cmp	r3, r0
 80095d0:	6011      	str	r1, [r2, #0]
 80095d2:	d1e0      	bne.n	8009596 <_free_r+0x22>
 80095d4:	6818      	ldr	r0, [r3, #0]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	6053      	str	r3, [r2, #4]
 80095da:	4408      	add	r0, r1
 80095dc:	6010      	str	r0, [r2, #0]
 80095de:	e7da      	b.n	8009596 <_free_r+0x22>
 80095e0:	d902      	bls.n	80095e8 <_free_r+0x74>
 80095e2:	230c      	movs	r3, #12
 80095e4:	602b      	str	r3, [r5, #0]
 80095e6:	e7d6      	b.n	8009596 <_free_r+0x22>
 80095e8:	6820      	ldr	r0, [r4, #0]
 80095ea:	1821      	adds	r1, r4, r0
 80095ec:	428b      	cmp	r3, r1
 80095ee:	bf04      	itt	eq
 80095f0:	6819      	ldreq	r1, [r3, #0]
 80095f2:	685b      	ldreq	r3, [r3, #4]
 80095f4:	6063      	str	r3, [r4, #4]
 80095f6:	bf04      	itt	eq
 80095f8:	1809      	addeq	r1, r1, r0
 80095fa:	6021      	streq	r1, [r4, #0]
 80095fc:	6054      	str	r4, [r2, #4]
 80095fe:	e7ca      	b.n	8009596 <_free_r+0x22>
 8009600:	bd38      	pop	{r3, r4, r5, pc}
 8009602:	bf00      	nop
 8009604:	20007f14 	.word	0x20007f14

08009608 <sbrk_aligned>:
 8009608:	b570      	push	{r4, r5, r6, lr}
 800960a:	4e0f      	ldr	r6, [pc, #60]	@ (8009648 <sbrk_aligned+0x40>)
 800960c:	460c      	mov	r4, r1
 800960e:	6831      	ldr	r1, [r6, #0]
 8009610:	4605      	mov	r5, r0
 8009612:	b911      	cbnz	r1, 800961a <sbrk_aligned+0x12>
 8009614:	f000 fba6 	bl	8009d64 <_sbrk_r>
 8009618:	6030      	str	r0, [r6, #0]
 800961a:	4621      	mov	r1, r4
 800961c:	4628      	mov	r0, r5
 800961e:	f000 fba1 	bl	8009d64 <_sbrk_r>
 8009622:	1c43      	adds	r3, r0, #1
 8009624:	d103      	bne.n	800962e <sbrk_aligned+0x26>
 8009626:	f04f 34ff 	mov.w	r4, #4294967295
 800962a:	4620      	mov	r0, r4
 800962c:	bd70      	pop	{r4, r5, r6, pc}
 800962e:	1cc4      	adds	r4, r0, #3
 8009630:	f024 0403 	bic.w	r4, r4, #3
 8009634:	42a0      	cmp	r0, r4
 8009636:	d0f8      	beq.n	800962a <sbrk_aligned+0x22>
 8009638:	1a21      	subs	r1, r4, r0
 800963a:	4628      	mov	r0, r5
 800963c:	f000 fb92 	bl	8009d64 <_sbrk_r>
 8009640:	3001      	adds	r0, #1
 8009642:	d1f2      	bne.n	800962a <sbrk_aligned+0x22>
 8009644:	e7ef      	b.n	8009626 <sbrk_aligned+0x1e>
 8009646:	bf00      	nop
 8009648:	20007f10 	.word	0x20007f10

0800964c <_malloc_r>:
 800964c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009650:	1ccd      	adds	r5, r1, #3
 8009652:	f025 0503 	bic.w	r5, r5, #3
 8009656:	3508      	adds	r5, #8
 8009658:	2d0c      	cmp	r5, #12
 800965a:	bf38      	it	cc
 800965c:	250c      	movcc	r5, #12
 800965e:	2d00      	cmp	r5, #0
 8009660:	4606      	mov	r6, r0
 8009662:	db01      	blt.n	8009668 <_malloc_r+0x1c>
 8009664:	42a9      	cmp	r1, r5
 8009666:	d904      	bls.n	8009672 <_malloc_r+0x26>
 8009668:	230c      	movs	r3, #12
 800966a:	6033      	str	r3, [r6, #0]
 800966c:	2000      	movs	r0, #0
 800966e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009672:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009748 <_malloc_r+0xfc>
 8009676:	f000 f869 	bl	800974c <__malloc_lock>
 800967a:	f8d8 3000 	ldr.w	r3, [r8]
 800967e:	461c      	mov	r4, r3
 8009680:	bb44      	cbnz	r4, 80096d4 <_malloc_r+0x88>
 8009682:	4629      	mov	r1, r5
 8009684:	4630      	mov	r0, r6
 8009686:	f7ff ffbf 	bl	8009608 <sbrk_aligned>
 800968a:	1c43      	adds	r3, r0, #1
 800968c:	4604      	mov	r4, r0
 800968e:	d158      	bne.n	8009742 <_malloc_r+0xf6>
 8009690:	f8d8 4000 	ldr.w	r4, [r8]
 8009694:	4627      	mov	r7, r4
 8009696:	2f00      	cmp	r7, #0
 8009698:	d143      	bne.n	8009722 <_malloc_r+0xd6>
 800969a:	2c00      	cmp	r4, #0
 800969c:	d04b      	beq.n	8009736 <_malloc_r+0xea>
 800969e:	6823      	ldr	r3, [r4, #0]
 80096a0:	4639      	mov	r1, r7
 80096a2:	4630      	mov	r0, r6
 80096a4:	eb04 0903 	add.w	r9, r4, r3
 80096a8:	f000 fb5c 	bl	8009d64 <_sbrk_r>
 80096ac:	4581      	cmp	r9, r0
 80096ae:	d142      	bne.n	8009736 <_malloc_r+0xea>
 80096b0:	6821      	ldr	r1, [r4, #0]
 80096b2:	1a6d      	subs	r5, r5, r1
 80096b4:	4629      	mov	r1, r5
 80096b6:	4630      	mov	r0, r6
 80096b8:	f7ff ffa6 	bl	8009608 <sbrk_aligned>
 80096bc:	3001      	adds	r0, #1
 80096be:	d03a      	beq.n	8009736 <_malloc_r+0xea>
 80096c0:	6823      	ldr	r3, [r4, #0]
 80096c2:	442b      	add	r3, r5
 80096c4:	6023      	str	r3, [r4, #0]
 80096c6:	f8d8 3000 	ldr.w	r3, [r8]
 80096ca:	685a      	ldr	r2, [r3, #4]
 80096cc:	bb62      	cbnz	r2, 8009728 <_malloc_r+0xdc>
 80096ce:	f8c8 7000 	str.w	r7, [r8]
 80096d2:	e00f      	b.n	80096f4 <_malloc_r+0xa8>
 80096d4:	6822      	ldr	r2, [r4, #0]
 80096d6:	1b52      	subs	r2, r2, r5
 80096d8:	d420      	bmi.n	800971c <_malloc_r+0xd0>
 80096da:	2a0b      	cmp	r2, #11
 80096dc:	d917      	bls.n	800970e <_malloc_r+0xc2>
 80096de:	1961      	adds	r1, r4, r5
 80096e0:	42a3      	cmp	r3, r4
 80096e2:	6025      	str	r5, [r4, #0]
 80096e4:	bf18      	it	ne
 80096e6:	6059      	strne	r1, [r3, #4]
 80096e8:	6863      	ldr	r3, [r4, #4]
 80096ea:	bf08      	it	eq
 80096ec:	f8c8 1000 	streq.w	r1, [r8]
 80096f0:	5162      	str	r2, [r4, r5]
 80096f2:	604b      	str	r3, [r1, #4]
 80096f4:	4630      	mov	r0, r6
 80096f6:	f000 f82f 	bl	8009758 <__malloc_unlock>
 80096fa:	f104 000b 	add.w	r0, r4, #11
 80096fe:	1d23      	adds	r3, r4, #4
 8009700:	f020 0007 	bic.w	r0, r0, #7
 8009704:	1ac2      	subs	r2, r0, r3
 8009706:	bf1c      	itt	ne
 8009708:	1a1b      	subne	r3, r3, r0
 800970a:	50a3      	strne	r3, [r4, r2]
 800970c:	e7af      	b.n	800966e <_malloc_r+0x22>
 800970e:	6862      	ldr	r2, [r4, #4]
 8009710:	42a3      	cmp	r3, r4
 8009712:	bf0c      	ite	eq
 8009714:	f8c8 2000 	streq.w	r2, [r8]
 8009718:	605a      	strne	r2, [r3, #4]
 800971a:	e7eb      	b.n	80096f4 <_malloc_r+0xa8>
 800971c:	4623      	mov	r3, r4
 800971e:	6864      	ldr	r4, [r4, #4]
 8009720:	e7ae      	b.n	8009680 <_malloc_r+0x34>
 8009722:	463c      	mov	r4, r7
 8009724:	687f      	ldr	r7, [r7, #4]
 8009726:	e7b6      	b.n	8009696 <_malloc_r+0x4a>
 8009728:	461a      	mov	r2, r3
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	42a3      	cmp	r3, r4
 800972e:	d1fb      	bne.n	8009728 <_malloc_r+0xdc>
 8009730:	2300      	movs	r3, #0
 8009732:	6053      	str	r3, [r2, #4]
 8009734:	e7de      	b.n	80096f4 <_malloc_r+0xa8>
 8009736:	230c      	movs	r3, #12
 8009738:	6033      	str	r3, [r6, #0]
 800973a:	4630      	mov	r0, r6
 800973c:	f000 f80c 	bl	8009758 <__malloc_unlock>
 8009740:	e794      	b.n	800966c <_malloc_r+0x20>
 8009742:	6005      	str	r5, [r0, #0]
 8009744:	e7d6      	b.n	80096f4 <_malloc_r+0xa8>
 8009746:	bf00      	nop
 8009748:	20007f14 	.word	0x20007f14

0800974c <__malloc_lock>:
 800974c:	4801      	ldr	r0, [pc, #4]	@ (8009754 <__malloc_lock+0x8>)
 800974e:	f7ff bf0f 	b.w	8009570 <__retarget_lock_acquire_recursive>
 8009752:	bf00      	nop
 8009754:	20007f0c 	.word	0x20007f0c

08009758 <__malloc_unlock>:
 8009758:	4801      	ldr	r0, [pc, #4]	@ (8009760 <__malloc_unlock+0x8>)
 800975a:	f7ff bf0a 	b.w	8009572 <__retarget_lock_release_recursive>
 800975e:	bf00      	nop
 8009760:	20007f0c 	.word	0x20007f0c

08009764 <__ssputs_r>:
 8009764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009768:	688e      	ldr	r6, [r1, #8]
 800976a:	461f      	mov	r7, r3
 800976c:	42be      	cmp	r6, r7
 800976e:	680b      	ldr	r3, [r1, #0]
 8009770:	4682      	mov	sl, r0
 8009772:	460c      	mov	r4, r1
 8009774:	4690      	mov	r8, r2
 8009776:	d82d      	bhi.n	80097d4 <__ssputs_r+0x70>
 8009778:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800977c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009780:	d026      	beq.n	80097d0 <__ssputs_r+0x6c>
 8009782:	6965      	ldr	r5, [r4, #20]
 8009784:	6909      	ldr	r1, [r1, #16]
 8009786:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800978a:	eba3 0901 	sub.w	r9, r3, r1
 800978e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009792:	1c7b      	adds	r3, r7, #1
 8009794:	444b      	add	r3, r9
 8009796:	106d      	asrs	r5, r5, #1
 8009798:	429d      	cmp	r5, r3
 800979a:	bf38      	it	cc
 800979c:	461d      	movcc	r5, r3
 800979e:	0553      	lsls	r3, r2, #21
 80097a0:	d527      	bpl.n	80097f2 <__ssputs_r+0x8e>
 80097a2:	4629      	mov	r1, r5
 80097a4:	f7ff ff52 	bl	800964c <_malloc_r>
 80097a8:	4606      	mov	r6, r0
 80097aa:	b360      	cbz	r0, 8009806 <__ssputs_r+0xa2>
 80097ac:	6921      	ldr	r1, [r4, #16]
 80097ae:	464a      	mov	r2, r9
 80097b0:	f000 fae8 	bl	8009d84 <memcpy>
 80097b4:	89a3      	ldrh	r3, [r4, #12]
 80097b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80097ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097be:	81a3      	strh	r3, [r4, #12]
 80097c0:	6126      	str	r6, [r4, #16]
 80097c2:	6165      	str	r5, [r4, #20]
 80097c4:	444e      	add	r6, r9
 80097c6:	eba5 0509 	sub.w	r5, r5, r9
 80097ca:	6026      	str	r6, [r4, #0]
 80097cc:	60a5      	str	r5, [r4, #8]
 80097ce:	463e      	mov	r6, r7
 80097d0:	42be      	cmp	r6, r7
 80097d2:	d900      	bls.n	80097d6 <__ssputs_r+0x72>
 80097d4:	463e      	mov	r6, r7
 80097d6:	6820      	ldr	r0, [r4, #0]
 80097d8:	4632      	mov	r2, r6
 80097da:	4641      	mov	r1, r8
 80097dc:	f000 faa8 	bl	8009d30 <memmove>
 80097e0:	68a3      	ldr	r3, [r4, #8]
 80097e2:	1b9b      	subs	r3, r3, r6
 80097e4:	60a3      	str	r3, [r4, #8]
 80097e6:	6823      	ldr	r3, [r4, #0]
 80097e8:	4433      	add	r3, r6
 80097ea:	6023      	str	r3, [r4, #0]
 80097ec:	2000      	movs	r0, #0
 80097ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097f2:	462a      	mov	r2, r5
 80097f4:	f000 fad4 	bl	8009da0 <_realloc_r>
 80097f8:	4606      	mov	r6, r0
 80097fa:	2800      	cmp	r0, #0
 80097fc:	d1e0      	bne.n	80097c0 <__ssputs_r+0x5c>
 80097fe:	6921      	ldr	r1, [r4, #16]
 8009800:	4650      	mov	r0, sl
 8009802:	f7ff feb7 	bl	8009574 <_free_r>
 8009806:	230c      	movs	r3, #12
 8009808:	f8ca 3000 	str.w	r3, [sl]
 800980c:	89a3      	ldrh	r3, [r4, #12]
 800980e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009812:	81a3      	strh	r3, [r4, #12]
 8009814:	f04f 30ff 	mov.w	r0, #4294967295
 8009818:	e7e9      	b.n	80097ee <__ssputs_r+0x8a>
	...

0800981c <_svfiprintf_r>:
 800981c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009820:	4698      	mov	r8, r3
 8009822:	898b      	ldrh	r3, [r1, #12]
 8009824:	061b      	lsls	r3, r3, #24
 8009826:	b09d      	sub	sp, #116	@ 0x74
 8009828:	4607      	mov	r7, r0
 800982a:	460d      	mov	r5, r1
 800982c:	4614      	mov	r4, r2
 800982e:	d510      	bpl.n	8009852 <_svfiprintf_r+0x36>
 8009830:	690b      	ldr	r3, [r1, #16]
 8009832:	b973      	cbnz	r3, 8009852 <_svfiprintf_r+0x36>
 8009834:	2140      	movs	r1, #64	@ 0x40
 8009836:	f7ff ff09 	bl	800964c <_malloc_r>
 800983a:	6028      	str	r0, [r5, #0]
 800983c:	6128      	str	r0, [r5, #16]
 800983e:	b930      	cbnz	r0, 800984e <_svfiprintf_r+0x32>
 8009840:	230c      	movs	r3, #12
 8009842:	603b      	str	r3, [r7, #0]
 8009844:	f04f 30ff 	mov.w	r0, #4294967295
 8009848:	b01d      	add	sp, #116	@ 0x74
 800984a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800984e:	2340      	movs	r3, #64	@ 0x40
 8009850:	616b      	str	r3, [r5, #20]
 8009852:	2300      	movs	r3, #0
 8009854:	9309      	str	r3, [sp, #36]	@ 0x24
 8009856:	2320      	movs	r3, #32
 8009858:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800985c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009860:	2330      	movs	r3, #48	@ 0x30
 8009862:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009a00 <_svfiprintf_r+0x1e4>
 8009866:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800986a:	f04f 0901 	mov.w	r9, #1
 800986e:	4623      	mov	r3, r4
 8009870:	469a      	mov	sl, r3
 8009872:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009876:	b10a      	cbz	r2, 800987c <_svfiprintf_r+0x60>
 8009878:	2a25      	cmp	r2, #37	@ 0x25
 800987a:	d1f9      	bne.n	8009870 <_svfiprintf_r+0x54>
 800987c:	ebba 0b04 	subs.w	fp, sl, r4
 8009880:	d00b      	beq.n	800989a <_svfiprintf_r+0x7e>
 8009882:	465b      	mov	r3, fp
 8009884:	4622      	mov	r2, r4
 8009886:	4629      	mov	r1, r5
 8009888:	4638      	mov	r0, r7
 800988a:	f7ff ff6b 	bl	8009764 <__ssputs_r>
 800988e:	3001      	adds	r0, #1
 8009890:	f000 80a7 	beq.w	80099e2 <_svfiprintf_r+0x1c6>
 8009894:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009896:	445a      	add	r2, fp
 8009898:	9209      	str	r2, [sp, #36]	@ 0x24
 800989a:	f89a 3000 	ldrb.w	r3, [sl]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	f000 809f 	beq.w	80099e2 <_svfiprintf_r+0x1c6>
 80098a4:	2300      	movs	r3, #0
 80098a6:	f04f 32ff 	mov.w	r2, #4294967295
 80098aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098ae:	f10a 0a01 	add.w	sl, sl, #1
 80098b2:	9304      	str	r3, [sp, #16]
 80098b4:	9307      	str	r3, [sp, #28]
 80098b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80098ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80098bc:	4654      	mov	r4, sl
 80098be:	2205      	movs	r2, #5
 80098c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098c4:	484e      	ldr	r0, [pc, #312]	@ (8009a00 <_svfiprintf_r+0x1e4>)
 80098c6:	f7f6 fc93 	bl	80001f0 <memchr>
 80098ca:	9a04      	ldr	r2, [sp, #16]
 80098cc:	b9d8      	cbnz	r0, 8009906 <_svfiprintf_r+0xea>
 80098ce:	06d0      	lsls	r0, r2, #27
 80098d0:	bf44      	itt	mi
 80098d2:	2320      	movmi	r3, #32
 80098d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80098d8:	0711      	lsls	r1, r2, #28
 80098da:	bf44      	itt	mi
 80098dc:	232b      	movmi	r3, #43	@ 0x2b
 80098de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80098e2:	f89a 3000 	ldrb.w	r3, [sl]
 80098e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80098e8:	d015      	beq.n	8009916 <_svfiprintf_r+0xfa>
 80098ea:	9a07      	ldr	r2, [sp, #28]
 80098ec:	4654      	mov	r4, sl
 80098ee:	2000      	movs	r0, #0
 80098f0:	f04f 0c0a 	mov.w	ip, #10
 80098f4:	4621      	mov	r1, r4
 80098f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098fa:	3b30      	subs	r3, #48	@ 0x30
 80098fc:	2b09      	cmp	r3, #9
 80098fe:	d94b      	bls.n	8009998 <_svfiprintf_r+0x17c>
 8009900:	b1b0      	cbz	r0, 8009930 <_svfiprintf_r+0x114>
 8009902:	9207      	str	r2, [sp, #28]
 8009904:	e014      	b.n	8009930 <_svfiprintf_r+0x114>
 8009906:	eba0 0308 	sub.w	r3, r0, r8
 800990a:	fa09 f303 	lsl.w	r3, r9, r3
 800990e:	4313      	orrs	r3, r2
 8009910:	9304      	str	r3, [sp, #16]
 8009912:	46a2      	mov	sl, r4
 8009914:	e7d2      	b.n	80098bc <_svfiprintf_r+0xa0>
 8009916:	9b03      	ldr	r3, [sp, #12]
 8009918:	1d19      	adds	r1, r3, #4
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	9103      	str	r1, [sp, #12]
 800991e:	2b00      	cmp	r3, #0
 8009920:	bfbb      	ittet	lt
 8009922:	425b      	neglt	r3, r3
 8009924:	f042 0202 	orrlt.w	r2, r2, #2
 8009928:	9307      	strge	r3, [sp, #28]
 800992a:	9307      	strlt	r3, [sp, #28]
 800992c:	bfb8      	it	lt
 800992e:	9204      	strlt	r2, [sp, #16]
 8009930:	7823      	ldrb	r3, [r4, #0]
 8009932:	2b2e      	cmp	r3, #46	@ 0x2e
 8009934:	d10a      	bne.n	800994c <_svfiprintf_r+0x130>
 8009936:	7863      	ldrb	r3, [r4, #1]
 8009938:	2b2a      	cmp	r3, #42	@ 0x2a
 800993a:	d132      	bne.n	80099a2 <_svfiprintf_r+0x186>
 800993c:	9b03      	ldr	r3, [sp, #12]
 800993e:	1d1a      	adds	r2, r3, #4
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	9203      	str	r2, [sp, #12]
 8009944:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009948:	3402      	adds	r4, #2
 800994a:	9305      	str	r3, [sp, #20]
 800994c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009a10 <_svfiprintf_r+0x1f4>
 8009950:	7821      	ldrb	r1, [r4, #0]
 8009952:	2203      	movs	r2, #3
 8009954:	4650      	mov	r0, sl
 8009956:	f7f6 fc4b 	bl	80001f0 <memchr>
 800995a:	b138      	cbz	r0, 800996c <_svfiprintf_r+0x150>
 800995c:	9b04      	ldr	r3, [sp, #16]
 800995e:	eba0 000a 	sub.w	r0, r0, sl
 8009962:	2240      	movs	r2, #64	@ 0x40
 8009964:	4082      	lsls	r2, r0
 8009966:	4313      	orrs	r3, r2
 8009968:	3401      	adds	r4, #1
 800996a:	9304      	str	r3, [sp, #16]
 800996c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009970:	4824      	ldr	r0, [pc, #144]	@ (8009a04 <_svfiprintf_r+0x1e8>)
 8009972:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009976:	2206      	movs	r2, #6
 8009978:	f7f6 fc3a 	bl	80001f0 <memchr>
 800997c:	2800      	cmp	r0, #0
 800997e:	d036      	beq.n	80099ee <_svfiprintf_r+0x1d2>
 8009980:	4b21      	ldr	r3, [pc, #132]	@ (8009a08 <_svfiprintf_r+0x1ec>)
 8009982:	bb1b      	cbnz	r3, 80099cc <_svfiprintf_r+0x1b0>
 8009984:	9b03      	ldr	r3, [sp, #12]
 8009986:	3307      	adds	r3, #7
 8009988:	f023 0307 	bic.w	r3, r3, #7
 800998c:	3308      	adds	r3, #8
 800998e:	9303      	str	r3, [sp, #12]
 8009990:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009992:	4433      	add	r3, r6
 8009994:	9309      	str	r3, [sp, #36]	@ 0x24
 8009996:	e76a      	b.n	800986e <_svfiprintf_r+0x52>
 8009998:	fb0c 3202 	mla	r2, ip, r2, r3
 800999c:	460c      	mov	r4, r1
 800999e:	2001      	movs	r0, #1
 80099a0:	e7a8      	b.n	80098f4 <_svfiprintf_r+0xd8>
 80099a2:	2300      	movs	r3, #0
 80099a4:	3401      	adds	r4, #1
 80099a6:	9305      	str	r3, [sp, #20]
 80099a8:	4619      	mov	r1, r3
 80099aa:	f04f 0c0a 	mov.w	ip, #10
 80099ae:	4620      	mov	r0, r4
 80099b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099b4:	3a30      	subs	r2, #48	@ 0x30
 80099b6:	2a09      	cmp	r2, #9
 80099b8:	d903      	bls.n	80099c2 <_svfiprintf_r+0x1a6>
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d0c6      	beq.n	800994c <_svfiprintf_r+0x130>
 80099be:	9105      	str	r1, [sp, #20]
 80099c0:	e7c4      	b.n	800994c <_svfiprintf_r+0x130>
 80099c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80099c6:	4604      	mov	r4, r0
 80099c8:	2301      	movs	r3, #1
 80099ca:	e7f0      	b.n	80099ae <_svfiprintf_r+0x192>
 80099cc:	ab03      	add	r3, sp, #12
 80099ce:	9300      	str	r3, [sp, #0]
 80099d0:	462a      	mov	r2, r5
 80099d2:	4b0e      	ldr	r3, [pc, #56]	@ (8009a0c <_svfiprintf_r+0x1f0>)
 80099d4:	a904      	add	r1, sp, #16
 80099d6:	4638      	mov	r0, r7
 80099d8:	f3af 8000 	nop.w
 80099dc:	1c42      	adds	r2, r0, #1
 80099de:	4606      	mov	r6, r0
 80099e0:	d1d6      	bne.n	8009990 <_svfiprintf_r+0x174>
 80099e2:	89ab      	ldrh	r3, [r5, #12]
 80099e4:	065b      	lsls	r3, r3, #25
 80099e6:	f53f af2d 	bmi.w	8009844 <_svfiprintf_r+0x28>
 80099ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80099ec:	e72c      	b.n	8009848 <_svfiprintf_r+0x2c>
 80099ee:	ab03      	add	r3, sp, #12
 80099f0:	9300      	str	r3, [sp, #0]
 80099f2:	462a      	mov	r2, r5
 80099f4:	4b05      	ldr	r3, [pc, #20]	@ (8009a0c <_svfiprintf_r+0x1f0>)
 80099f6:	a904      	add	r1, sp, #16
 80099f8:	4638      	mov	r0, r7
 80099fa:	f000 f879 	bl	8009af0 <_printf_i>
 80099fe:	e7ed      	b.n	80099dc <_svfiprintf_r+0x1c0>
 8009a00:	0800a07c 	.word	0x0800a07c
 8009a04:	0800a086 	.word	0x0800a086
 8009a08:	00000000 	.word	0x00000000
 8009a0c:	08009765 	.word	0x08009765
 8009a10:	0800a082 	.word	0x0800a082

08009a14 <_printf_common>:
 8009a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a18:	4616      	mov	r6, r2
 8009a1a:	4698      	mov	r8, r3
 8009a1c:	688a      	ldr	r2, [r1, #8]
 8009a1e:	690b      	ldr	r3, [r1, #16]
 8009a20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009a24:	4293      	cmp	r3, r2
 8009a26:	bfb8      	it	lt
 8009a28:	4613      	movlt	r3, r2
 8009a2a:	6033      	str	r3, [r6, #0]
 8009a2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009a30:	4607      	mov	r7, r0
 8009a32:	460c      	mov	r4, r1
 8009a34:	b10a      	cbz	r2, 8009a3a <_printf_common+0x26>
 8009a36:	3301      	adds	r3, #1
 8009a38:	6033      	str	r3, [r6, #0]
 8009a3a:	6823      	ldr	r3, [r4, #0]
 8009a3c:	0699      	lsls	r1, r3, #26
 8009a3e:	bf42      	ittt	mi
 8009a40:	6833      	ldrmi	r3, [r6, #0]
 8009a42:	3302      	addmi	r3, #2
 8009a44:	6033      	strmi	r3, [r6, #0]
 8009a46:	6825      	ldr	r5, [r4, #0]
 8009a48:	f015 0506 	ands.w	r5, r5, #6
 8009a4c:	d106      	bne.n	8009a5c <_printf_common+0x48>
 8009a4e:	f104 0a19 	add.w	sl, r4, #25
 8009a52:	68e3      	ldr	r3, [r4, #12]
 8009a54:	6832      	ldr	r2, [r6, #0]
 8009a56:	1a9b      	subs	r3, r3, r2
 8009a58:	42ab      	cmp	r3, r5
 8009a5a:	dc26      	bgt.n	8009aaa <_printf_common+0x96>
 8009a5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009a60:	6822      	ldr	r2, [r4, #0]
 8009a62:	3b00      	subs	r3, #0
 8009a64:	bf18      	it	ne
 8009a66:	2301      	movne	r3, #1
 8009a68:	0692      	lsls	r2, r2, #26
 8009a6a:	d42b      	bmi.n	8009ac4 <_printf_common+0xb0>
 8009a6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009a70:	4641      	mov	r1, r8
 8009a72:	4638      	mov	r0, r7
 8009a74:	47c8      	blx	r9
 8009a76:	3001      	adds	r0, #1
 8009a78:	d01e      	beq.n	8009ab8 <_printf_common+0xa4>
 8009a7a:	6823      	ldr	r3, [r4, #0]
 8009a7c:	6922      	ldr	r2, [r4, #16]
 8009a7e:	f003 0306 	and.w	r3, r3, #6
 8009a82:	2b04      	cmp	r3, #4
 8009a84:	bf02      	ittt	eq
 8009a86:	68e5      	ldreq	r5, [r4, #12]
 8009a88:	6833      	ldreq	r3, [r6, #0]
 8009a8a:	1aed      	subeq	r5, r5, r3
 8009a8c:	68a3      	ldr	r3, [r4, #8]
 8009a8e:	bf0c      	ite	eq
 8009a90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a94:	2500      	movne	r5, #0
 8009a96:	4293      	cmp	r3, r2
 8009a98:	bfc4      	itt	gt
 8009a9a:	1a9b      	subgt	r3, r3, r2
 8009a9c:	18ed      	addgt	r5, r5, r3
 8009a9e:	2600      	movs	r6, #0
 8009aa0:	341a      	adds	r4, #26
 8009aa2:	42b5      	cmp	r5, r6
 8009aa4:	d11a      	bne.n	8009adc <_printf_common+0xc8>
 8009aa6:	2000      	movs	r0, #0
 8009aa8:	e008      	b.n	8009abc <_printf_common+0xa8>
 8009aaa:	2301      	movs	r3, #1
 8009aac:	4652      	mov	r2, sl
 8009aae:	4641      	mov	r1, r8
 8009ab0:	4638      	mov	r0, r7
 8009ab2:	47c8      	blx	r9
 8009ab4:	3001      	adds	r0, #1
 8009ab6:	d103      	bne.n	8009ac0 <_printf_common+0xac>
 8009ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8009abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ac0:	3501      	adds	r5, #1
 8009ac2:	e7c6      	b.n	8009a52 <_printf_common+0x3e>
 8009ac4:	18e1      	adds	r1, r4, r3
 8009ac6:	1c5a      	adds	r2, r3, #1
 8009ac8:	2030      	movs	r0, #48	@ 0x30
 8009aca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009ace:	4422      	add	r2, r4
 8009ad0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009ad4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009ad8:	3302      	adds	r3, #2
 8009ada:	e7c7      	b.n	8009a6c <_printf_common+0x58>
 8009adc:	2301      	movs	r3, #1
 8009ade:	4622      	mov	r2, r4
 8009ae0:	4641      	mov	r1, r8
 8009ae2:	4638      	mov	r0, r7
 8009ae4:	47c8      	blx	r9
 8009ae6:	3001      	adds	r0, #1
 8009ae8:	d0e6      	beq.n	8009ab8 <_printf_common+0xa4>
 8009aea:	3601      	adds	r6, #1
 8009aec:	e7d9      	b.n	8009aa2 <_printf_common+0x8e>
	...

08009af0 <_printf_i>:
 8009af0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009af4:	7e0f      	ldrb	r7, [r1, #24]
 8009af6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009af8:	2f78      	cmp	r7, #120	@ 0x78
 8009afa:	4691      	mov	r9, r2
 8009afc:	4680      	mov	r8, r0
 8009afe:	460c      	mov	r4, r1
 8009b00:	469a      	mov	sl, r3
 8009b02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009b06:	d807      	bhi.n	8009b18 <_printf_i+0x28>
 8009b08:	2f62      	cmp	r7, #98	@ 0x62
 8009b0a:	d80a      	bhi.n	8009b22 <_printf_i+0x32>
 8009b0c:	2f00      	cmp	r7, #0
 8009b0e:	f000 80d2 	beq.w	8009cb6 <_printf_i+0x1c6>
 8009b12:	2f58      	cmp	r7, #88	@ 0x58
 8009b14:	f000 80b9 	beq.w	8009c8a <_printf_i+0x19a>
 8009b18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009b1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009b20:	e03a      	b.n	8009b98 <_printf_i+0xa8>
 8009b22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009b26:	2b15      	cmp	r3, #21
 8009b28:	d8f6      	bhi.n	8009b18 <_printf_i+0x28>
 8009b2a:	a101      	add	r1, pc, #4	@ (adr r1, 8009b30 <_printf_i+0x40>)
 8009b2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b30:	08009b89 	.word	0x08009b89
 8009b34:	08009b9d 	.word	0x08009b9d
 8009b38:	08009b19 	.word	0x08009b19
 8009b3c:	08009b19 	.word	0x08009b19
 8009b40:	08009b19 	.word	0x08009b19
 8009b44:	08009b19 	.word	0x08009b19
 8009b48:	08009b9d 	.word	0x08009b9d
 8009b4c:	08009b19 	.word	0x08009b19
 8009b50:	08009b19 	.word	0x08009b19
 8009b54:	08009b19 	.word	0x08009b19
 8009b58:	08009b19 	.word	0x08009b19
 8009b5c:	08009c9d 	.word	0x08009c9d
 8009b60:	08009bc7 	.word	0x08009bc7
 8009b64:	08009c57 	.word	0x08009c57
 8009b68:	08009b19 	.word	0x08009b19
 8009b6c:	08009b19 	.word	0x08009b19
 8009b70:	08009cbf 	.word	0x08009cbf
 8009b74:	08009b19 	.word	0x08009b19
 8009b78:	08009bc7 	.word	0x08009bc7
 8009b7c:	08009b19 	.word	0x08009b19
 8009b80:	08009b19 	.word	0x08009b19
 8009b84:	08009c5f 	.word	0x08009c5f
 8009b88:	6833      	ldr	r3, [r6, #0]
 8009b8a:	1d1a      	adds	r2, r3, #4
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	6032      	str	r2, [r6, #0]
 8009b90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009b94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009b98:	2301      	movs	r3, #1
 8009b9a:	e09d      	b.n	8009cd8 <_printf_i+0x1e8>
 8009b9c:	6833      	ldr	r3, [r6, #0]
 8009b9e:	6820      	ldr	r0, [r4, #0]
 8009ba0:	1d19      	adds	r1, r3, #4
 8009ba2:	6031      	str	r1, [r6, #0]
 8009ba4:	0606      	lsls	r6, r0, #24
 8009ba6:	d501      	bpl.n	8009bac <_printf_i+0xbc>
 8009ba8:	681d      	ldr	r5, [r3, #0]
 8009baa:	e003      	b.n	8009bb4 <_printf_i+0xc4>
 8009bac:	0645      	lsls	r5, r0, #25
 8009bae:	d5fb      	bpl.n	8009ba8 <_printf_i+0xb8>
 8009bb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009bb4:	2d00      	cmp	r5, #0
 8009bb6:	da03      	bge.n	8009bc0 <_printf_i+0xd0>
 8009bb8:	232d      	movs	r3, #45	@ 0x2d
 8009bba:	426d      	negs	r5, r5
 8009bbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009bc0:	4859      	ldr	r0, [pc, #356]	@ (8009d28 <_printf_i+0x238>)
 8009bc2:	230a      	movs	r3, #10
 8009bc4:	e011      	b.n	8009bea <_printf_i+0xfa>
 8009bc6:	6821      	ldr	r1, [r4, #0]
 8009bc8:	6833      	ldr	r3, [r6, #0]
 8009bca:	0608      	lsls	r0, r1, #24
 8009bcc:	f853 5b04 	ldr.w	r5, [r3], #4
 8009bd0:	d402      	bmi.n	8009bd8 <_printf_i+0xe8>
 8009bd2:	0649      	lsls	r1, r1, #25
 8009bd4:	bf48      	it	mi
 8009bd6:	b2ad      	uxthmi	r5, r5
 8009bd8:	2f6f      	cmp	r7, #111	@ 0x6f
 8009bda:	4853      	ldr	r0, [pc, #332]	@ (8009d28 <_printf_i+0x238>)
 8009bdc:	6033      	str	r3, [r6, #0]
 8009bde:	bf14      	ite	ne
 8009be0:	230a      	movne	r3, #10
 8009be2:	2308      	moveq	r3, #8
 8009be4:	2100      	movs	r1, #0
 8009be6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009bea:	6866      	ldr	r6, [r4, #4]
 8009bec:	60a6      	str	r6, [r4, #8]
 8009bee:	2e00      	cmp	r6, #0
 8009bf0:	bfa2      	ittt	ge
 8009bf2:	6821      	ldrge	r1, [r4, #0]
 8009bf4:	f021 0104 	bicge.w	r1, r1, #4
 8009bf8:	6021      	strge	r1, [r4, #0]
 8009bfa:	b90d      	cbnz	r5, 8009c00 <_printf_i+0x110>
 8009bfc:	2e00      	cmp	r6, #0
 8009bfe:	d04b      	beq.n	8009c98 <_printf_i+0x1a8>
 8009c00:	4616      	mov	r6, r2
 8009c02:	fbb5 f1f3 	udiv	r1, r5, r3
 8009c06:	fb03 5711 	mls	r7, r3, r1, r5
 8009c0a:	5dc7      	ldrb	r7, [r0, r7]
 8009c0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009c10:	462f      	mov	r7, r5
 8009c12:	42bb      	cmp	r3, r7
 8009c14:	460d      	mov	r5, r1
 8009c16:	d9f4      	bls.n	8009c02 <_printf_i+0x112>
 8009c18:	2b08      	cmp	r3, #8
 8009c1a:	d10b      	bne.n	8009c34 <_printf_i+0x144>
 8009c1c:	6823      	ldr	r3, [r4, #0]
 8009c1e:	07df      	lsls	r7, r3, #31
 8009c20:	d508      	bpl.n	8009c34 <_printf_i+0x144>
 8009c22:	6923      	ldr	r3, [r4, #16]
 8009c24:	6861      	ldr	r1, [r4, #4]
 8009c26:	4299      	cmp	r1, r3
 8009c28:	bfde      	ittt	le
 8009c2a:	2330      	movle	r3, #48	@ 0x30
 8009c2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009c30:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009c34:	1b92      	subs	r2, r2, r6
 8009c36:	6122      	str	r2, [r4, #16]
 8009c38:	f8cd a000 	str.w	sl, [sp]
 8009c3c:	464b      	mov	r3, r9
 8009c3e:	aa03      	add	r2, sp, #12
 8009c40:	4621      	mov	r1, r4
 8009c42:	4640      	mov	r0, r8
 8009c44:	f7ff fee6 	bl	8009a14 <_printf_common>
 8009c48:	3001      	adds	r0, #1
 8009c4a:	d14a      	bne.n	8009ce2 <_printf_i+0x1f2>
 8009c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c50:	b004      	add	sp, #16
 8009c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c56:	6823      	ldr	r3, [r4, #0]
 8009c58:	f043 0320 	orr.w	r3, r3, #32
 8009c5c:	6023      	str	r3, [r4, #0]
 8009c5e:	4833      	ldr	r0, [pc, #204]	@ (8009d2c <_printf_i+0x23c>)
 8009c60:	2778      	movs	r7, #120	@ 0x78
 8009c62:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009c66:	6823      	ldr	r3, [r4, #0]
 8009c68:	6831      	ldr	r1, [r6, #0]
 8009c6a:	061f      	lsls	r7, r3, #24
 8009c6c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009c70:	d402      	bmi.n	8009c78 <_printf_i+0x188>
 8009c72:	065f      	lsls	r7, r3, #25
 8009c74:	bf48      	it	mi
 8009c76:	b2ad      	uxthmi	r5, r5
 8009c78:	6031      	str	r1, [r6, #0]
 8009c7a:	07d9      	lsls	r1, r3, #31
 8009c7c:	bf44      	itt	mi
 8009c7e:	f043 0320 	orrmi.w	r3, r3, #32
 8009c82:	6023      	strmi	r3, [r4, #0]
 8009c84:	b11d      	cbz	r5, 8009c8e <_printf_i+0x19e>
 8009c86:	2310      	movs	r3, #16
 8009c88:	e7ac      	b.n	8009be4 <_printf_i+0xf4>
 8009c8a:	4827      	ldr	r0, [pc, #156]	@ (8009d28 <_printf_i+0x238>)
 8009c8c:	e7e9      	b.n	8009c62 <_printf_i+0x172>
 8009c8e:	6823      	ldr	r3, [r4, #0]
 8009c90:	f023 0320 	bic.w	r3, r3, #32
 8009c94:	6023      	str	r3, [r4, #0]
 8009c96:	e7f6      	b.n	8009c86 <_printf_i+0x196>
 8009c98:	4616      	mov	r6, r2
 8009c9a:	e7bd      	b.n	8009c18 <_printf_i+0x128>
 8009c9c:	6833      	ldr	r3, [r6, #0]
 8009c9e:	6825      	ldr	r5, [r4, #0]
 8009ca0:	6961      	ldr	r1, [r4, #20]
 8009ca2:	1d18      	adds	r0, r3, #4
 8009ca4:	6030      	str	r0, [r6, #0]
 8009ca6:	062e      	lsls	r6, r5, #24
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	d501      	bpl.n	8009cb0 <_printf_i+0x1c0>
 8009cac:	6019      	str	r1, [r3, #0]
 8009cae:	e002      	b.n	8009cb6 <_printf_i+0x1c6>
 8009cb0:	0668      	lsls	r0, r5, #25
 8009cb2:	d5fb      	bpl.n	8009cac <_printf_i+0x1bc>
 8009cb4:	8019      	strh	r1, [r3, #0]
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	6123      	str	r3, [r4, #16]
 8009cba:	4616      	mov	r6, r2
 8009cbc:	e7bc      	b.n	8009c38 <_printf_i+0x148>
 8009cbe:	6833      	ldr	r3, [r6, #0]
 8009cc0:	1d1a      	adds	r2, r3, #4
 8009cc2:	6032      	str	r2, [r6, #0]
 8009cc4:	681e      	ldr	r6, [r3, #0]
 8009cc6:	6862      	ldr	r2, [r4, #4]
 8009cc8:	2100      	movs	r1, #0
 8009cca:	4630      	mov	r0, r6
 8009ccc:	f7f6 fa90 	bl	80001f0 <memchr>
 8009cd0:	b108      	cbz	r0, 8009cd6 <_printf_i+0x1e6>
 8009cd2:	1b80      	subs	r0, r0, r6
 8009cd4:	6060      	str	r0, [r4, #4]
 8009cd6:	6863      	ldr	r3, [r4, #4]
 8009cd8:	6123      	str	r3, [r4, #16]
 8009cda:	2300      	movs	r3, #0
 8009cdc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ce0:	e7aa      	b.n	8009c38 <_printf_i+0x148>
 8009ce2:	6923      	ldr	r3, [r4, #16]
 8009ce4:	4632      	mov	r2, r6
 8009ce6:	4649      	mov	r1, r9
 8009ce8:	4640      	mov	r0, r8
 8009cea:	47d0      	blx	sl
 8009cec:	3001      	adds	r0, #1
 8009cee:	d0ad      	beq.n	8009c4c <_printf_i+0x15c>
 8009cf0:	6823      	ldr	r3, [r4, #0]
 8009cf2:	079b      	lsls	r3, r3, #30
 8009cf4:	d413      	bmi.n	8009d1e <_printf_i+0x22e>
 8009cf6:	68e0      	ldr	r0, [r4, #12]
 8009cf8:	9b03      	ldr	r3, [sp, #12]
 8009cfa:	4298      	cmp	r0, r3
 8009cfc:	bfb8      	it	lt
 8009cfe:	4618      	movlt	r0, r3
 8009d00:	e7a6      	b.n	8009c50 <_printf_i+0x160>
 8009d02:	2301      	movs	r3, #1
 8009d04:	4632      	mov	r2, r6
 8009d06:	4649      	mov	r1, r9
 8009d08:	4640      	mov	r0, r8
 8009d0a:	47d0      	blx	sl
 8009d0c:	3001      	adds	r0, #1
 8009d0e:	d09d      	beq.n	8009c4c <_printf_i+0x15c>
 8009d10:	3501      	adds	r5, #1
 8009d12:	68e3      	ldr	r3, [r4, #12]
 8009d14:	9903      	ldr	r1, [sp, #12]
 8009d16:	1a5b      	subs	r3, r3, r1
 8009d18:	42ab      	cmp	r3, r5
 8009d1a:	dcf2      	bgt.n	8009d02 <_printf_i+0x212>
 8009d1c:	e7eb      	b.n	8009cf6 <_printf_i+0x206>
 8009d1e:	2500      	movs	r5, #0
 8009d20:	f104 0619 	add.w	r6, r4, #25
 8009d24:	e7f5      	b.n	8009d12 <_printf_i+0x222>
 8009d26:	bf00      	nop
 8009d28:	0800a08d 	.word	0x0800a08d
 8009d2c:	0800a09e 	.word	0x0800a09e

08009d30 <memmove>:
 8009d30:	4288      	cmp	r0, r1
 8009d32:	b510      	push	{r4, lr}
 8009d34:	eb01 0402 	add.w	r4, r1, r2
 8009d38:	d902      	bls.n	8009d40 <memmove+0x10>
 8009d3a:	4284      	cmp	r4, r0
 8009d3c:	4623      	mov	r3, r4
 8009d3e:	d807      	bhi.n	8009d50 <memmove+0x20>
 8009d40:	1e43      	subs	r3, r0, #1
 8009d42:	42a1      	cmp	r1, r4
 8009d44:	d008      	beq.n	8009d58 <memmove+0x28>
 8009d46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d4e:	e7f8      	b.n	8009d42 <memmove+0x12>
 8009d50:	4402      	add	r2, r0
 8009d52:	4601      	mov	r1, r0
 8009d54:	428a      	cmp	r2, r1
 8009d56:	d100      	bne.n	8009d5a <memmove+0x2a>
 8009d58:	bd10      	pop	{r4, pc}
 8009d5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d62:	e7f7      	b.n	8009d54 <memmove+0x24>

08009d64 <_sbrk_r>:
 8009d64:	b538      	push	{r3, r4, r5, lr}
 8009d66:	4d06      	ldr	r5, [pc, #24]	@ (8009d80 <_sbrk_r+0x1c>)
 8009d68:	2300      	movs	r3, #0
 8009d6a:	4604      	mov	r4, r0
 8009d6c:	4608      	mov	r0, r1
 8009d6e:	602b      	str	r3, [r5, #0]
 8009d70:	f7f7 fa90 	bl	8001294 <_sbrk>
 8009d74:	1c43      	adds	r3, r0, #1
 8009d76:	d102      	bne.n	8009d7e <_sbrk_r+0x1a>
 8009d78:	682b      	ldr	r3, [r5, #0]
 8009d7a:	b103      	cbz	r3, 8009d7e <_sbrk_r+0x1a>
 8009d7c:	6023      	str	r3, [r4, #0]
 8009d7e:	bd38      	pop	{r3, r4, r5, pc}
 8009d80:	20007f08 	.word	0x20007f08

08009d84 <memcpy>:
 8009d84:	440a      	add	r2, r1
 8009d86:	4291      	cmp	r1, r2
 8009d88:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d8c:	d100      	bne.n	8009d90 <memcpy+0xc>
 8009d8e:	4770      	bx	lr
 8009d90:	b510      	push	{r4, lr}
 8009d92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d9a:	4291      	cmp	r1, r2
 8009d9c:	d1f9      	bne.n	8009d92 <memcpy+0xe>
 8009d9e:	bd10      	pop	{r4, pc}

08009da0 <_realloc_r>:
 8009da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009da4:	4680      	mov	r8, r0
 8009da6:	4615      	mov	r5, r2
 8009da8:	460c      	mov	r4, r1
 8009daa:	b921      	cbnz	r1, 8009db6 <_realloc_r+0x16>
 8009dac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009db0:	4611      	mov	r1, r2
 8009db2:	f7ff bc4b 	b.w	800964c <_malloc_r>
 8009db6:	b92a      	cbnz	r2, 8009dc4 <_realloc_r+0x24>
 8009db8:	f7ff fbdc 	bl	8009574 <_free_r>
 8009dbc:	2400      	movs	r4, #0
 8009dbe:	4620      	mov	r0, r4
 8009dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dc4:	f000 f81a 	bl	8009dfc <_malloc_usable_size_r>
 8009dc8:	4285      	cmp	r5, r0
 8009dca:	4606      	mov	r6, r0
 8009dcc:	d802      	bhi.n	8009dd4 <_realloc_r+0x34>
 8009dce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009dd2:	d8f4      	bhi.n	8009dbe <_realloc_r+0x1e>
 8009dd4:	4629      	mov	r1, r5
 8009dd6:	4640      	mov	r0, r8
 8009dd8:	f7ff fc38 	bl	800964c <_malloc_r>
 8009ddc:	4607      	mov	r7, r0
 8009dde:	2800      	cmp	r0, #0
 8009de0:	d0ec      	beq.n	8009dbc <_realloc_r+0x1c>
 8009de2:	42b5      	cmp	r5, r6
 8009de4:	462a      	mov	r2, r5
 8009de6:	4621      	mov	r1, r4
 8009de8:	bf28      	it	cs
 8009dea:	4632      	movcs	r2, r6
 8009dec:	f7ff ffca 	bl	8009d84 <memcpy>
 8009df0:	4621      	mov	r1, r4
 8009df2:	4640      	mov	r0, r8
 8009df4:	f7ff fbbe 	bl	8009574 <_free_r>
 8009df8:	463c      	mov	r4, r7
 8009dfa:	e7e0      	b.n	8009dbe <_realloc_r+0x1e>

08009dfc <_malloc_usable_size_r>:
 8009dfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e00:	1f18      	subs	r0, r3, #4
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	bfbc      	itt	lt
 8009e06:	580b      	ldrlt	r3, [r1, r0]
 8009e08:	18c0      	addlt	r0, r0, r3
 8009e0a:	4770      	bx	lr

08009e0c <_init>:
 8009e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e0e:	bf00      	nop
 8009e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e12:	bc08      	pop	{r3}
 8009e14:	469e      	mov	lr, r3
 8009e16:	4770      	bx	lr

08009e18 <_fini>:
 8009e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e1a:	bf00      	nop
 8009e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e1e:	bc08      	pop	{r3}
 8009e20:	469e      	mov	lr, r3
 8009e22:	4770      	bx	lr
